
CAN_NormalMode-l476.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e44  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08004fd4  08004fd4  00005fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050ec  080050ec  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  080050ec  080050ec  000060ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080050f4  080050f4  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050f4  080050f4  000060f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080050f8  080050f8  000060f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080050fc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  2000005c  08005158  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c8  08005158  000072c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011fd0  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002376  00000000  00000000  0001905c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff8  00000000  00000000  0001b3d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c74  00000000  00000000  0001c3d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000272a0  00000000  00000000  0001d044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000118a5  00000000  00000000  000442e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4ab8  00000000  00000000  00055b89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014a641  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048f0  00000000  00000000  0014a684  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  0014ef74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004fbc 	.word	0x08004fbc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08004fbc 	.word	0x08004fbc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <SysTick_Handler>:
extern UART_HandleTypeDef huart2;
extern TIM_HandleTypeDef  htimer6;;
extern CAN_HandleTypeDef hcan1;

void SysTick_Handler(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
	 HAL_IncTick();
 8000574:	f000 fc78 	bl	8000e68 <HAL_IncTick>
	 HAL_SYSTICK_IRQHandler();
 8000578:	f001 fbcf 	bl	8001d1a <HAL_SYSTICK_IRQHandler>
}
 800057c:	bf00      	nop
 800057e:	bd80      	pop	{r7, pc}

08000580 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
//	Below func handles UART interrupt request, identify the reason
	HAL_UART_IRQHandler(&huart2);
 8000584:	4802      	ldr	r0, [pc, #8]	@ (8000590 <USART2_IRQHandler+0x10>)
 8000586:	f003 f835 	bl	80035f4 <HAL_UART_IRQHandler>
}
 800058a:	bf00      	nop
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	20000078 	.word	0x20000078

08000594 <CAN1_TX_IRQHandler>:

void CAN1_TX_IRQHandler(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 8000598:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <CAN1_TX_IRQHandler+0x10>)
 800059a:	f001 f8a6 	bl	80016ea <HAL_CAN_IRQHandler>
}
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	2000014c 	.word	0x2000014c

080005a8 <CAN1_RX0_IRQHandler>:

void CAN1_RX0_IRQHandler()
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 80005ac:	4802      	ldr	r0, [pc, #8]	@ (80005b8 <CAN1_RX0_IRQHandler+0x10>)
 80005ae:	f001 f89c 	bl	80016ea <HAL_CAN_IRQHandler>
}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	2000014c 	.word	0x2000014c

080005bc <CAN1_RX1_IRQHandler>:

void CAN1_RX1_IRQHandler()
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 80005c0:	4802      	ldr	r0, [pc, #8]	@ (80005cc <CAN1_RX1_IRQHandler+0x10>)
 80005c2:	f001 f892 	bl	80016ea <HAL_CAN_IRQHandler>
}
 80005c6:	bf00      	nop
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	2000014c 	.word	0x2000014c

080005d0 <CAN1_SCE_IRQHandler>:

void CAN1_SCE_IRQHandler(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 80005d4:	4802      	ldr	r0, [pc, #8]	@ (80005e0 <CAN1_SCE_IRQHandler+0x10>)
 80005d6:	f001 f888 	bl	80016ea <HAL_CAN_IRQHandler>
}
 80005da:	bf00      	nop
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	2000014c 	.word	0x2000014c

080005e4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htimer6);
 80005e8:	4802      	ldr	r0, [pc, #8]	@ (80005f4 <TIM6_DAC_IRQHandler+0x10>)
 80005ea:	f002 fd37 	bl	800305c <HAL_TIM_IRQHandler>
}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	20000100 	.word	0x20000100

080005f8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htimer6);
 80005fc:	4804      	ldr	r0, [pc, #16]	@ (8000610 <EXTI15_10_IRQHandler+0x18>)
 80005fe:	f002 fcbd 	bl	8002f7c <HAL_TIM_Base_Start_IT>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000602:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000606:	f001 fdd9 	bl	80021bc <HAL_GPIO_EXTI_IRQHandler>
}
 800060a:	bf00      	nop
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	20000100 	.word	0x20000100

08000614 <main>:
/* --- Global Variables --- */
uint8_t req_counter = 0;  // counts 1s ticks, sends remote frame every 4s
uint8_t led_no = 0;       // rotates LED number 1-4

int main()
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
	HAL_Init();              // Reset peripherals, init HAL library
 8000618:	f000 fbca 	bl	8000db0 <HAL_Init>
	SystemClock_Config();    // Configure system clock (HSE + PLL)
 800061c:	f000 f822 	bl	8000664 <SystemClock_Config>
	GPIO_Init();             // Init LED + push button
 8000620:	f000 f870 	bl	8000704 <GPIO_Init>
	UART2_Init();            // UART for debug prints
 8000624:	f000 f8cc 	bl	80007c0 <UART2_Init>
	TIMER6_Init();           // 1 Hz periodic timer
 8000628:	f000 f8ae 	bl	8000788 <TIMER6_Init>
	CAN1_Init();             // Init CAN peripheral
 800062c:	f000 f8ee 	bl	800080c <CAN1_Init>
	CAN_Filter_Config();     // Accept all messages
 8000630:	f000 f922 	bl	8000878 <CAN_Filter_Config>

	// Enable CAN notifications (TX complete, RX pending, bus-off)
	if(HAL_CAN_ActivateNotification(&hcan1,
 8000634:	f240 4103 	movw	r1, #1027	@ 0x403
 8000638:	4809      	ldr	r0, [pc, #36]	@ (8000660 <main+0x4c>)
 800063a:	f001 f830 	bl	800169e <HAL_CAN_ActivateNotification>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <main+0x34>
			CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF) != HAL_OK)
	{
		Error_Handler();
 8000644:	f000 f93e 	bl	80008c4 <Error_Handler>
	}

	// Start CAN peripheral
	if(HAL_CAN_Start(&hcan1) != HAL_OK)
 8000648:	4805      	ldr	r0, [pc, #20]	@ (8000660 <main+0x4c>)
 800064a:	f000 fdf2 	bl	8001232 <HAL_CAN_Start>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d002      	beq.n	800065a <main+0x46>
	{
		Error_Handler();
 8000654:	f000 f936 	bl	80008c4 <Error_Handler>
	}

//	CAN1_Tx();


	while(1);  // All work handled by interrupts
 8000658:	bf00      	nop
 800065a:	bf00      	nop
 800065c:	e7fd      	b.n	800065a <main+0x46>
 800065e:	bf00      	nop
 8000660:	2000014c 	.word	0x2000014c

08000664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b096      	sub	sp, #88	@ 0x58
 8000668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066a:	f107 0314 	add.w	r3, r7, #20
 800066e:	2244      	movs	r2, #68	@ 0x44
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f004 f822 	bl	80046bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000678:	463b      	mov	r3, r7
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]
 8000680:	609a      	str	r2, [r3, #8]
 8000682:	60da      	str	r2, [r3, #12]
 8000684:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000686:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800068a:	f001 fdc9 	bl	8002220 <HAL_PWREx_ControlVoltageScaling>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000694:	f000 f916 	bl	80008c4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000698:	2301      	movs	r3, #1
 800069a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800069c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80006a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a2:	2302      	movs	r3, #2
 80006a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a6:	2303      	movs	r3, #3
 80006a8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006aa:	2301      	movs	r3, #1
 80006ac:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 21;
 80006ae:	2315      	movs	r3, #21
 80006b0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006b2:	2307      	movs	r3, #7
 80006b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006b6:	2302      	movs	r3, #2
 80006b8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80006ba:	2304      	movs	r3, #4
 80006bc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006be:	f107 0314 	add.w	r3, r7, #20
 80006c2:	4618      	mov	r0, r3
 80006c4:	f001 fe02 	bl	80022cc <HAL_RCC_OscConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80006ce:	f000 f8f9 	bl	80008c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d2:	230f      	movs	r3, #15
 80006d4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d6:	2303      	movs	r3, #3
 80006d8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006da:	2300      	movs	r3, #0
 80006dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006de:	2300      	movs	r3, #0
 80006e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e2:	2300      	movs	r3, #0
 80006e4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006e6:	463b      	mov	r3, r7
 80006e8:	2102      	movs	r1, #2
 80006ea:	4618      	mov	r0, r3
 80006ec:	f002 f9ca 	bl	8002a84 <HAL_RCC_ClockConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006f6:	f000 f8e5 	bl	80008c4 <Error_Handler>
  }
}
 80006fa:	bf00      	nop
 80006fc:	3758      	adds	r7, #88	@ 0x58
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
	...

08000704 <GPIO_Init>:

void GPIO_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b08c      	sub	sp, #48	@ 0x30
 8000708:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070a:	4b1d      	ldr	r3, [pc, #116]	@ (8000780 <GPIO_Init+0x7c>)
 800070c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800070e:	4a1c      	ldr	r2, [pc, #112]	@ (8000780 <GPIO_Init+0x7c>)
 8000710:	f043 0301 	orr.w	r3, r3, #1
 8000714:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000716:	4b1a      	ldr	r3, [pc, #104]	@ (8000780 <GPIO_Init+0x7c>)
 8000718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000722:	4b17      	ldr	r3, [pc, #92]	@ (8000780 <GPIO_Init+0x7c>)
 8000724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000726:	4a16      	ldr	r2, [pc, #88]	@ (8000780 <GPIO_Init+0x7c>)
 8000728:	f043 0304 	orr.w	r3, r3, #4
 800072c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800072e:	4b14      	ldr	r3, [pc, #80]	@ (8000780 <GPIO_Init+0x7c>)
 8000730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000732:	f003 0304 	and.w	r3, r3, #4
 8000736:	603b      	str	r3, [r7, #0]
 8000738:	683b      	ldr	r3, [r7, #0]

  GPIO_InitTypeDef ledgpio;
  ledgpio.Pin = GPIO_PIN_5;
 800073a:	2320      	movs	r3, #32
 800073c:	61fb      	str	r3, [r7, #28]
  ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 800073e:	2301      	movs	r3, #1
 8000740:	623b      	str	r3, [r7, #32]
  ledgpio.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA,&ledgpio);
 8000746:	f107 031c 	add.w	r3, r7, #28
 800074a:	4619      	mov	r1, r3
 800074c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000750:	f001 fb70 	bl	8001e34 <HAL_GPIO_Init>

  GPIO_InitTypeDef pushButton;
  pushButton.Pin = GPIO_PIN_13;
 8000754:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000758:	60bb      	str	r3, [r7, #8]
  pushButton.Mode = GPIO_MODE_IT_FALLING;
 800075a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800075e:	60fb      	str	r3, [r7, #12]
  pushButton.Pull = GPIO_NOPULL;
 8000760:	2300      	movs	r3, #0
 8000762:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC,&pushButton);
 8000764:	f107 0308 	add.w	r3, r7, #8
 8000768:	4619      	mov	r1, r3
 800076a:	4806      	ldr	r0, [pc, #24]	@ (8000784 <GPIO_Init+0x80>)
 800076c:	f001 fb62 	bl	8001e34 <HAL_GPIO_Init>

  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000770:	2028      	movs	r0, #40	@ 0x28
 8000772:	f001 fab8 	bl	8001ce6 <HAL_NVIC_EnableIRQ>
}
 8000776:	bf00      	nop
 8000778:	3730      	adds	r7, #48	@ 0x30
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40021000 	.word	0x40021000
 8000784:	48000800 	.word	0x48000800

08000788 <TIMER6_Init>:

// generate time base of 1 Sec
void TIMER6_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  htimer6.Instance = TIM6;
 800078c:	4b0a      	ldr	r3, [pc, #40]	@ (80007b8 <TIMER6_Init+0x30>)
 800078e:	4a0b      	ldr	r2, [pc, #44]	@ (80007bc <TIMER6_Init+0x34>)
 8000790:	601a      	str	r2, [r3, #0]
  htimer6.Init.Prescaler = 4199;
 8000792:	4b09      	ldr	r3, [pc, #36]	@ (80007b8 <TIMER6_Init+0x30>)
 8000794:	f241 0267 	movw	r2, #4199	@ 0x1067
 8000798:	605a      	str	r2, [r3, #4]
  htimer6.Init.Period = 10000-1;
 800079a:	4b07      	ldr	r3, [pc, #28]	@ (80007b8 <TIMER6_Init+0x30>)
 800079c:	f242 720f 	movw	r2, #9999	@ 0x270f
 80007a0:	60da      	str	r2, [r3, #12]
  if( HAL_TIM_Base_Init(&htimer6) != HAL_OK )
 80007a2:	4805      	ldr	r0, [pc, #20]	@ (80007b8 <TIMER6_Init+0x30>)
 80007a4:	f002 fb92 	bl	8002ecc <HAL_TIM_Base_Init>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <TIMER6_Init+0x2a>
  {
    Error_Handler();
 80007ae:	f000 f889 	bl	80008c4 <Error_Handler>
  }
}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20000100 	.word	0x20000100
 80007bc:	40001000 	.word	0x40001000

080007c0 <UART2_Init>:

void UART2_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000804 <UART2_Init+0x44>)
 80007c6:	4a10      	ldr	r2, [pc, #64]	@ (8000808 <UART2_Init+0x48>)
 80007c8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80007ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000804 <UART2_Init+0x44>)
 80007cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007d0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000804 <UART2_Init+0x44>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80007d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000804 <UART2_Init+0x44>)
 80007da:	2200      	movs	r2, #0
 80007dc:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80007de:	4b09      	ldr	r3, [pc, #36]	@ (8000804 <UART2_Init+0x44>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e4:	4b07      	ldr	r3, [pc, #28]	@ (8000804 <UART2_Init+0x44>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80007ea:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <UART2_Init+0x44>)
 80007ec:	220c      	movs	r2, #12
 80007ee:	615a      	str	r2, [r3, #20]
	if(HAL_UART_Init(&huart2) != HAL_OK){
 80007f0:	4804      	ldr	r0, [pc, #16]	@ (8000804 <UART2_Init+0x44>)
 80007f2:	f002 fe27 	bl	8003444 <HAL_UART_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <UART2_Init+0x40>
//		There is a problem
		Error_Handler();
 80007fc:	f000 f862 	bl	80008c4 <Error_Handler>
	}
}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20000078 	.word	0x20000078
 8000808:	40004400 	.word	0x40004400

0800080c <CAN1_Init>:

void CAN1_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
	hcan1.Instance = CAN1;
 8000810:	4b17      	ldr	r3, [pc, #92]	@ (8000870 <CAN1_Init+0x64>)
 8000812:	4a18      	ldr	r2, [pc, #96]	@ (8000874 <CAN1_Init+0x68>)
 8000814:	601a      	str	r2, [r3, #0]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000816:	4b16      	ldr	r3, [pc, #88]	@ (8000870 <CAN1_Init+0x64>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
	hcan1.Init.AutoBusOff = ENABLE;
 800081c:	4b14      	ldr	r3, [pc, #80]	@ (8000870 <CAN1_Init+0x64>)
 800081e:	2201      	movs	r2, #1
 8000820:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoRetransmission = ENABLE;
 8000822:	4b13      	ldr	r3, [pc, #76]	@ (8000870 <CAN1_Init+0x64>)
 8000824:	2201      	movs	r2, #1
 8000826:	76da      	strb	r2, [r3, #27]
	hcan1.Init.AutoWakeUp = DISABLE;
 8000828:	4b11      	ldr	r3, [pc, #68]	@ (8000870 <CAN1_Init+0x64>)
 800082a:	2200      	movs	r2, #0
 800082c:	769a      	strb	r2, [r3, #26]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 800082e:	4b10      	ldr	r3, [pc, #64]	@ (8000870 <CAN1_Init+0x64>)
 8000830:	2200      	movs	r2, #0
 8000832:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8000834:	4b0e      	ldr	r3, [pc, #56]	@ (8000870 <CAN1_Init+0x64>)
 8000836:	2200      	movs	r2, #0
 8000838:	761a      	strb	r2, [r3, #24]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 800083a:	4b0d      	ldr	r3, [pc, #52]	@ (8000870 <CAN1_Init+0x64>)
 800083c:	2200      	movs	r2, #0
 800083e:	775a      	strb	r2, [r3, #29]

	//	settings related to CAN bit timings
	hcan1.Init.Prescaler = 6;
 8000840:	4b0b      	ldr	r3, [pc, #44]	@ (8000870 <CAN1_Init+0x64>)
 8000842:	2206      	movs	r2, #6
 8000844:	605a      	str	r2, [r3, #4]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000846:	4b0a      	ldr	r3, [pc, #40]	@ (8000870 <CAN1_Init+0x64>)
 8000848:	2200      	movs	r2, #0
 800084a:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 800084c:	4b08      	ldr	r3, [pc, #32]	@ (8000870 <CAN1_Init+0x64>)
 800084e:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 8000852:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000854:	4b06      	ldr	r3, [pc, #24]	@ (8000870 <CAN1_Init+0x64>)
 8000856:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800085a:	615a      	str	r2, [r3, #20]
	if(HAL_CAN_Init(&hcan1) != HAL_OK)
 800085c:	4804      	ldr	r0, [pc, #16]	@ (8000870 <CAN1_Init+0x64>)
 800085e:	f000 fb23 	bl	8000ea8 <HAL_CAN_Init>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <CAN1_Init+0x60>
	{
		Error_Handler();
 8000868:	f000 f82c 	bl	80008c4 <Error_Handler>
	}

}
 800086c:	bf00      	nop
 800086e:	bd80      	pop	{r7, pc}
 8000870:	2000014c 	.word	0x2000014c
 8000874:	40006400 	.word	0x40006400

08000878 <CAN_Filter_Config>:

void CAN_Filter_Config(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b08a      	sub	sp, #40	@ 0x28
 800087c:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef can1_filter_init;
	can1_filter_init.FilterActivation = CAN_FILTER_ENABLE;
 800087e:	2301      	movs	r3, #1
 8000880:	623b      	str	r3, [r7, #32]
	can1_filter_init.FilterBank = 0;
 8000882:	2300      	movs	r3, #0
 8000884:	617b      	str	r3, [r7, #20]
	can1_filter_init.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000886:	2300      	movs	r3, #0
 8000888:	613b      	str	r3, [r7, #16]
	can1_filter_init.FilterIdHigh = 0x0000;
 800088a:	2300      	movs	r3, #0
 800088c:	603b      	str	r3, [r7, #0]
	can1_filter_init.FilterIdLow = 0x0000;
 800088e:	2300      	movs	r3, #0
 8000890:	607b      	str	r3, [r7, #4]
	can1_filter_init.FilterMaskIdHigh = 0x0000;
 8000892:	2300      	movs	r3, #0
 8000894:	60bb      	str	r3, [r7, #8]
	can1_filter_init.FilterMaskIdLow = 0x0000;
 8000896:	2300      	movs	r3, #0
 8000898:	60fb      	str	r3, [r7, #12]
	can1_filter_init.FilterMode = CAN_FILTERMODE_IDMASK;
 800089a:	2300      	movs	r3, #0
 800089c:	61bb      	str	r3, [r7, #24]
	can1_filter_init.FilterScale = CAN_FILTERSCALE_32BIT;
 800089e:	2301      	movs	r3, #1
 80008a0:	61fb      	str	r3, [r7, #28]

	if(HAL_CAN_ConfigFilter(&hcan1, &can1_filter_init) != HAL_OK)
 80008a2:	463b      	mov	r3, r7
 80008a4:	4619      	mov	r1, r3
 80008a6:	4806      	ldr	r0, [pc, #24]	@ (80008c0 <CAN_Filter_Config+0x48>)
 80008a8:	f000 fbf9 	bl	800109e <HAL_CAN_ConfigFilter>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <CAN_Filter_Config+0x3e>
	{
		Error_Handler();
 80008b2:	f000 f807 	bl	80008c4 <Error_Handler>
	}

}
 80008b6:	bf00      	nop
 80008b8:	3728      	adds	r7, #40	@ 0x28
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	2000014c 	.word	0x2000014c

080008c4 <Error_Handler>:

void Error_Handler(void){
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
	while(1);
 80008c8:	bf00      	nop
 80008ca:	e7fd      	b.n	80008c8 <Error_Handler+0x4>

080008cc <CAN1_Tx>:
}

// --- CAN Transmission: LED Command ---
// Sends 1-byte message: LED number (1-4) that Node 2 should toggle
void CAN1_Tx(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b088      	sub	sp, #32
 80008d0:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef TxHeader;
	uint32_t TxMailbox;

	uint8_t message;

	TxHeader.DLC = 1;
 80008d2:	2301      	movs	r3, #1
 80008d4:	61bb      	str	r3, [r7, #24]
	TxHeader.StdId = 0x65D;
 80008d6:	f240 635d 	movw	r3, #1629	@ 0x65d
 80008da:	60bb      	str	r3, [r7, #8]
	TxHeader.IDE = CAN_ID_STD;
 80008dc:	2300      	movs	r3, #0
 80008de:	613b      	str	r3, [r7, #16]
	TxHeader.RTR = CAN_RTR_DATA;
 80008e0:	2300      	movs	r3, #0
 80008e2:	617b      	str	r3, [r7, #20]

	message = ++led_no;
 80008e4:	4b12      	ldr	r3, [pc, #72]	@ (8000930 <CAN1_Tx+0x64>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	3301      	adds	r3, #1
 80008ea:	b2da      	uxtb	r2, r3
 80008ec:	4b10      	ldr	r3, [pc, #64]	@ (8000930 <CAN1_Tx+0x64>)
 80008ee:	701a      	strb	r2, [r3, #0]
 80008f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000930 <CAN1_Tx+0x64>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	70fb      	strb	r3, [r7, #3]

	if(led_no == 4)
 80008f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000930 <CAN1_Tx+0x64>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	2b04      	cmp	r3, #4
 80008fc:	d102      	bne.n	8000904 <CAN1_Tx+0x38>
	{
		led_no = 0;	 // wrap around
 80008fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000930 <CAN1_Tx+0x64>)
 8000900:	2200      	movs	r2, #0
 8000902:	701a      	strb	r2, [r3, #0]
	}

	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);  // blink onboard LED for debug
 8000904:	2120      	movs	r1, #32
 8000906:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800090a:	f001 fc3d 	bl	8002188 <HAL_GPIO_TogglePin>

	if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, &message, &TxMailbox) != HAL_OK)
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	1cfa      	adds	r2, r7, #3
 8000912:	f107 0108 	add.w	r1, r7, #8
 8000916:	4807      	ldr	r0, [pc, #28]	@ (8000934 <CAN1_Tx+0x68>)
 8000918:	f000 fccf 	bl	80012ba <HAL_CAN_AddTxMessage>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <CAN1_Tx+0x5a>
	{
		Error_Handler();
 8000922:	f7ff ffcf 	bl	80008c4 <Error_Handler>
	}

}
 8000926:	bf00      	nop
 8000928:	3720      	adds	r7, #32
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20000175 	.word	0x20000175
 8000934:	2000014c 	.word	0x2000014c

08000938 <CAN1_Request>:

// node1 sending remote frame to node2
void CAN1_Request(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b088      	sub	sp, #32
 800093c:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef TxHeader;
	uint32_t TxMailbox;

//	no meaning for remote frame
	uint8_t message = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	70fb      	strb	r3, [r7, #3]

//  node1 demanding 2 bybtes of reply
	TxHeader.DLC = 2;
 8000942:	2302      	movs	r3, #2
 8000944:	61bb      	str	r3, [r7, #24]
	TxHeader.StdId = 0x651;
 8000946:	f240 6351 	movw	r3, #1617	@ 0x651
 800094a:	60bb      	str	r3, [r7, #8]
	TxHeader.IDE = CAN_ID_STD;
 800094c:	2300      	movs	r3, #0
 800094e:	613b      	str	r3, [r7, #16]
	TxHeader.RTR = CAN_RTR_REMOTE;
 8000950:	2302      	movs	r3, #2
 8000952:	617b      	str	r3, [r7, #20]

	if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, &message, &TxMailbox) != HAL_OK)
 8000954:	1d3b      	adds	r3, r7, #4
 8000956:	1cfa      	adds	r2, r7, #3
 8000958:	f107 0108 	add.w	r1, r7, #8
 800095c:	4805      	ldr	r0, [pc, #20]	@ (8000974 <CAN1_Request+0x3c>)
 800095e:	f000 fcac 	bl	80012ba <HAL_CAN_AddTxMessage>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <CAN1_Request+0x34>
	{
		Error_Handler();
 8000968:	f7ff ffac 	bl	80008c4 <Error_Handler>
	}


}
 800096c:	bf00      	nop
 800096e:	3720      	adds	r7, #32
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	2000014c 	.word	0x2000014c

08000978 <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b090      	sub	sp, #64	@ 0x40
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
	char msg[50];
	sprintf(msg, "Message Transmitted from Mailbox0\r\n");
 8000980:	f107 030c 	add.w	r3, r7, #12
 8000984:	490a      	ldr	r1, [pc, #40]	@ (80009b0 <HAL_CAN_TxMailbox0CompleteCallback+0x38>)
 8000986:	4618      	mov	r0, r3
 8000988:	f003 fe78 	bl	800467c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 800098c:	f107 030c 	add.w	r3, r7, #12
 8000990:	4618      	mov	r0, r3
 8000992:	f7ff fc1d 	bl	80001d0 <strlen>
 8000996:	4603      	mov	r3, r0
 8000998:	b29a      	uxth	r2, r3
 800099a:	f107 010c 	add.w	r1, r7, #12
 800099e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80009a2:	4804      	ldr	r0, [pc, #16]	@ (80009b4 <HAL_CAN_TxMailbox0CompleteCallback+0x3c>)
 80009a4:	f002 fd9c 	bl	80034e0 <HAL_UART_Transmit>
}
 80009a8:	bf00      	nop
 80009aa:	3740      	adds	r7, #64	@ 0x40
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	08004fd4 	.word	0x08004fd4
 80009b4:	20000078 	.word	0x20000078

080009b8 <HAL_CAN_TxMailbox1CompleteCallback>:
void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b090      	sub	sp, #64	@ 0x40
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
	char msg[50];
	sprintf(msg, "Message Transmitted from Mailbox1\r\n");
 80009c0:	f107 030c 	add.w	r3, r7, #12
 80009c4:	490a      	ldr	r1, [pc, #40]	@ (80009f0 <HAL_CAN_TxMailbox1CompleteCallback+0x38>)
 80009c6:	4618      	mov	r0, r3
 80009c8:	f003 fe58 	bl	800467c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 80009cc:	f107 030c 	add.w	r3, r7, #12
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff fbfd 	bl	80001d0 <strlen>
 80009d6:	4603      	mov	r3, r0
 80009d8:	b29a      	uxth	r2, r3
 80009da:	f107 010c 	add.w	r1, r7, #12
 80009de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80009e2:	4804      	ldr	r0, [pc, #16]	@ (80009f4 <HAL_CAN_TxMailbox1CompleteCallback+0x3c>)
 80009e4:	f002 fd7c 	bl	80034e0 <HAL_UART_Transmit>
}
 80009e8:	bf00      	nop
 80009ea:	3740      	adds	r7, #64	@ 0x40
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	08004ff8 	.word	0x08004ff8
 80009f4:	20000078 	.word	0x20000078

080009f8 <HAL_CAN_TxMailbox2CompleteCallback>:
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b090      	sub	sp, #64	@ 0x40
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
	char msg[50];
	sprintf(msg, "Message Transmitted from Mailbox2\r\n");
 8000a00:	f107 030c 	add.w	r3, r7, #12
 8000a04:	490a      	ldr	r1, [pc, #40]	@ (8000a30 <HAL_CAN_TxMailbox2CompleteCallback+0x38>)
 8000a06:	4618      	mov	r0, r3
 8000a08:	f003 fe38 	bl	800467c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000a0c:	f107 030c 	add.w	r3, r7, #12
 8000a10:	4618      	mov	r0, r3
 8000a12:	f7ff fbdd 	bl	80001d0 <strlen>
 8000a16:	4603      	mov	r3, r0
 8000a18:	b29a      	uxth	r2, r3
 8000a1a:	f107 010c 	add.w	r1, r7, #12
 8000a1e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000a22:	4804      	ldr	r0, [pc, #16]	@ (8000a34 <HAL_CAN_TxMailbox2CompleteCallback+0x3c>)
 8000a24:	f002 fd5c 	bl	80034e0 <HAL_UART_Transmit>
}
 8000a28:	bf00      	nop
 8000a2a:	3740      	adds	r7, #64	@ 0x40
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	0800501c 	.word	0x0800501c
 8000a34:	20000078 	.word	0x20000078

08000a38 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b098      	sub	sp, #96	@ 0x60
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rcvd_message[5];
	char msg[50];

	if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rcvd_message) != HAL_OK)
 8000a40:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000a44:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8000a48:	2100      	movs	r1, #0
 8000a4a:	4817      	ldr	r0, [pc, #92]	@ (8000aa8 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8000a4c:	f000 fd05 	bl	800145a <HAL_CAN_GetRxMessage>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
	{
		Error_Handler();
 8000a56:	f7ff ff35 	bl	80008c4 <Error_Handler>
	}

	if(RxHeader.StdId == 0x651 && RxHeader.RTR == CAN_RTR_DATA)
 8000a5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000a5c:	f240 6251 	movw	r2, #1617	@ 0x651
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d10e      	bne.n	8000a82 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
 8000a64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d10b      	bne.n	8000a82 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
	{
		sprintf(msg, "Reply Received: 0X%X\r\n", rcvd_message[0] << 8 | rcvd_message[1]);
 8000a6a:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8000a6e:	021b      	lsls	r3, r3, #8
 8000a70:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8000a74:	431a      	orrs	r2, r3
 8000a76:	f107 0308 	add.w	r3, r7, #8
 8000a7a:	490c      	ldr	r1, [pc, #48]	@ (8000aac <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f003 fdfd 	bl	800467c <siprintf>
	}
	HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000a82:	f107 0308 	add.w	r3, r7, #8
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff fba2 	bl	80001d0 <strlen>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	b29a      	uxth	r2, r3
 8000a90:	f107 0108 	add.w	r1, r7, #8
 8000a94:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000a98:	4805      	ldr	r0, [pc, #20]	@ (8000ab0 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8000a9a:	f002 fd21 	bl	80034e0 <HAL_UART_Transmit>

}
 8000a9e:	bf00      	nop
 8000aa0:	3760      	adds	r7, #96	@ 0x60
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	2000014c 	.word	0x2000014c
 8000aac:	08005040 	.word	0x08005040
 8000ab0:	20000078 	.word	0x20000078

08000ab4 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b090      	sub	sp, #64	@ 0x40
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
	char msg[50];
	sprintf(msg, "CAN Error Detected\r\n");
 8000abc:	f107 030c 	add.w	r3, r7, #12
 8000ac0:	490a      	ldr	r1, [pc, #40]	@ (8000aec <HAL_CAN_ErrorCallback+0x38>)
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f003 fdda 	bl	800467c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000ac8:	f107 030c 	add.w	r3, r7, #12
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff fb7f 	bl	80001d0 <strlen>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	b29a      	uxth	r2, r3
 8000ad6:	f107 010c 	add.w	r1, r7, #12
 8000ada:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ade:	4804      	ldr	r0, [pc, #16]	@ (8000af0 <HAL_CAN_ErrorCallback+0x3c>)
 8000ae0:	f002 fcfe 	bl	80034e0 <HAL_UART_Transmit>
}
 8000ae4:	bf00      	nop
 8000ae6:	3740      	adds	r7, #64	@ 0x40
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	08005058 	.word	0x08005058
 8000af0:	20000078 	.word	0x20000078

08000af4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
	CAN1_Tx();
 8000afc:	f7ff fee6 	bl	80008cc <CAN1_Tx>

	if(++req_counter == 4)
 8000b00:	4b09      	ldr	r3, [pc, #36]	@ (8000b28 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	3301      	adds	r3, #1
 8000b06:	b2da      	uxtb	r2, r3
 8000b08:	4b07      	ldr	r3, [pc, #28]	@ (8000b28 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000b0a:	701a      	strb	r2, [r3, #0]
 8000b0c:	4b06      	ldr	r3, [pc, #24]	@ (8000b28 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	2b04      	cmp	r3, #4
 8000b12:	d104      	bne.n	8000b1e <HAL_TIM_PeriodElapsedCallback+0x2a>
	{
		CAN1_Request();
 8000b14:	f7ff ff10 	bl	8000938 <CAN1_Request>
		req_counter = 0;
 8000b18:	4b03      	ldr	r3, [pc, #12]	@ (8000b28 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	701a      	strb	r2, [r3, #0]
	}
}
 8000b1e:	bf00      	nop
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	20000174 	.word	0x20000174

08000b2c <HAL_MspInit>:

#include "main.h"

// processor specific
void HAL_MspInit(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
//  Here low level processor specific inits
//	1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b30:	2003      	movs	r0, #3
 8000b32:	f001 f8b1 	bl	8001c98 <HAL_NVIC_SetPriorityGrouping>

//	2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; // usg fault, mem fault, bus fault exceptions
 8000b36:	4b0d      	ldr	r3, [pc, #52]	@ (8000b6c <HAL_MspInit+0x40>)
 8000b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b3a:	4a0c      	ldr	r2, [pc, #48]	@ (8000b6c <HAL_MspInit+0x40>)
 8000b3c:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8000b40:	6253      	str	r3, [r2, #36]	@ 0x24

//	3. Configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000b42:	2200      	movs	r2, #0
 8000b44:	2100      	movs	r1, #0
 8000b46:	f06f 000b 	mvn.w	r0, #11
 8000b4a:	f001 f8b0 	bl	8001cae <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2100      	movs	r1, #0
 8000b52:	f06f 000a 	mvn.w	r0, #10
 8000b56:	f001 f8aa 	bl	8001cae <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	f06f 0009 	mvn.w	r0, #9
 8000b62:	f001 f8a4 	bl	8001cae <HAL_NVIC_SetPriority>

}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <HAL_UART_MspInit>:

//peripheral specific
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b08a      	sub	sp, #40	@ 0x28
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
//	here do the low level inits of USART2 peripheral
	GPIO_InitTypeDef gpio_uart;
//	1. enable the clock for the USART2 peripheral as well as for GPIOA peripheral
	__HAL_RCC_USART2_CLK_ENABLE();
 8000b78:	4b1a      	ldr	r3, [pc, #104]	@ (8000be4 <HAL_UART_MspInit+0x74>)
 8000b7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b7c:	4a19      	ldr	r2, [pc, #100]	@ (8000be4 <HAL_UART_MspInit+0x74>)
 8000b7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b82:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b84:	4b17      	ldr	r3, [pc, #92]	@ (8000be4 <HAL_UART_MspInit+0x74>)
 8000b86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b8c:	613b      	str	r3, [r7, #16]
 8000b8e:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b90:	4b14      	ldr	r3, [pc, #80]	@ (8000be4 <HAL_UART_MspInit+0x74>)
 8000b92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b94:	4a13      	ldr	r2, [pc, #76]	@ (8000be4 <HAL_UART_MspInit+0x74>)
 8000b96:	f043 0301 	orr.w	r3, r3, #1
 8000b9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b9c:	4b11      	ldr	r3, [pc, #68]	@ (8000be4 <HAL_UART_MspInit+0x74>)
 8000b9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ba0:	f003 0301 	and.w	r3, r3, #1
 8000ba4:	60fb      	str	r3, [r7, #12]
 8000ba6:	68fb      	ldr	r3, [r7, #12]
//	2. do the pin muxing configurations
	gpio_uart.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8000ba8:	230c      	movs	r3, #12
 8000baa:	617b      	str	r3, [r7, #20]
	gpio_uart.Mode = GPIO_MODE_AF_PP;
 8000bac:	2302      	movs	r3, #2
 8000bae:	61bb      	str	r3, [r7, #24]
	gpio_uart.Pull = GPIO_PULLUP;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	61fb      	str	r3, [r7, #28]
	gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	623b      	str	r3, [r7, #32]
	gpio_uart.Alternate = GPIO_AF7_USART2;	// UART2_Tx, UART2_Rx
 8000bb8:	2307      	movs	r3, #7
 8000bba:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 8000bbc:	f107 0314 	add.w	r3, r7, #20
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bc6:	f001 f935 	bl	8001e34 <HAL_GPIO_Init>
//	3. enable the IRQ and set up the priority (NVIC settings)
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000bca:	2026      	movs	r0, #38	@ 0x26
 8000bcc:	f001 f88b 	bl	8001ce6 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	210f      	movs	r1, #15
 8000bd4:	2026      	movs	r0, #38	@ 0x26
 8000bd6:	f001 f86a 	bl	8001cae <HAL_NVIC_SetPriority>
}
 8000bda:	bf00      	nop
 8000bdc:	3728      	adds	r7, #40	@ 0x28
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40021000 	.word	0x40021000

08000be8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08a      	sub	sp, #40	@ 0x28
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpio_can;

	__HAL_RCC_CAN1_CLK_ENABLE();
 8000bf0:	4b26      	ldr	r3, [pc, #152]	@ (8000c8c <HAL_CAN_MspInit+0xa4>)
 8000bf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bf4:	4a25      	ldr	r2, [pc, #148]	@ (8000c8c <HAL_CAN_MspInit+0xa4>)
 8000bf6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000bfa:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bfc:	4b23      	ldr	r3, [pc, #140]	@ (8000c8c <HAL_CAN_MspInit+0xa4>)
 8000bfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000c04:	613b      	str	r3, [r7, #16]
 8000c06:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000c08:	4b20      	ldr	r3, [pc, #128]	@ (8000c8c <HAL_CAN_MspInit+0xa4>)
 8000c0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c0c:	4a1f      	ldr	r2, [pc, #124]	@ (8000c8c <HAL_CAN_MspInit+0xa4>)
 8000c0e:	f043 0301 	orr.w	r3, r3, #1
 8000c12:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c14:	4b1d      	ldr	r3, [pc, #116]	@ (8000c8c <HAL_CAN_MspInit+0xa4>)
 8000c16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c18:	f003 0301 	and.w	r3, r3, #1
 8000c1c:	60fb      	str	r3, [r7, #12]
 8000c1e:	68fb      	ldr	r3, [r7, #12]

//	CAN1 GPIO Configuration
//	PA11	---> CAN1_RX
//	PA12	---> CAN1_TX

	gpio_can.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 8000c20:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000c24:	617b      	str	r3, [r7, #20]
	gpio_can.Mode = GPIO_MODE_AF_PP;
 8000c26:	2302      	movs	r3, #2
 8000c28:	61bb      	str	r3, [r7, #24]
	gpio_can.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61fb      	str	r3, [r7, #28]
	gpio_can.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2e:	2303      	movs	r3, #3
 8000c30:	623b      	str	r3, [r7, #32]
	gpio_can.Alternate = GPIO_AF9_CAN1;
 8000c32:	2309      	movs	r3, #9
 8000c34:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOA, &gpio_can);
 8000c36:	f107 0314 	add.w	r3, r7, #20
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c40:	f001 f8f8 	bl	8001e34 <HAL_GPIO_Init>

	HAL_NVIC_SetPriority(CAN1_TX_IRQn, 15, 0);
 8000c44:	2200      	movs	r2, #0
 8000c46:	210f      	movs	r1, #15
 8000c48:	2013      	movs	r0, #19
 8000c4a:	f001 f830 	bl	8001cae <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 15, 0);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	210f      	movs	r1, #15
 8000c52:	2014      	movs	r0, #20
 8000c54:	f001 f82b 	bl	8001cae <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 15, 0);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	210f      	movs	r1, #15
 8000c5c:	2015      	movs	r0, #21
 8000c5e:	f001 f826 	bl	8001cae <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 15, 0);
 8000c62:	2200      	movs	r2, #0
 8000c64:	210f      	movs	r1, #15
 8000c66:	2016      	movs	r0, #22
 8000c68:	f001 f821 	bl	8001cae <HAL_NVIC_SetPriority>

	HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000c6c:	2013      	movs	r0, #19
 8000c6e:	f001 f83a 	bl	8001ce6 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000c72:	2014      	movs	r0, #20
 8000c74:	f001 f837 	bl	8001ce6 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000c78:	2015      	movs	r0, #21
 8000c7a:	f001 f834 	bl	8001ce6 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000c7e:	2016      	movs	r0, #22
 8000c80:	f001 f831 	bl	8001ce6 <HAL_NVIC_EnableIRQ>

}
 8000c84:	bf00      	nop
 8000c86:	3728      	adds	r7, #40	@ 0x28
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40021000 	.word	0x40021000

08000c90 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htimer)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  //1. enable the clock for the TIM6 peripheral
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c98:	4b0b      	ldr	r3, [pc, #44]	@ (8000cc8 <HAL_TIM_Base_MspInit+0x38>)
 8000c9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c9c:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc8 <HAL_TIM_Base_MspInit+0x38>)
 8000c9e:	f043 0310 	orr.w	r3, r3, #16
 8000ca2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ca4:	4b08      	ldr	r3, [pc, #32]	@ (8000cc8 <HAL_TIM_Base_MspInit+0x38>)
 8000ca6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ca8:	f003 0310 	and.w	r3, r3, #16
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	68fb      	ldr	r3, [r7, #12]

  //2. Enable the IRQ of TIM6
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cb0:	2036      	movs	r0, #54	@ 0x36
 8000cb2:	f001 f818 	bl	8001ce6 <HAL_NVIC_EnableIRQ>

  //3. setup the priority for TIM6_DAC_IRQn
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn,15,0);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	210f      	movs	r1, #15
 8000cba:	2036      	movs	r0, #54	@ 0x36
 8000cbc:	f000 fff7 	bl	8001cae <HAL_NVIC_SetPriority>
}
 8000cc0:	bf00      	nop
 8000cc2:	3710      	adds	r7, #16
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40021000 	.word	0x40021000

08000ccc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cd4:	4a14      	ldr	r2, [pc, #80]	@ (8000d28 <_sbrk+0x5c>)
 8000cd6:	4b15      	ldr	r3, [pc, #84]	@ (8000d2c <_sbrk+0x60>)
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ce0:	4b13      	ldr	r3, [pc, #76]	@ (8000d30 <_sbrk+0x64>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d102      	bne.n	8000cee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ce8:	4b11      	ldr	r3, [pc, #68]	@ (8000d30 <_sbrk+0x64>)
 8000cea:	4a12      	ldr	r2, [pc, #72]	@ (8000d34 <_sbrk+0x68>)
 8000cec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cee:	4b10      	ldr	r3, [pc, #64]	@ (8000d30 <_sbrk+0x64>)
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d207      	bcs.n	8000d0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cfc:	f003 fce6 	bl	80046cc <__errno>
 8000d00:	4603      	mov	r3, r0
 8000d02:	220c      	movs	r2, #12
 8000d04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d06:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d0a:	e009      	b.n	8000d20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d0c:	4b08      	ldr	r3, [pc, #32]	@ (8000d30 <_sbrk+0x64>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d12:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <_sbrk+0x64>)
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4413      	add	r3, r2
 8000d1a:	4a05      	ldr	r2, [pc, #20]	@ (8000d30 <_sbrk+0x64>)
 8000d1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3718      	adds	r7, #24
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20018000 	.word	0x20018000
 8000d2c:	00000400 	.word	0x00000400
 8000d30:	20000178 	.word	0x20000178
 8000d34:	200002c8 	.word	0x200002c8

08000d38 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d3c:	4b06      	ldr	r3, [pc, #24]	@ (8000d58 <SystemInit+0x20>)
 8000d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d42:	4a05      	ldr	r2, [pc, #20]	@ (8000d58 <SystemInit+0x20>)
 8000d44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d5c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d94 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d60:	f7ff ffea 	bl	8000d38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d64:	480c      	ldr	r0, [pc, #48]	@ (8000d98 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d66:	490d      	ldr	r1, [pc, #52]	@ (8000d9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d68:	4a0d      	ldr	r2, [pc, #52]	@ (8000da0 <LoopForever+0xe>)
  movs r3, #0
 8000d6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d6c:	e002      	b.n	8000d74 <LoopCopyDataInit>

08000d6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d72:	3304      	adds	r3, #4

08000d74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d78:	d3f9      	bcc.n	8000d6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000da4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d7c:	4c0a      	ldr	r4, [pc, #40]	@ (8000da8 <LoopForever+0x16>)
  movs r3, #0
 8000d7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d80:	e001      	b.n	8000d86 <LoopFillZerobss>

08000d82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d84:	3204      	adds	r2, #4

08000d86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d88:	d3fb      	bcc.n	8000d82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d8a:	f003 fca5 	bl	80046d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d8e:	f7ff fc41 	bl	8000614 <main>

08000d92 <LoopForever>:

LoopForever:
    b LoopForever
 8000d92:	e7fe      	b.n	8000d92 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d94:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d9c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000da0:	080050fc 	.word	0x080050fc
  ldr r2, =_sbss
 8000da4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000da8:	200002c8 	.word	0x200002c8

08000dac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dac:	e7fe      	b.n	8000dac <ADC1_2_IRQHandler>
	...

08000db0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000db6:	2300      	movs	r3, #0
 8000db8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dba:	4b0c      	ldr	r3, [pc, #48]	@ (8000dec <HAL_Init+0x3c>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a0b      	ldr	r2, [pc, #44]	@ (8000dec <HAL_Init+0x3c>)
 8000dc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dc4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dc6:	2003      	movs	r0, #3
 8000dc8:	f000 ff66 	bl	8001c98 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dcc:	2000      	movs	r0, #0
 8000dce:	f000 f80f 	bl	8000df0 <HAL_InitTick>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d002      	beq.n	8000dde <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	71fb      	strb	r3, [r7, #7]
 8000ddc:	e001      	b.n	8000de2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dde:	f7ff fea5 	bl	8000b2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000de2:	79fb      	ldrb	r3, [r7, #7]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	40022000 	.word	0x40022000

08000df0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000dfc:	4b17      	ldr	r3, [pc, #92]	@ (8000e5c <HAL_InitTick+0x6c>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d023      	beq.n	8000e4c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e04:	4b16      	ldr	r3, [pc, #88]	@ (8000e60 <HAL_InitTick+0x70>)
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	4b14      	ldr	r3, [pc, #80]	@ (8000e5c <HAL_InitTick+0x6c>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f000 ff71 	bl	8001d02 <HAL_SYSTICK_Config>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d10f      	bne.n	8000e46 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2b0f      	cmp	r3, #15
 8000e2a:	d809      	bhi.n	8000e40 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	6879      	ldr	r1, [r7, #4]
 8000e30:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e34:	f000 ff3b 	bl	8001cae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e38:	4a0a      	ldr	r2, [pc, #40]	@ (8000e64 <HAL_InitTick+0x74>)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6013      	str	r3, [r2, #0]
 8000e3e:	e007      	b.n	8000e50 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e40:	2301      	movs	r3, #1
 8000e42:	73fb      	strb	r3, [r7, #15]
 8000e44:	e004      	b.n	8000e50 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
 8000e48:	73fb      	strb	r3, [r7, #15]
 8000e4a:	e001      	b.n	8000e50 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3710      	adds	r7, #16
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000008 	.word	0x20000008
 8000e60:	20000000 	.word	0x20000000
 8000e64:	20000004 	.word	0x20000004

08000e68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e6c:	4b06      	ldr	r3, [pc, #24]	@ (8000e88 <HAL_IncTick+0x20>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	461a      	mov	r2, r3
 8000e72:	4b06      	ldr	r3, [pc, #24]	@ (8000e8c <HAL_IncTick+0x24>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4413      	add	r3, r2
 8000e78:	4a04      	ldr	r2, [pc, #16]	@ (8000e8c <HAL_IncTick+0x24>)
 8000e7a:	6013      	str	r3, [r2, #0]
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	20000008 	.word	0x20000008
 8000e8c:	2000017c 	.word	0x2000017c

08000e90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  return uwTick;
 8000e94:	4b03      	ldr	r3, [pc, #12]	@ (8000ea4 <HAL_GetTick+0x14>)
 8000e96:	681b      	ldr	r3, [r3, #0]
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	2000017c 	.word	0x2000017c

08000ea8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d101      	bne.n	8000eba <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e0ed      	b.n	8001096 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d102      	bne.n	8000ecc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f7ff fe8e 	bl	8000be8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f042 0201 	orr.w	r2, r2, #1
 8000eda:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000edc:	f7ff ffd8 	bl	8000e90 <HAL_GetTick>
 8000ee0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ee2:	e012      	b.n	8000f0a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ee4:	f7ff ffd4 	bl	8000e90 <HAL_GetTick>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	2b0a      	cmp	r3, #10
 8000ef0:	d90b      	bls.n	8000f0a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ef6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2205      	movs	r2, #5
 8000f02:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e0c5      	b.n	8001096 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f003 0301 	and.w	r3, r3, #1
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d0e5      	beq.n	8000ee4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f022 0202 	bic.w	r2, r2, #2
 8000f26:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f28:	f7ff ffb2 	bl	8000e90 <HAL_GetTick>
 8000f2c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f2e:	e012      	b.n	8000f56 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f30:	f7ff ffae 	bl	8000e90 <HAL_GetTick>
 8000f34:	4602      	mov	r2, r0
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	2b0a      	cmp	r3, #10
 8000f3c:	d90b      	bls.n	8000f56 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f42:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2205      	movs	r2, #5
 8000f4e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	e09f      	b.n	8001096 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f003 0302 	and.w	r3, r3, #2
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d1e5      	bne.n	8000f30 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	7e1b      	ldrb	r3, [r3, #24]
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d108      	bne.n	8000f7e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	e007      	b.n	8000f8e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000f8c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	7e5b      	ldrb	r3, [r3, #25]
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d108      	bne.n	8000fa8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	e007      	b.n	8000fb8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000fb6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	7e9b      	ldrb	r3, [r3, #26]
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d108      	bne.n	8000fd2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f042 0220 	orr.w	r2, r2, #32
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	e007      	b.n	8000fe2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f022 0220 	bic.w	r2, r2, #32
 8000fe0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	7edb      	ldrb	r3, [r3, #27]
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d108      	bne.n	8000ffc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f022 0210 	bic.w	r2, r2, #16
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	e007      	b.n	800100c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f042 0210 	orr.w	r2, r2, #16
 800100a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	7f1b      	ldrb	r3, [r3, #28]
 8001010:	2b01      	cmp	r3, #1
 8001012:	d108      	bne.n	8001026 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f042 0208 	orr.w	r2, r2, #8
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	e007      	b.n	8001036 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f022 0208 	bic.w	r2, r2, #8
 8001034:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	7f5b      	ldrb	r3, [r3, #29]
 800103a:	2b01      	cmp	r3, #1
 800103c:	d108      	bne.n	8001050 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f042 0204 	orr.w	r2, r2, #4
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	e007      	b.n	8001060 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f022 0204 	bic.w	r2, r2, #4
 800105e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	689a      	ldr	r2, [r3, #8]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	431a      	orrs	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	691b      	ldr	r3, [r3, #16]
 800106e:	431a      	orrs	r2, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	695b      	ldr	r3, [r3, #20]
 8001074:	ea42 0103 	orr.w	r1, r2, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	1e5a      	subs	r2, r3, #1
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	430a      	orrs	r2, r1
 8001084:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2200      	movs	r2, #0
 800108a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2201      	movs	r2, #1
 8001090:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800109e:	b480      	push	{r7}
 80010a0:	b087      	sub	sp, #28
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
 80010a6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010b4:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80010b6:	7cfb      	ldrb	r3, [r7, #19]
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d003      	beq.n	80010c4 <HAL_CAN_ConfigFilter+0x26>
 80010bc:	7cfb      	ldrb	r3, [r7, #19]
 80010be:	2b02      	cmp	r3, #2
 80010c0:	f040 80aa 	bne.w	8001218 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80010ca:	f043 0201 	orr.w	r2, r3, #1
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	695b      	ldr	r3, [r3, #20]
 80010d8:	f003 031f 	and.w	r3, r3, #31
 80010dc:	2201      	movs	r2, #1
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	43db      	mvns	r3, r3
 80010ee:	401a      	ands	r2, r3
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	69db      	ldr	r3, [r3, #28]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d123      	bne.n	8001146 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	43db      	mvns	r3, r3
 8001108:	401a      	ands	r2, r3
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800111c:	683a      	ldr	r2, [r7, #0]
 800111e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001120:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	3248      	adds	r2, #72	@ 0x48
 8001126:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800113a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800113c:	6979      	ldr	r1, [r7, #20]
 800113e:	3348      	adds	r3, #72	@ 0x48
 8001140:	00db      	lsls	r3, r3, #3
 8001142:	440b      	add	r3, r1
 8001144:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	69db      	ldr	r3, [r3, #28]
 800114a:	2b01      	cmp	r3, #1
 800114c:	d122      	bne.n	8001194 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	431a      	orrs	r2, r3
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800116a:	683a      	ldr	r2, [r7, #0]
 800116c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800116e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	3248      	adds	r2, #72	@ 0x48
 8001174:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	68db      	ldr	r3, [r3, #12]
 8001182:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001188:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800118a:	6979      	ldr	r1, [r7, #20]
 800118c:	3348      	adds	r3, #72	@ 0x48
 800118e:	00db      	lsls	r3, r3, #3
 8001190:	440b      	add	r3, r1
 8001192:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d109      	bne.n	80011b0 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	43db      	mvns	r3, r3
 80011a6:	401a      	ands	r2, r3
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80011ae:	e007      	b.n	80011c0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	431a      	orrs	r2, r3
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	691b      	ldr	r3, [r3, #16]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d109      	bne.n	80011dc <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	43db      	mvns	r3, r3
 80011d2:	401a      	ands	r2, r3
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80011da:	e007      	b.n	80011ec <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	431a      	orrs	r2, r3
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	6a1b      	ldr	r3, [r3, #32]
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d107      	bne.n	8001204 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	431a      	orrs	r2, r3
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800120a:	f023 0201 	bic.w	r2, r3, #1
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001214:	2300      	movs	r3, #0
 8001216:	e006      	b.n	8001226 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800121c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001224:	2301      	movs	r3, #1
  }
}
 8001226:	4618      	mov	r0, r3
 8001228:	371c      	adds	r7, #28
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr

08001232 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b084      	sub	sp, #16
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001240:	b2db      	uxtb	r3, r3
 8001242:	2b01      	cmp	r3, #1
 8001244:	d12e      	bne.n	80012a4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2202      	movs	r2, #2
 800124a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f022 0201 	bic.w	r2, r2, #1
 800125c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800125e:	f7ff fe17 	bl	8000e90 <HAL_GetTick>
 8001262:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001264:	e012      	b.n	800128c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001266:	f7ff fe13 	bl	8000e90 <HAL_GetTick>
 800126a:	4602      	mov	r2, r0
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	2b0a      	cmp	r3, #10
 8001272:	d90b      	bls.n	800128c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001278:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2205      	movs	r2, #5
 8001284:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001288:	2301      	movs	r3, #1
 800128a:	e012      	b.n	80012b2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1e5      	bne.n	8001266 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2200      	movs	r2, #0
 800129e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80012a0:	2300      	movs	r3, #0
 80012a2:	e006      	b.n	80012b2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012a8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
  }
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80012ba:	b480      	push	{r7}
 80012bc:	b089      	sub	sp, #36	@ 0x24
 80012be:	af00      	add	r7, sp, #0
 80012c0:	60f8      	str	r0, [r7, #12]
 80012c2:	60b9      	str	r1, [r7, #8]
 80012c4:	607a      	str	r2, [r7, #4]
 80012c6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012ce:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80012d8:	7ffb      	ldrb	r3, [r7, #31]
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d003      	beq.n	80012e6 <HAL_CAN_AddTxMessage+0x2c>
 80012de:	7ffb      	ldrb	r3, [r7, #31]
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	f040 80ad 	bne.w	8001440 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d10a      	bne.n	8001306 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d105      	bne.n	8001306 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001300:	2b00      	cmp	r3, #0
 8001302:	f000 8095 	beq.w	8001430 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	0e1b      	lsrs	r3, r3, #24
 800130a:	f003 0303 	and.w	r3, r3, #3
 800130e:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001310:	2201      	movs	r2, #1
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	409a      	lsls	r2, r3
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d10d      	bne.n	800133e <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800132c:	68f9      	ldr	r1, [r7, #12]
 800132e:	6809      	ldr	r1, [r1, #0]
 8001330:	431a      	orrs	r2, r3
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	3318      	adds	r3, #24
 8001336:	011b      	lsls	r3, r3, #4
 8001338:	440b      	add	r3, r1
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	e00f      	b.n	800135e <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001348:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800134e:	68f9      	ldr	r1, [r7, #12]
 8001350:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001352:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	3318      	adds	r3, #24
 8001358:	011b      	lsls	r3, r3, #4
 800135a:	440b      	add	r3, r1
 800135c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	6819      	ldr	r1, [r3, #0]
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	691a      	ldr	r2, [r3, #16]
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	3318      	adds	r3, #24
 800136a:	011b      	lsls	r3, r3, #4
 800136c:	440b      	add	r3, r1
 800136e:	3304      	adds	r3, #4
 8001370:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	7d1b      	ldrb	r3, [r3, #20]
 8001376:	2b01      	cmp	r3, #1
 8001378:	d111      	bne.n	800139e <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	3318      	adds	r3, #24
 8001382:	011b      	lsls	r3, r3, #4
 8001384:	4413      	add	r3, r2
 8001386:	3304      	adds	r3, #4
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	68fa      	ldr	r2, [r7, #12]
 800138c:	6811      	ldr	r1, [r2, #0]
 800138e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	3318      	adds	r3, #24
 8001396:	011b      	lsls	r3, r3, #4
 8001398:	440b      	add	r3, r1
 800139a:	3304      	adds	r3, #4
 800139c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	3307      	adds	r3, #7
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	061a      	lsls	r2, r3, #24
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	3306      	adds	r3, #6
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	041b      	lsls	r3, r3, #16
 80013ae:	431a      	orrs	r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	3305      	adds	r3, #5
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	021b      	lsls	r3, r3, #8
 80013b8:	4313      	orrs	r3, r2
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	3204      	adds	r2, #4
 80013be:	7812      	ldrb	r2, [r2, #0]
 80013c0:	4610      	mov	r0, r2
 80013c2:	68fa      	ldr	r2, [r7, #12]
 80013c4:	6811      	ldr	r1, [r2, #0]
 80013c6:	ea43 0200 	orr.w	r2, r3, r0
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	011b      	lsls	r3, r3, #4
 80013ce:	440b      	add	r3, r1
 80013d0:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80013d4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	3303      	adds	r3, #3
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	061a      	lsls	r2, r3, #24
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	3302      	adds	r3, #2
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	041b      	lsls	r3, r3, #16
 80013e6:	431a      	orrs	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3301      	adds	r3, #1
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	021b      	lsls	r3, r3, #8
 80013f0:	4313      	orrs	r3, r2
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	7812      	ldrb	r2, [r2, #0]
 80013f6:	4610      	mov	r0, r2
 80013f8:	68fa      	ldr	r2, [r7, #12]
 80013fa:	6811      	ldr	r1, [r2, #0]
 80013fc:	ea43 0200 	orr.w	r2, r3, r0
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	011b      	lsls	r3, r3, #4
 8001404:	440b      	add	r3, r1
 8001406:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800140a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	3318      	adds	r3, #24
 8001414:	011b      	lsls	r3, r3, #4
 8001416:	4413      	add	r3, r2
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	68fa      	ldr	r2, [r7, #12]
 800141c:	6811      	ldr	r1, [r2, #0]
 800141e:	f043 0201 	orr.w	r2, r3, #1
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	3318      	adds	r3, #24
 8001426:	011b      	lsls	r3, r3, #4
 8001428:	440b      	add	r3, r1
 800142a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800142c:	2300      	movs	r3, #0
 800142e:	e00e      	b.n	800144e <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001434:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	e006      	b.n	800144e <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001444:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
  }
}
 800144e:	4618      	mov	r0, r3
 8001450:	3724      	adds	r7, #36	@ 0x24
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr

0800145a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800145a:	b480      	push	{r7}
 800145c:	b087      	sub	sp, #28
 800145e:	af00      	add	r7, sp, #0
 8001460:	60f8      	str	r0, [r7, #12]
 8001462:	60b9      	str	r1, [r7, #8]
 8001464:	607a      	str	r2, [r7, #4]
 8001466:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800146e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001470:	7dfb      	ldrb	r3, [r7, #23]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d003      	beq.n	800147e <HAL_CAN_GetRxMessage+0x24>
 8001476:	7dfb      	ldrb	r3, [r7, #23]
 8001478:	2b02      	cmp	r3, #2
 800147a:	f040 8103 	bne.w	8001684 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d10e      	bne.n	80014a2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	68db      	ldr	r3, [r3, #12]
 800148a:	f003 0303 	and.w	r3, r3, #3
 800148e:	2b00      	cmp	r3, #0
 8001490:	d116      	bne.n	80014c0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001496:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e0f7      	b.n	8001692 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	691b      	ldr	r3, [r3, #16]
 80014a8:	f003 0303 	and.w	r3, r3, #3
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d107      	bne.n	80014c0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014b4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e0e8      	b.n	8001692 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	331b      	adds	r3, #27
 80014c8:	011b      	lsls	r3, r3, #4
 80014ca:	4413      	add	r3, r2
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0204 	and.w	r2, r3, #4
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d10c      	bne.n	80014f8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	331b      	adds	r3, #27
 80014e6:	011b      	lsls	r3, r3, #4
 80014e8:	4413      	add	r3, r2
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	0d5b      	lsrs	r3, r3, #21
 80014ee:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	e00b      	b.n	8001510 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	331b      	adds	r3, #27
 8001500:	011b      	lsls	r3, r3, #4
 8001502:	4413      	add	r3, r2
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	08db      	lsrs	r3, r3, #3
 8001508:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	331b      	adds	r3, #27
 8001518:	011b      	lsls	r3, r3, #4
 800151a:	4413      	add	r3, r2
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0202 	and.w	r2, r3, #2
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	331b      	adds	r3, #27
 800152e:	011b      	lsls	r3, r3, #4
 8001530:	4413      	add	r3, r2
 8001532:	3304      	adds	r3, #4
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0308 	and.w	r3, r3, #8
 800153a:	2b00      	cmp	r3, #0
 800153c:	d003      	beq.n	8001546 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2208      	movs	r2, #8
 8001542:	611a      	str	r2, [r3, #16]
 8001544:	e00b      	b.n	800155e <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	331b      	adds	r3, #27
 800154e:	011b      	lsls	r3, r3, #4
 8001550:	4413      	add	r3, r2
 8001552:	3304      	adds	r3, #4
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 020f 	and.w	r2, r3, #15
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	331b      	adds	r3, #27
 8001566:	011b      	lsls	r3, r3, #4
 8001568:	4413      	add	r3, r2
 800156a:	3304      	adds	r3, #4
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	0a1b      	lsrs	r3, r3, #8
 8001570:	b2da      	uxtb	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	331b      	adds	r3, #27
 800157e:	011b      	lsls	r3, r3, #4
 8001580:	4413      	add	r3, r2
 8001582:	3304      	adds	r3, #4
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	0c1b      	lsrs	r3, r3, #16
 8001588:	b29a      	uxth	r2, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	011b      	lsls	r3, r3, #4
 8001596:	4413      	add	r3, r2
 8001598:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	011b      	lsls	r3, r3, #4
 80015ac:	4413      	add	r3, r2
 80015ae:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	0a1a      	lsrs	r2, r3, #8
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	3301      	adds	r3, #1
 80015ba:	b2d2      	uxtb	r2, r2
 80015bc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	011b      	lsls	r3, r3, #4
 80015c6:	4413      	add	r3, r2
 80015c8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	0c1a      	lsrs	r2, r3, #16
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	3302      	adds	r3, #2
 80015d4:	b2d2      	uxtb	r2, r2
 80015d6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	011b      	lsls	r3, r3, #4
 80015e0:	4413      	add	r3, r2
 80015e2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	0e1a      	lsrs	r2, r3, #24
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	3303      	adds	r3, #3
 80015ee:	b2d2      	uxtb	r2, r2
 80015f0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	011b      	lsls	r3, r3, #4
 80015fa:	4413      	add	r3, r2
 80015fc:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	3304      	adds	r3, #4
 8001606:	b2d2      	uxtb	r2, r2
 8001608:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	011b      	lsls	r3, r3, #4
 8001612:	4413      	add	r3, r2
 8001614:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	0a1a      	lsrs	r2, r3, #8
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	3305      	adds	r3, #5
 8001620:	b2d2      	uxtb	r2, r2
 8001622:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	011b      	lsls	r3, r3, #4
 800162c:	4413      	add	r3, r2
 800162e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	0c1a      	lsrs	r2, r3, #16
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	3306      	adds	r3, #6
 800163a:	b2d2      	uxtb	r2, r2
 800163c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	011b      	lsls	r3, r3, #4
 8001646:	4413      	add	r3, r2
 8001648:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	0e1a      	lsrs	r2, r3, #24
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	3307      	adds	r3, #7
 8001654:	b2d2      	uxtb	r2, r2
 8001656:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d108      	bne.n	8001670 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	68da      	ldr	r2, [r3, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f042 0220 	orr.w	r2, r2, #32
 800166c:	60da      	str	r2, [r3, #12]
 800166e:	e007      	b.n	8001680 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	691a      	ldr	r2, [r3, #16]
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f042 0220 	orr.w	r2, r2, #32
 800167e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001680:	2300      	movs	r3, #0
 8001682:	e006      	b.n	8001692 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001688:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
  }
}
 8001692:	4618      	mov	r0, r3
 8001694:	371c      	adds	r7, #28
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800169e:	b480      	push	{r7}
 80016a0:	b085      	sub	sp, #20
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
 80016a6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016ae:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80016b0:	7bfb      	ldrb	r3, [r7, #15]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d002      	beq.n	80016bc <HAL_CAN_ActivateNotification+0x1e>
 80016b6:	7bfb      	ldrb	r3, [r7, #15]
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d109      	bne.n	80016d0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	6959      	ldr	r1, [r3, #20]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	683a      	ldr	r2, [r7, #0]
 80016c8:	430a      	orrs	r2, r1
 80016ca:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80016cc:	2300      	movs	r3, #0
 80016ce:	e006      	b.n	80016de <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016d4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
  }
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3714      	adds	r7, #20
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr

080016ea <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b08a      	sub	sp, #40	@ 0x28
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80016f2:	2300      	movs	r3, #0
 80016f4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	695b      	ldr	r3, [r3, #20]
 80016fc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	691b      	ldr	r3, [r3, #16]
 800171c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001726:	6a3b      	ldr	r3, [r7, #32]
 8001728:	f003 0301 	and.w	r3, r3, #1
 800172c:	2b00      	cmp	r3, #0
 800172e:	d07c      	beq.n	800182a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	2b00      	cmp	r3, #0
 8001738:	d023      	beq.n	8001782 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2201      	movs	r2, #1
 8001740:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	f003 0302 	and.w	r3, r3, #2
 8001748:	2b00      	cmp	r3, #0
 800174a:	d003      	beq.n	8001754 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f7ff f913 	bl	8000978 <HAL_CAN_TxMailbox0CompleteCallback>
 8001752:	e016      	b.n	8001782 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	f003 0304 	and.w	r3, r3, #4
 800175a:	2b00      	cmp	r3, #0
 800175c:	d004      	beq.n	8001768 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800175e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001760:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001764:	627b      	str	r3, [r7, #36]	@ 0x24
 8001766:	e00c      	b.n	8001782 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	f003 0308 	and.w	r3, r3, #8
 800176e:	2b00      	cmp	r3, #0
 8001770:	d004      	beq.n	800177c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001774:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001778:	627b      	str	r3, [r7, #36]	@ 0x24
 800177a:	e002      	b.n	8001782 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f000 f96b 	bl	8001a58 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001788:	2b00      	cmp	r3, #0
 800178a:	d024      	beq.n	80017d6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001794:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800179c:	2b00      	cmp	r3, #0
 800179e:	d003      	beq.n	80017a8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f7ff f909 	bl	80009b8 <HAL_CAN_TxMailbox1CompleteCallback>
 80017a6:	e016      	b.n	80017d6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d004      	beq.n	80017bc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80017b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80017b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80017ba:	e00c      	b.n	80017d6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d004      	beq.n	80017d0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80017c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80017ce:	e002      	b.n	80017d6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f000 f94b 	bl	8001a6c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d024      	beq.n	800182a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80017e8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d003      	beq.n	80017fc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f7ff f8ff 	bl	80009f8 <HAL_CAN_TxMailbox2CompleteCallback>
 80017fa:	e016      	b.n	800182a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d004      	beq.n	8001810 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001808:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800180c:	627b      	str	r3, [r7, #36]	@ 0x24
 800180e:	e00c      	b.n	800182a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d004      	beq.n	8001824 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800181a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800181c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001820:	627b      	str	r3, [r7, #36]	@ 0x24
 8001822:	e002      	b.n	800182a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f000 f92b 	bl	8001a80 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800182a:	6a3b      	ldr	r3, [r7, #32]
 800182c:	f003 0308 	and.w	r3, r3, #8
 8001830:	2b00      	cmp	r3, #0
 8001832:	d00c      	beq.n	800184e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	f003 0310 	and.w	r3, r3, #16
 800183a:	2b00      	cmp	r3, #0
 800183c:	d007      	beq.n	800184e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800183e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001840:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001844:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2210      	movs	r2, #16
 800184c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800184e:	6a3b      	ldr	r3, [r7, #32]
 8001850:	f003 0304 	and.w	r3, r3, #4
 8001854:	2b00      	cmp	r3, #0
 8001856:	d00b      	beq.n	8001870 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	f003 0308 	and.w	r3, r3, #8
 800185e:	2b00      	cmp	r3, #0
 8001860:	d006      	beq.n	8001870 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2208      	movs	r2, #8
 8001868:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f000 f912 	bl	8001a94 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001870:	6a3b      	ldr	r3, [r7, #32]
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d009      	beq.n	800188e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	f003 0303 	and.w	r3, r3, #3
 8001884:	2b00      	cmp	r3, #0
 8001886:	d002      	beq.n	800188e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f7ff f8d5 	bl	8000a38 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800188e:	6a3b      	ldr	r3, [r7, #32]
 8001890:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001894:	2b00      	cmp	r3, #0
 8001896:	d00c      	beq.n	80018b2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	f003 0310 	and.w	r3, r3, #16
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d007      	beq.n	80018b2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80018a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018a8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2210      	movs	r2, #16
 80018b0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80018b2:	6a3b      	ldr	r3, [r7, #32]
 80018b4:	f003 0320 	and.w	r3, r3, #32
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d00b      	beq.n	80018d4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	f003 0308 	and.w	r3, r3, #8
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d006      	beq.n	80018d4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2208      	movs	r2, #8
 80018cc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f000 f8f4 	bl	8001abc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80018d4:	6a3b      	ldr	r3, [r7, #32]
 80018d6:	f003 0310 	and.w	r3, r3, #16
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d009      	beq.n	80018f2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	691b      	ldr	r3, [r3, #16]
 80018e4:	f003 0303 	and.w	r3, r3, #3
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d002      	beq.n	80018f2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f000 f8db 	bl	8001aa8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80018f2:	6a3b      	ldr	r3, [r7, #32]
 80018f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d00b      	beq.n	8001914 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	f003 0310 	and.w	r3, r3, #16
 8001902:	2b00      	cmp	r3, #0
 8001904:	d006      	beq.n	8001914 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2210      	movs	r2, #16
 800190c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f000 f8de 	bl	8001ad0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001914:	6a3b      	ldr	r3, [r7, #32]
 8001916:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d00b      	beq.n	8001936 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	f003 0308 	and.w	r3, r3, #8
 8001924:	2b00      	cmp	r3, #0
 8001926:	d006      	beq.n	8001936 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2208      	movs	r2, #8
 800192e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f000 f8d7 	bl	8001ae4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001936:	6a3b      	ldr	r3, [r7, #32]
 8001938:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d07b      	beq.n	8001a38 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	f003 0304 	and.w	r3, r3, #4
 8001946:	2b00      	cmp	r3, #0
 8001948:	d072      	beq.n	8001a30 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800194a:	6a3b      	ldr	r3, [r7, #32]
 800194c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001950:	2b00      	cmp	r3, #0
 8001952:	d008      	beq.n	8001966 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800195a:	2b00      	cmp	r3, #0
 800195c:	d003      	beq.n	8001966 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800195e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001960:	f043 0301 	orr.w	r3, r3, #1
 8001964:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001966:	6a3b      	ldr	r3, [r7, #32]
 8001968:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800196c:	2b00      	cmp	r3, #0
 800196e:	d008      	beq.n	8001982 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001976:	2b00      	cmp	r3, #0
 8001978:	d003      	beq.n	8001982 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800197a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800197c:	f043 0302 	orr.w	r3, r3, #2
 8001980:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001982:	6a3b      	ldr	r3, [r7, #32]
 8001984:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001988:	2b00      	cmp	r3, #0
 800198a:	d008      	beq.n	800199e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001992:	2b00      	cmp	r3, #0
 8001994:	d003      	beq.n	800199e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001998:	f043 0304 	orr.w	r3, r3, #4
 800199c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800199e:	6a3b      	ldr	r3, [r7, #32]
 80019a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d043      	beq.n	8001a30 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d03e      	beq.n	8001a30 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80019b8:	2b60      	cmp	r3, #96	@ 0x60
 80019ba:	d02b      	beq.n	8001a14 <HAL_CAN_IRQHandler+0x32a>
 80019bc:	2b60      	cmp	r3, #96	@ 0x60
 80019be:	d82e      	bhi.n	8001a1e <HAL_CAN_IRQHandler+0x334>
 80019c0:	2b50      	cmp	r3, #80	@ 0x50
 80019c2:	d022      	beq.n	8001a0a <HAL_CAN_IRQHandler+0x320>
 80019c4:	2b50      	cmp	r3, #80	@ 0x50
 80019c6:	d82a      	bhi.n	8001a1e <HAL_CAN_IRQHandler+0x334>
 80019c8:	2b40      	cmp	r3, #64	@ 0x40
 80019ca:	d019      	beq.n	8001a00 <HAL_CAN_IRQHandler+0x316>
 80019cc:	2b40      	cmp	r3, #64	@ 0x40
 80019ce:	d826      	bhi.n	8001a1e <HAL_CAN_IRQHandler+0x334>
 80019d0:	2b30      	cmp	r3, #48	@ 0x30
 80019d2:	d010      	beq.n	80019f6 <HAL_CAN_IRQHandler+0x30c>
 80019d4:	2b30      	cmp	r3, #48	@ 0x30
 80019d6:	d822      	bhi.n	8001a1e <HAL_CAN_IRQHandler+0x334>
 80019d8:	2b10      	cmp	r3, #16
 80019da:	d002      	beq.n	80019e2 <HAL_CAN_IRQHandler+0x2f8>
 80019dc:	2b20      	cmp	r3, #32
 80019de:	d005      	beq.n	80019ec <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80019e0:	e01d      	b.n	8001a1e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80019e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e4:	f043 0308 	orr.w	r3, r3, #8
 80019e8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80019ea:	e019      	b.n	8001a20 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80019ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ee:	f043 0310 	orr.w	r3, r3, #16
 80019f2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80019f4:	e014      	b.n	8001a20 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80019f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f8:	f043 0320 	orr.w	r3, r3, #32
 80019fc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80019fe:	e00f      	b.n	8001a20 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a06:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001a08:	e00a      	b.n	8001a20 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a10:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001a12:	e005      	b.n	8001a20 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a1a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001a1c:	e000      	b.n	8001a20 <HAL_CAN_IRQHandler+0x336>
            break;
 8001a1e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	699a      	ldr	r2, [r3, #24]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001a2e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2204      	movs	r2, #4
 8001a36:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d008      	beq.n	8001a50 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a44:	431a      	orrs	r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7ff f832 	bl	8000ab4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001a50:	bf00      	nop
 8001a52:	3728      	adds	r7, #40	@ 0x28
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001a74:	bf00      	nop
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001a88:	bf00      	nop
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001ab0:	bf00      	nop
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001aec:	bf00      	nop
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f003 0307 	and.w	r3, r3, #7
 8001b06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b08:	4b0c      	ldr	r3, [pc, #48]	@ (8001b3c <__NVIC_SetPriorityGrouping+0x44>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b0e:	68ba      	ldr	r2, [r7, #8]
 8001b10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b14:	4013      	ands	r3, r2
 8001b16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b2a:	4a04      	ldr	r2, [pc, #16]	@ (8001b3c <__NVIC_SetPriorityGrouping+0x44>)
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	60d3      	str	r3, [r2, #12]
}
 8001b30:	bf00      	nop
 8001b32:	3714      	adds	r7, #20
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	e000ed00 	.word	0xe000ed00

08001b40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b44:	4b04      	ldr	r3, [pc, #16]	@ (8001b58 <__NVIC_GetPriorityGrouping+0x18>)
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	0a1b      	lsrs	r3, r3, #8
 8001b4a:	f003 0307 	and.w	r3, r3, #7
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	e000ed00 	.word	0xe000ed00

08001b5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	db0b      	blt.n	8001b86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b6e:	79fb      	ldrb	r3, [r7, #7]
 8001b70:	f003 021f 	and.w	r2, r3, #31
 8001b74:	4907      	ldr	r1, [pc, #28]	@ (8001b94 <__NVIC_EnableIRQ+0x38>)
 8001b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7a:	095b      	lsrs	r3, r3, #5
 8001b7c:	2001      	movs	r0, #1
 8001b7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b86:	bf00      	nop
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	e000e100 	.word	0xe000e100

08001b98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	6039      	str	r1, [r7, #0]
 8001ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	db0a      	blt.n	8001bc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	b2da      	uxtb	r2, r3
 8001bb0:	490c      	ldr	r1, [pc, #48]	@ (8001be4 <__NVIC_SetPriority+0x4c>)
 8001bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb6:	0112      	lsls	r2, r2, #4
 8001bb8:	b2d2      	uxtb	r2, r2
 8001bba:	440b      	add	r3, r1
 8001bbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bc0:	e00a      	b.n	8001bd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	b2da      	uxtb	r2, r3
 8001bc6:	4908      	ldr	r1, [pc, #32]	@ (8001be8 <__NVIC_SetPriority+0x50>)
 8001bc8:	79fb      	ldrb	r3, [r7, #7]
 8001bca:	f003 030f 	and.w	r3, r3, #15
 8001bce:	3b04      	subs	r3, #4
 8001bd0:	0112      	lsls	r2, r2, #4
 8001bd2:	b2d2      	uxtb	r2, r2
 8001bd4:	440b      	add	r3, r1
 8001bd6:	761a      	strb	r2, [r3, #24]
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	e000e100 	.word	0xe000e100
 8001be8:	e000ed00 	.word	0xe000ed00

08001bec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b089      	sub	sp, #36	@ 0x24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	f1c3 0307 	rsb	r3, r3, #7
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	bf28      	it	cs
 8001c0a:	2304      	movcs	r3, #4
 8001c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	3304      	adds	r3, #4
 8001c12:	2b06      	cmp	r3, #6
 8001c14:	d902      	bls.n	8001c1c <NVIC_EncodePriority+0x30>
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	3b03      	subs	r3, #3
 8001c1a:	e000      	b.n	8001c1e <NVIC_EncodePriority+0x32>
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c20:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	43da      	mvns	r2, r3
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	401a      	ands	r2, r3
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c34:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3e:	43d9      	mvns	r1, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c44:	4313      	orrs	r3, r2
         );
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3724      	adds	r7, #36	@ 0x24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
	...

08001c54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c64:	d301      	bcc.n	8001c6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c66:	2301      	movs	r3, #1
 8001c68:	e00f      	b.n	8001c8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c94 <SysTick_Config+0x40>)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c72:	210f      	movs	r1, #15
 8001c74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001c78:	f7ff ff8e 	bl	8001b98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c7c:	4b05      	ldr	r3, [pc, #20]	@ (8001c94 <SysTick_Config+0x40>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c82:	4b04      	ldr	r3, [pc, #16]	@ (8001c94 <SysTick_Config+0x40>)
 8001c84:	2207      	movs	r2, #7
 8001c86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	e000e010 	.word	0xe000e010

08001c98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f7ff ff29 	bl	8001af8 <__NVIC_SetPriorityGrouping>
}
 8001ca6:	bf00      	nop
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b086      	sub	sp, #24
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	60b9      	str	r1, [r7, #8]
 8001cb8:	607a      	str	r2, [r7, #4]
 8001cba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cc0:	f7ff ff3e 	bl	8001b40 <__NVIC_GetPriorityGrouping>
 8001cc4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	68b9      	ldr	r1, [r7, #8]
 8001cca:	6978      	ldr	r0, [r7, #20]
 8001ccc:	f7ff ff8e 	bl	8001bec <NVIC_EncodePriority>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cd6:	4611      	mov	r1, r2
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff ff5d 	bl	8001b98 <__NVIC_SetPriority>
}
 8001cde:	bf00      	nop
 8001ce0:	3718      	adds	r7, #24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b082      	sub	sp, #8
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	4603      	mov	r3, r0
 8001cee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff ff31 	bl	8001b5c <__NVIC_EnableIRQ>
}
 8001cfa:	bf00      	nop
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b082      	sub	sp, #8
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f7ff ffa2 	bl	8001c54 <SysTick_Config>
 8001d10:	4603      	mov	r3, r0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001d1e:	f000 f802 	bl	8001d26 <HAL_SYSTICK_Callback>
}
 8001d22:	bf00      	nop
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001d26:	b480      	push	{r7}
 8001d28:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001d2a:	bf00      	nop
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d008      	beq.n	8001d5e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2204      	movs	r2, #4
 8001d50:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e022      	b.n	8001da4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f022 020e 	bic.w	r2, r2, #14
 8001d6c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f022 0201 	bic.w	r2, r2, #1
 8001d7c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d82:	f003 021c 	and.w	r2, r3, #28
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d8a:	2101      	movs	r1, #1
 8001d8c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d90:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2201      	movs	r2, #1
 8001d96:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001da2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3714      	adds	r7, #20
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001db8:	2300      	movs	r3, #0
 8001dba:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d005      	beq.n	8001dd4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2204      	movs	r2, #4
 8001dcc:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	73fb      	strb	r3, [r7, #15]
 8001dd2:	e029      	b.n	8001e28 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f022 020e 	bic.w	r2, r2, #14
 8001de2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f022 0201 	bic.w	r2, r2, #1
 8001df2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001df8:	f003 021c 	and.w	r2, r3, #28
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e00:	2101      	movs	r1, #1
 8001e02:	fa01 f202 	lsl.w	r2, r1, r2
 8001e06:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d003      	beq.n	8001e28 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	4798      	blx	r3
    }
  }
  return status;
 8001e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
	...

08001e34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b087      	sub	sp, #28
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e42:	e17f      	b.n	8002144 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	2101      	movs	r1, #1
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e50:	4013      	ands	r3, r2
 8001e52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	f000 8171 	beq.w	800213e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f003 0303 	and.w	r3, r3, #3
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d005      	beq.n	8001e74 <HAL_GPIO_Init+0x40>
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f003 0303 	and.w	r3, r3, #3
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d130      	bne.n	8001ed6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	2203      	movs	r2, #3
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	43db      	mvns	r3, r3
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	68da      	ldr	r2, [r3, #12]
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001eaa:	2201      	movs	r2, #1
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb2:	43db      	mvns	r3, r3
 8001eb4:	693a      	ldr	r2, [r7, #16]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	091b      	lsrs	r3, r3, #4
 8001ec0:	f003 0201 	and.w	r2, r3, #1
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f003 0303 	and.w	r3, r3, #3
 8001ede:	2b03      	cmp	r3, #3
 8001ee0:	d118      	bne.n	8001f14 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ee6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001ee8:	2201      	movs	r2, #1
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	08db      	lsrs	r3, r3, #3
 8001efe:	f003 0201 	and.w	r2, r3, #1
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	693a      	ldr	r2, [r7, #16]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	693a      	ldr	r2, [r7, #16]
 8001f12:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f003 0303 	and.w	r3, r3, #3
 8001f1c:	2b03      	cmp	r3, #3
 8001f1e:	d017      	beq.n	8001f50 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	2203      	movs	r2, #3
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	4013      	ands	r3, r2
 8001f36:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	693a      	ldr	r2, [r7, #16]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f003 0303 	and.w	r3, r3, #3
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d123      	bne.n	8001fa4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	08da      	lsrs	r2, r3, #3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	3208      	adds	r2, #8
 8001f64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f68:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	f003 0307 	and.w	r3, r3, #7
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	220f      	movs	r2, #15
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	691a      	ldr	r2, [r3, #16]
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	08da      	lsrs	r2, r3, #3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	3208      	adds	r2, #8
 8001f9e:	6939      	ldr	r1, [r7, #16]
 8001fa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	2203      	movs	r2, #3
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f003 0203 	and.w	r2, r3, #3
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	693a      	ldr	r2, [r7, #16]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f000 80ac 	beq.w	800213e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fe6:	4b5f      	ldr	r3, [pc, #380]	@ (8002164 <HAL_GPIO_Init+0x330>)
 8001fe8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fea:	4a5e      	ldr	r2, [pc, #376]	@ (8002164 <HAL_GPIO_Init+0x330>)
 8001fec:	f043 0301 	orr.w	r3, r3, #1
 8001ff0:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ff2:	4b5c      	ldr	r3, [pc, #368]	@ (8002164 <HAL_GPIO_Init+0x330>)
 8001ff4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	60bb      	str	r3, [r7, #8]
 8001ffc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ffe:	4a5a      	ldr	r2, [pc, #360]	@ (8002168 <HAL_GPIO_Init+0x334>)
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	089b      	lsrs	r3, r3, #2
 8002004:	3302      	adds	r3, #2
 8002006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800200a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	f003 0303 	and.w	r3, r3, #3
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	220f      	movs	r2, #15
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	43db      	mvns	r3, r3
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	4013      	ands	r3, r2
 8002020:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002028:	d025      	beq.n	8002076 <HAL_GPIO_Init+0x242>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a4f      	ldr	r2, [pc, #316]	@ (800216c <HAL_GPIO_Init+0x338>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d01f      	beq.n	8002072 <HAL_GPIO_Init+0x23e>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a4e      	ldr	r2, [pc, #312]	@ (8002170 <HAL_GPIO_Init+0x33c>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d019      	beq.n	800206e <HAL_GPIO_Init+0x23a>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a4d      	ldr	r2, [pc, #308]	@ (8002174 <HAL_GPIO_Init+0x340>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d013      	beq.n	800206a <HAL_GPIO_Init+0x236>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a4c      	ldr	r2, [pc, #304]	@ (8002178 <HAL_GPIO_Init+0x344>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d00d      	beq.n	8002066 <HAL_GPIO_Init+0x232>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a4b      	ldr	r2, [pc, #300]	@ (800217c <HAL_GPIO_Init+0x348>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d007      	beq.n	8002062 <HAL_GPIO_Init+0x22e>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a4a      	ldr	r2, [pc, #296]	@ (8002180 <HAL_GPIO_Init+0x34c>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d101      	bne.n	800205e <HAL_GPIO_Init+0x22a>
 800205a:	2306      	movs	r3, #6
 800205c:	e00c      	b.n	8002078 <HAL_GPIO_Init+0x244>
 800205e:	2307      	movs	r3, #7
 8002060:	e00a      	b.n	8002078 <HAL_GPIO_Init+0x244>
 8002062:	2305      	movs	r3, #5
 8002064:	e008      	b.n	8002078 <HAL_GPIO_Init+0x244>
 8002066:	2304      	movs	r3, #4
 8002068:	e006      	b.n	8002078 <HAL_GPIO_Init+0x244>
 800206a:	2303      	movs	r3, #3
 800206c:	e004      	b.n	8002078 <HAL_GPIO_Init+0x244>
 800206e:	2302      	movs	r3, #2
 8002070:	e002      	b.n	8002078 <HAL_GPIO_Init+0x244>
 8002072:	2301      	movs	r3, #1
 8002074:	e000      	b.n	8002078 <HAL_GPIO_Init+0x244>
 8002076:	2300      	movs	r3, #0
 8002078:	697a      	ldr	r2, [r7, #20]
 800207a:	f002 0203 	and.w	r2, r2, #3
 800207e:	0092      	lsls	r2, r2, #2
 8002080:	4093      	lsls	r3, r2
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	4313      	orrs	r3, r2
 8002086:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002088:	4937      	ldr	r1, [pc, #220]	@ (8002168 <HAL_GPIO_Init+0x334>)
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	089b      	lsrs	r3, r3, #2
 800208e:	3302      	adds	r3, #2
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002096:	4b3b      	ldr	r3, [pc, #236]	@ (8002184 <HAL_GPIO_Init+0x350>)
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	43db      	mvns	r3, r3
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	4013      	ands	r3, r2
 80020a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d003      	beq.n	80020ba <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020ba:	4a32      	ldr	r2, [pc, #200]	@ (8002184 <HAL_GPIO_Init+0x350>)
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80020c0:	4b30      	ldr	r3, [pc, #192]	@ (8002184 <HAL_GPIO_Init+0x350>)
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	43db      	mvns	r3, r3
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	4013      	ands	r3, r2
 80020ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d003      	beq.n	80020e4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80020dc:	693a      	ldr	r2, [r7, #16]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020e4:	4a27      	ldr	r2, [pc, #156]	@ (8002184 <HAL_GPIO_Init+0x350>)
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80020ea:	4b26      	ldr	r3, [pc, #152]	@ (8002184 <HAL_GPIO_Init+0x350>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	43db      	mvns	r3, r3
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	4013      	ands	r3, r2
 80020f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d003      	beq.n	800210e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	4313      	orrs	r3, r2
 800210c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800210e:	4a1d      	ldr	r2, [pc, #116]	@ (8002184 <HAL_GPIO_Init+0x350>)
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002114:	4b1b      	ldr	r3, [pc, #108]	@ (8002184 <HAL_GPIO_Init+0x350>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	43db      	mvns	r3, r3
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	4013      	ands	r3, r2
 8002122:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d003      	beq.n	8002138 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002130:	693a      	ldr	r2, [r7, #16]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	4313      	orrs	r3, r2
 8002136:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002138:	4a12      	ldr	r2, [pc, #72]	@ (8002184 <HAL_GPIO_Init+0x350>)
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	3301      	adds	r3, #1
 8002142:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	fa22 f303 	lsr.w	r3, r2, r3
 800214e:	2b00      	cmp	r3, #0
 8002150:	f47f ae78 	bne.w	8001e44 <HAL_GPIO_Init+0x10>
  }
}
 8002154:	bf00      	nop
 8002156:	bf00      	nop
 8002158:	371c      	adds	r7, #28
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	40021000 	.word	0x40021000
 8002168:	40010000 	.word	0x40010000
 800216c:	48000400 	.word	0x48000400
 8002170:	48000800 	.word	0x48000800
 8002174:	48000c00 	.word	0x48000c00
 8002178:	48001000 	.word	0x48001000
 800217c:	48001400 	.word	0x48001400
 8002180:	48001800 	.word	0x48001800
 8002184:	40010400 	.word	0x40010400

08002188 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	460b      	mov	r3, r1
 8002192:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	695b      	ldr	r3, [r3, #20]
 8002198:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800219a:	887a      	ldrh	r2, [r7, #2]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	4013      	ands	r3, r2
 80021a0:	041a      	lsls	r2, r3, #16
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	43d9      	mvns	r1, r3
 80021a6:	887b      	ldrh	r3, [r7, #2]
 80021a8:	400b      	ands	r3, r1
 80021aa:	431a      	orrs	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	619a      	str	r2, [r3, #24]
}
 80021b0:	bf00      	nop
 80021b2:	3714      	adds	r7, #20
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	4603      	mov	r3, r0
 80021c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80021c6:	4b08      	ldr	r3, [pc, #32]	@ (80021e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021c8:	695a      	ldr	r2, [r3, #20]
 80021ca:	88fb      	ldrh	r3, [r7, #6]
 80021cc:	4013      	ands	r3, r2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d006      	beq.n	80021e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021d2:	4a05      	ldr	r2, [pc, #20]	@ (80021e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021d4:	88fb      	ldrh	r3, [r7, #6]
 80021d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021d8:	88fb      	ldrh	r3, [r7, #6]
 80021da:	4618      	mov	r0, r3
 80021dc:	f000 f806 	bl	80021ec <HAL_GPIO_EXTI_Callback>
  }
}
 80021e0:	bf00      	nop
 80021e2:	3708      	adds	r7, #8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40010400 	.word	0x40010400

080021ec <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	4603      	mov	r3, r0
 80021f4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80021f6:	bf00      	nop
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
	...

08002204 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002208:	4b04      	ldr	r3, [pc, #16]	@ (800221c <HAL_PWREx_GetVoltageRange+0x18>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002210:	4618      	mov	r0, r3
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	40007000 	.word	0x40007000

08002220 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002220:	b480      	push	{r7}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800222e:	d130      	bne.n	8002292 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002230:	4b23      	ldr	r3, [pc, #140]	@ (80022c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002238:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800223c:	d038      	beq.n	80022b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800223e:	4b20      	ldr	r3, [pc, #128]	@ (80022c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002246:	4a1e      	ldr	r2, [pc, #120]	@ (80022c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002248:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800224c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800224e:	4b1d      	ldr	r3, [pc, #116]	@ (80022c4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2232      	movs	r2, #50	@ 0x32
 8002254:	fb02 f303 	mul.w	r3, r2, r3
 8002258:	4a1b      	ldr	r2, [pc, #108]	@ (80022c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800225a:	fba2 2303 	umull	r2, r3, r2, r3
 800225e:	0c9b      	lsrs	r3, r3, #18
 8002260:	3301      	adds	r3, #1
 8002262:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002264:	e002      	b.n	800226c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	3b01      	subs	r3, #1
 800226a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800226c:	4b14      	ldr	r3, [pc, #80]	@ (80022c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800226e:	695b      	ldr	r3, [r3, #20]
 8002270:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002274:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002278:	d102      	bne.n	8002280 <HAL_PWREx_ControlVoltageScaling+0x60>
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d1f2      	bne.n	8002266 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002280:	4b0f      	ldr	r3, [pc, #60]	@ (80022c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002282:	695b      	ldr	r3, [r3, #20]
 8002284:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002288:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800228c:	d110      	bne.n	80022b0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e00f      	b.n	80022b2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002292:	4b0b      	ldr	r3, [pc, #44]	@ (80022c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800229a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800229e:	d007      	beq.n	80022b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80022a0:	4b07      	ldr	r3, [pc, #28]	@ (80022c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80022a8:	4a05      	ldr	r2, [pc, #20]	@ (80022c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022ae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3714      	adds	r7, #20
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	40007000 	.word	0x40007000
 80022c4:	20000000 	.word	0x20000000
 80022c8:	431bde83 	.word	0x431bde83

080022cc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b088      	sub	sp, #32
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d101      	bne.n	80022de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e3ca      	b.n	8002a74 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022de:	4b97      	ldr	r3, [pc, #604]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f003 030c 	and.w	r3, r3, #12
 80022e6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022e8:	4b94      	ldr	r3, [pc, #592]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	f003 0303 	and.w	r3, r3, #3
 80022f0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0310 	and.w	r3, r3, #16
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f000 80e4 	beq.w	80024c8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d007      	beq.n	8002316 <HAL_RCC_OscConfig+0x4a>
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	2b0c      	cmp	r3, #12
 800230a:	f040 808b 	bne.w	8002424 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	2b01      	cmp	r3, #1
 8002312:	f040 8087 	bne.w	8002424 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002316:	4b89      	ldr	r3, [pc, #548]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d005      	beq.n	800232e <HAL_RCC_OscConfig+0x62>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e3a2      	b.n	8002a74 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a1a      	ldr	r2, [r3, #32]
 8002332:	4b82      	ldr	r3, [pc, #520]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0308 	and.w	r3, r3, #8
 800233a:	2b00      	cmp	r3, #0
 800233c:	d004      	beq.n	8002348 <HAL_RCC_OscConfig+0x7c>
 800233e:	4b7f      	ldr	r3, [pc, #508]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002346:	e005      	b.n	8002354 <HAL_RCC_OscConfig+0x88>
 8002348:	4b7c      	ldr	r3, [pc, #496]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 800234a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800234e:	091b      	lsrs	r3, r3, #4
 8002350:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002354:	4293      	cmp	r3, r2
 8002356:	d223      	bcs.n	80023a0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a1b      	ldr	r3, [r3, #32]
 800235c:	4618      	mov	r0, r3
 800235e:	f000 fd55 	bl	8002e0c <RCC_SetFlashLatencyFromMSIRange>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e383      	b.n	8002a74 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800236c:	4b73      	ldr	r3, [pc, #460]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a72      	ldr	r2, [pc, #456]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 8002372:	f043 0308 	orr.w	r3, r3, #8
 8002376:	6013      	str	r3, [r2, #0]
 8002378:	4b70      	ldr	r3, [pc, #448]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a1b      	ldr	r3, [r3, #32]
 8002384:	496d      	ldr	r1, [pc, #436]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 8002386:	4313      	orrs	r3, r2
 8002388:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800238a:	4b6c      	ldr	r3, [pc, #432]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	69db      	ldr	r3, [r3, #28]
 8002396:	021b      	lsls	r3, r3, #8
 8002398:	4968      	ldr	r1, [pc, #416]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 800239a:	4313      	orrs	r3, r2
 800239c:	604b      	str	r3, [r1, #4]
 800239e:	e025      	b.n	80023ec <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023a0:	4b66      	ldr	r3, [pc, #408]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a65      	ldr	r2, [pc, #404]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 80023a6:	f043 0308 	orr.w	r3, r3, #8
 80023aa:	6013      	str	r3, [r2, #0]
 80023ac:	4b63      	ldr	r3, [pc, #396]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a1b      	ldr	r3, [r3, #32]
 80023b8:	4960      	ldr	r1, [pc, #384]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023be:	4b5f      	ldr	r3, [pc, #380]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	69db      	ldr	r3, [r3, #28]
 80023ca:	021b      	lsls	r3, r3, #8
 80023cc:	495b      	ldr	r1, [pc, #364]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d109      	bne.n	80023ec <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a1b      	ldr	r3, [r3, #32]
 80023dc:	4618      	mov	r0, r3
 80023de:	f000 fd15 	bl	8002e0c <RCC_SetFlashLatencyFromMSIRange>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e343      	b.n	8002a74 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023ec:	f000 fc4a 	bl	8002c84 <HAL_RCC_GetSysClockFreq>
 80023f0:	4602      	mov	r2, r0
 80023f2:	4b52      	ldr	r3, [pc, #328]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	091b      	lsrs	r3, r3, #4
 80023f8:	f003 030f 	and.w	r3, r3, #15
 80023fc:	4950      	ldr	r1, [pc, #320]	@ (8002540 <HAL_RCC_OscConfig+0x274>)
 80023fe:	5ccb      	ldrb	r3, [r1, r3]
 8002400:	f003 031f 	and.w	r3, r3, #31
 8002404:	fa22 f303 	lsr.w	r3, r2, r3
 8002408:	4a4e      	ldr	r2, [pc, #312]	@ (8002544 <HAL_RCC_OscConfig+0x278>)
 800240a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800240c:	4b4e      	ldr	r3, [pc, #312]	@ (8002548 <HAL_RCC_OscConfig+0x27c>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4618      	mov	r0, r3
 8002412:	f7fe fced 	bl	8000df0 <HAL_InitTick>
 8002416:	4603      	mov	r3, r0
 8002418:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800241a:	7bfb      	ldrb	r3, [r7, #15]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d052      	beq.n	80024c6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002420:	7bfb      	ldrb	r3, [r7, #15]
 8002422:	e327      	b.n	8002a74 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d032      	beq.n	8002492 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800242c:	4b43      	ldr	r3, [pc, #268]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a42      	ldr	r2, [pc, #264]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 8002432:	f043 0301 	orr.w	r3, r3, #1
 8002436:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002438:	f7fe fd2a 	bl	8000e90 <HAL_GetTick>
 800243c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800243e:	e008      	b.n	8002452 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002440:	f7fe fd26 	bl	8000e90 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b02      	cmp	r3, #2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e310      	b.n	8002a74 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002452:	4b3a      	ldr	r3, [pc, #232]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0302 	and.w	r3, r3, #2
 800245a:	2b00      	cmp	r3, #0
 800245c:	d0f0      	beq.n	8002440 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800245e:	4b37      	ldr	r3, [pc, #220]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a36      	ldr	r2, [pc, #216]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 8002464:	f043 0308 	orr.w	r3, r3, #8
 8002468:	6013      	str	r3, [r2, #0]
 800246a:	4b34      	ldr	r3, [pc, #208]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a1b      	ldr	r3, [r3, #32]
 8002476:	4931      	ldr	r1, [pc, #196]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 8002478:	4313      	orrs	r3, r2
 800247a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800247c:	4b2f      	ldr	r3, [pc, #188]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	69db      	ldr	r3, [r3, #28]
 8002488:	021b      	lsls	r3, r3, #8
 800248a:	492c      	ldr	r1, [pc, #176]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 800248c:	4313      	orrs	r3, r2
 800248e:	604b      	str	r3, [r1, #4]
 8002490:	e01a      	b.n	80024c8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002492:	4b2a      	ldr	r3, [pc, #168]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a29      	ldr	r2, [pc, #164]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 8002498:	f023 0301 	bic.w	r3, r3, #1
 800249c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800249e:	f7fe fcf7 	bl	8000e90 <HAL_GetTick>
 80024a2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024a4:	e008      	b.n	80024b8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024a6:	f7fe fcf3 	bl	8000e90 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d901      	bls.n	80024b8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e2dd      	b.n	8002a74 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024b8:	4b20      	ldr	r3, [pc, #128]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d1f0      	bne.n	80024a6 <HAL_RCC_OscConfig+0x1da>
 80024c4:	e000      	b.n	80024c8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024c6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d074      	beq.n	80025be <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	2b08      	cmp	r3, #8
 80024d8:	d005      	beq.n	80024e6 <HAL_RCC_OscConfig+0x21a>
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	2b0c      	cmp	r3, #12
 80024de:	d10e      	bne.n	80024fe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	2b03      	cmp	r3, #3
 80024e4:	d10b      	bne.n	80024fe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e6:	4b15      	ldr	r3, [pc, #84]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d064      	beq.n	80025bc <HAL_RCC_OscConfig+0x2f0>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d160      	bne.n	80025bc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e2ba      	b.n	8002a74 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002506:	d106      	bne.n	8002516 <HAL_RCC_OscConfig+0x24a>
 8002508:	4b0c      	ldr	r3, [pc, #48]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a0b      	ldr	r2, [pc, #44]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 800250e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002512:	6013      	str	r3, [r2, #0]
 8002514:	e026      	b.n	8002564 <HAL_RCC_OscConfig+0x298>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800251e:	d115      	bne.n	800254c <HAL_RCC_OscConfig+0x280>
 8002520:	4b06      	ldr	r3, [pc, #24]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a05      	ldr	r2, [pc, #20]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 8002526:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800252a:	6013      	str	r3, [r2, #0]
 800252c:	4b03      	ldr	r3, [pc, #12]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a02      	ldr	r2, [pc, #8]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 8002532:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002536:	6013      	str	r3, [r2, #0]
 8002538:	e014      	b.n	8002564 <HAL_RCC_OscConfig+0x298>
 800253a:	bf00      	nop
 800253c:	40021000 	.word	0x40021000
 8002540:	08005070 	.word	0x08005070
 8002544:	20000000 	.word	0x20000000
 8002548:	20000004 	.word	0x20000004
 800254c:	4ba0      	ldr	r3, [pc, #640]	@ (80027d0 <HAL_RCC_OscConfig+0x504>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a9f      	ldr	r2, [pc, #636]	@ (80027d0 <HAL_RCC_OscConfig+0x504>)
 8002552:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002556:	6013      	str	r3, [r2, #0]
 8002558:	4b9d      	ldr	r3, [pc, #628]	@ (80027d0 <HAL_RCC_OscConfig+0x504>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a9c      	ldr	r2, [pc, #624]	@ (80027d0 <HAL_RCC_OscConfig+0x504>)
 800255e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002562:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d013      	beq.n	8002594 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800256c:	f7fe fc90 	bl	8000e90 <HAL_GetTick>
 8002570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002572:	e008      	b.n	8002586 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002574:	f7fe fc8c 	bl	8000e90 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b64      	cmp	r3, #100	@ 0x64
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e276      	b.n	8002a74 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002586:	4b92      	ldr	r3, [pc, #584]	@ (80027d0 <HAL_RCC_OscConfig+0x504>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d0f0      	beq.n	8002574 <HAL_RCC_OscConfig+0x2a8>
 8002592:	e014      	b.n	80025be <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002594:	f7fe fc7c 	bl	8000e90 <HAL_GetTick>
 8002598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800259c:	f7fe fc78 	bl	8000e90 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b64      	cmp	r3, #100	@ 0x64
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e262      	b.n	8002a74 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025ae:	4b88      	ldr	r3, [pc, #544]	@ (80027d0 <HAL_RCC_OscConfig+0x504>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1f0      	bne.n	800259c <HAL_RCC_OscConfig+0x2d0>
 80025ba:	e000      	b.n	80025be <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d060      	beq.n	800268c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	2b04      	cmp	r3, #4
 80025ce:	d005      	beq.n	80025dc <HAL_RCC_OscConfig+0x310>
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	2b0c      	cmp	r3, #12
 80025d4:	d119      	bne.n	800260a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d116      	bne.n	800260a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025dc:	4b7c      	ldr	r3, [pc, #496]	@ (80027d0 <HAL_RCC_OscConfig+0x504>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d005      	beq.n	80025f4 <HAL_RCC_OscConfig+0x328>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d101      	bne.n	80025f4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e23f      	b.n	8002a74 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f4:	4b76      	ldr	r3, [pc, #472]	@ (80027d0 <HAL_RCC_OscConfig+0x504>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	061b      	lsls	r3, r3, #24
 8002602:	4973      	ldr	r1, [pc, #460]	@ (80027d0 <HAL_RCC_OscConfig+0x504>)
 8002604:	4313      	orrs	r3, r2
 8002606:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002608:	e040      	b.n	800268c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d023      	beq.n	800265a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002612:	4b6f      	ldr	r3, [pc, #444]	@ (80027d0 <HAL_RCC_OscConfig+0x504>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a6e      	ldr	r2, [pc, #440]	@ (80027d0 <HAL_RCC_OscConfig+0x504>)
 8002618:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800261c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800261e:	f7fe fc37 	bl	8000e90 <HAL_GetTick>
 8002622:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002624:	e008      	b.n	8002638 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002626:	f7fe fc33 	bl	8000e90 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d901      	bls.n	8002638 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e21d      	b.n	8002a74 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002638:	4b65      	ldr	r3, [pc, #404]	@ (80027d0 <HAL_RCC_OscConfig+0x504>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002640:	2b00      	cmp	r3, #0
 8002642:	d0f0      	beq.n	8002626 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002644:	4b62      	ldr	r3, [pc, #392]	@ (80027d0 <HAL_RCC_OscConfig+0x504>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	691b      	ldr	r3, [r3, #16]
 8002650:	061b      	lsls	r3, r3, #24
 8002652:	495f      	ldr	r1, [pc, #380]	@ (80027d0 <HAL_RCC_OscConfig+0x504>)
 8002654:	4313      	orrs	r3, r2
 8002656:	604b      	str	r3, [r1, #4]
 8002658:	e018      	b.n	800268c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800265a:	4b5d      	ldr	r3, [pc, #372]	@ (80027d0 <HAL_RCC_OscConfig+0x504>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a5c      	ldr	r2, [pc, #368]	@ (80027d0 <HAL_RCC_OscConfig+0x504>)
 8002660:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002664:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002666:	f7fe fc13 	bl	8000e90 <HAL_GetTick>
 800266a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800266c:	e008      	b.n	8002680 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800266e:	f7fe fc0f 	bl	8000e90 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d901      	bls.n	8002680 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e1f9      	b.n	8002a74 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002680:	4b53      	ldr	r3, [pc, #332]	@ (80027d0 <HAL_RCC_OscConfig+0x504>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002688:	2b00      	cmp	r3, #0
 800268a:	d1f0      	bne.n	800266e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0308 	and.w	r3, r3, #8
 8002694:	2b00      	cmp	r3, #0
 8002696:	d03c      	beq.n	8002712 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	695b      	ldr	r3, [r3, #20]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d01c      	beq.n	80026da <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026a0:	4b4b      	ldr	r3, [pc, #300]	@ (80027d0 <HAL_RCC_OscConfig+0x504>)
 80026a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026a6:	4a4a      	ldr	r2, [pc, #296]	@ (80027d0 <HAL_RCC_OscConfig+0x504>)
 80026a8:	f043 0301 	orr.w	r3, r3, #1
 80026ac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b0:	f7fe fbee 	bl	8000e90 <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026b8:	f7fe fbea 	bl	8000e90 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e1d4      	b.n	8002a74 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026ca:	4b41      	ldr	r3, [pc, #260]	@ (80027d0 <HAL_RCC_OscConfig+0x504>)
 80026cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d0ef      	beq.n	80026b8 <HAL_RCC_OscConfig+0x3ec>
 80026d8:	e01b      	b.n	8002712 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026da:	4b3d      	ldr	r3, [pc, #244]	@ (80027d0 <HAL_RCC_OscConfig+0x504>)
 80026dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026e0:	4a3b      	ldr	r2, [pc, #236]	@ (80027d0 <HAL_RCC_OscConfig+0x504>)
 80026e2:	f023 0301 	bic.w	r3, r3, #1
 80026e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ea:	f7fe fbd1 	bl	8000e90 <HAL_GetTick>
 80026ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026f0:	e008      	b.n	8002704 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026f2:	f7fe fbcd 	bl	8000e90 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d901      	bls.n	8002704 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e1b7      	b.n	8002a74 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002704:	4b32      	ldr	r3, [pc, #200]	@ (80027d0 <HAL_RCC_OscConfig+0x504>)
 8002706:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d1ef      	bne.n	80026f2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0304 	and.w	r3, r3, #4
 800271a:	2b00      	cmp	r3, #0
 800271c:	f000 80a6 	beq.w	800286c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002720:	2300      	movs	r3, #0
 8002722:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002724:	4b2a      	ldr	r3, [pc, #168]	@ (80027d0 <HAL_RCC_OscConfig+0x504>)
 8002726:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002728:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d10d      	bne.n	800274c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002730:	4b27      	ldr	r3, [pc, #156]	@ (80027d0 <HAL_RCC_OscConfig+0x504>)
 8002732:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002734:	4a26      	ldr	r2, [pc, #152]	@ (80027d0 <HAL_RCC_OscConfig+0x504>)
 8002736:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800273a:	6593      	str	r3, [r2, #88]	@ 0x58
 800273c:	4b24      	ldr	r3, [pc, #144]	@ (80027d0 <HAL_RCC_OscConfig+0x504>)
 800273e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002740:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002744:	60bb      	str	r3, [r7, #8]
 8002746:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002748:	2301      	movs	r3, #1
 800274a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800274c:	4b21      	ldr	r3, [pc, #132]	@ (80027d4 <HAL_RCC_OscConfig+0x508>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002754:	2b00      	cmp	r3, #0
 8002756:	d118      	bne.n	800278a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002758:	4b1e      	ldr	r3, [pc, #120]	@ (80027d4 <HAL_RCC_OscConfig+0x508>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a1d      	ldr	r2, [pc, #116]	@ (80027d4 <HAL_RCC_OscConfig+0x508>)
 800275e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002762:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002764:	f7fe fb94 	bl	8000e90 <HAL_GetTick>
 8002768:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800276a:	e008      	b.n	800277e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800276c:	f7fe fb90 	bl	8000e90 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b02      	cmp	r3, #2
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e17a      	b.n	8002a74 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800277e:	4b15      	ldr	r3, [pc, #84]	@ (80027d4 <HAL_RCC_OscConfig+0x508>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002786:	2b00      	cmp	r3, #0
 8002788:	d0f0      	beq.n	800276c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d108      	bne.n	80027a4 <HAL_RCC_OscConfig+0x4d8>
 8002792:	4b0f      	ldr	r3, [pc, #60]	@ (80027d0 <HAL_RCC_OscConfig+0x504>)
 8002794:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002798:	4a0d      	ldr	r2, [pc, #52]	@ (80027d0 <HAL_RCC_OscConfig+0x504>)
 800279a:	f043 0301 	orr.w	r3, r3, #1
 800279e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027a2:	e029      	b.n	80027f8 <HAL_RCC_OscConfig+0x52c>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	2b05      	cmp	r3, #5
 80027aa:	d115      	bne.n	80027d8 <HAL_RCC_OscConfig+0x50c>
 80027ac:	4b08      	ldr	r3, [pc, #32]	@ (80027d0 <HAL_RCC_OscConfig+0x504>)
 80027ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027b2:	4a07      	ldr	r2, [pc, #28]	@ (80027d0 <HAL_RCC_OscConfig+0x504>)
 80027b4:	f043 0304 	orr.w	r3, r3, #4
 80027b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027bc:	4b04      	ldr	r3, [pc, #16]	@ (80027d0 <HAL_RCC_OscConfig+0x504>)
 80027be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027c2:	4a03      	ldr	r2, [pc, #12]	@ (80027d0 <HAL_RCC_OscConfig+0x504>)
 80027c4:	f043 0301 	orr.w	r3, r3, #1
 80027c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027cc:	e014      	b.n	80027f8 <HAL_RCC_OscConfig+0x52c>
 80027ce:	bf00      	nop
 80027d0:	40021000 	.word	0x40021000
 80027d4:	40007000 	.word	0x40007000
 80027d8:	4b9c      	ldr	r3, [pc, #624]	@ (8002a4c <HAL_RCC_OscConfig+0x780>)
 80027da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027de:	4a9b      	ldr	r2, [pc, #620]	@ (8002a4c <HAL_RCC_OscConfig+0x780>)
 80027e0:	f023 0301 	bic.w	r3, r3, #1
 80027e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027e8:	4b98      	ldr	r3, [pc, #608]	@ (8002a4c <HAL_RCC_OscConfig+0x780>)
 80027ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027ee:	4a97      	ldr	r2, [pc, #604]	@ (8002a4c <HAL_RCC_OscConfig+0x780>)
 80027f0:	f023 0304 	bic.w	r3, r3, #4
 80027f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d016      	beq.n	800282e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002800:	f7fe fb46 	bl	8000e90 <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002806:	e00a      	b.n	800281e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002808:	f7fe fb42 	bl	8000e90 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002816:	4293      	cmp	r3, r2
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e12a      	b.n	8002a74 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800281e:	4b8b      	ldr	r3, [pc, #556]	@ (8002a4c <HAL_RCC_OscConfig+0x780>)
 8002820:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d0ed      	beq.n	8002808 <HAL_RCC_OscConfig+0x53c>
 800282c:	e015      	b.n	800285a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800282e:	f7fe fb2f 	bl	8000e90 <HAL_GetTick>
 8002832:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002834:	e00a      	b.n	800284c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002836:	f7fe fb2b 	bl	8000e90 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002844:	4293      	cmp	r3, r2
 8002846:	d901      	bls.n	800284c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e113      	b.n	8002a74 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800284c:	4b7f      	ldr	r3, [pc, #508]	@ (8002a4c <HAL_RCC_OscConfig+0x780>)
 800284e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1ed      	bne.n	8002836 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800285a:	7ffb      	ldrb	r3, [r7, #31]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d105      	bne.n	800286c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002860:	4b7a      	ldr	r3, [pc, #488]	@ (8002a4c <HAL_RCC_OscConfig+0x780>)
 8002862:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002864:	4a79      	ldr	r2, [pc, #484]	@ (8002a4c <HAL_RCC_OscConfig+0x780>)
 8002866:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800286a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002870:	2b00      	cmp	r3, #0
 8002872:	f000 80fe 	beq.w	8002a72 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800287a:	2b02      	cmp	r3, #2
 800287c:	f040 80d0 	bne.w	8002a20 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002880:	4b72      	ldr	r3, [pc, #456]	@ (8002a4c <HAL_RCC_OscConfig+0x780>)
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	f003 0203 	and.w	r2, r3, #3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002890:	429a      	cmp	r2, r3
 8002892:	d130      	bne.n	80028f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800289e:	3b01      	subs	r3, #1
 80028a0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d127      	bne.n	80028f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028b0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d11f      	bne.n	80028f6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80028c0:	2a07      	cmp	r2, #7
 80028c2:	bf14      	ite	ne
 80028c4:	2201      	movne	r2, #1
 80028c6:	2200      	moveq	r2, #0
 80028c8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d113      	bne.n	80028f6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028d8:	085b      	lsrs	r3, r3, #1
 80028da:	3b01      	subs	r3, #1
 80028dc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80028de:	429a      	cmp	r2, r3
 80028e0:	d109      	bne.n	80028f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ec:	085b      	lsrs	r3, r3, #1
 80028ee:	3b01      	subs	r3, #1
 80028f0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d06e      	beq.n	80029d4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	2b0c      	cmp	r3, #12
 80028fa:	d069      	beq.n	80029d0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80028fc:	4b53      	ldr	r3, [pc, #332]	@ (8002a4c <HAL_RCC_OscConfig+0x780>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d105      	bne.n	8002914 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002908:	4b50      	ldr	r3, [pc, #320]	@ (8002a4c <HAL_RCC_OscConfig+0x780>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d001      	beq.n	8002918 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e0ad      	b.n	8002a74 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002918:	4b4c      	ldr	r3, [pc, #304]	@ (8002a4c <HAL_RCC_OscConfig+0x780>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a4b      	ldr	r2, [pc, #300]	@ (8002a4c <HAL_RCC_OscConfig+0x780>)
 800291e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002922:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002924:	f7fe fab4 	bl	8000e90 <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800292c:	f7fe fab0 	bl	8000e90 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e09a      	b.n	8002a74 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800293e:	4b43      	ldr	r3, [pc, #268]	@ (8002a4c <HAL_RCC_OscConfig+0x780>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1f0      	bne.n	800292c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800294a:	4b40      	ldr	r3, [pc, #256]	@ (8002a4c <HAL_RCC_OscConfig+0x780>)
 800294c:	68da      	ldr	r2, [r3, #12]
 800294e:	4b40      	ldr	r3, [pc, #256]	@ (8002a50 <HAL_RCC_OscConfig+0x784>)
 8002950:	4013      	ands	r3, r2
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800295a:	3a01      	subs	r2, #1
 800295c:	0112      	lsls	r2, r2, #4
 800295e:	4311      	orrs	r1, r2
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002964:	0212      	lsls	r2, r2, #8
 8002966:	4311      	orrs	r1, r2
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800296c:	0852      	lsrs	r2, r2, #1
 800296e:	3a01      	subs	r2, #1
 8002970:	0552      	lsls	r2, r2, #21
 8002972:	4311      	orrs	r1, r2
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002978:	0852      	lsrs	r2, r2, #1
 800297a:	3a01      	subs	r2, #1
 800297c:	0652      	lsls	r2, r2, #25
 800297e:	4311      	orrs	r1, r2
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002984:	0912      	lsrs	r2, r2, #4
 8002986:	0452      	lsls	r2, r2, #17
 8002988:	430a      	orrs	r2, r1
 800298a:	4930      	ldr	r1, [pc, #192]	@ (8002a4c <HAL_RCC_OscConfig+0x780>)
 800298c:	4313      	orrs	r3, r2
 800298e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002990:	4b2e      	ldr	r3, [pc, #184]	@ (8002a4c <HAL_RCC_OscConfig+0x780>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a2d      	ldr	r2, [pc, #180]	@ (8002a4c <HAL_RCC_OscConfig+0x780>)
 8002996:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800299a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800299c:	4b2b      	ldr	r3, [pc, #172]	@ (8002a4c <HAL_RCC_OscConfig+0x780>)
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	4a2a      	ldr	r2, [pc, #168]	@ (8002a4c <HAL_RCC_OscConfig+0x780>)
 80029a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029a6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029a8:	f7fe fa72 	bl	8000e90 <HAL_GetTick>
 80029ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b0:	f7fe fa6e 	bl	8000e90 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e058      	b.n	8002a74 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029c2:	4b22      	ldr	r3, [pc, #136]	@ (8002a4c <HAL_RCC_OscConfig+0x780>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d0f0      	beq.n	80029b0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029ce:	e050      	b.n	8002a72 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e04f      	b.n	8002a74 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029d4:	4b1d      	ldr	r3, [pc, #116]	@ (8002a4c <HAL_RCC_OscConfig+0x780>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d148      	bne.n	8002a72 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80029e0:	4b1a      	ldr	r3, [pc, #104]	@ (8002a4c <HAL_RCC_OscConfig+0x780>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a19      	ldr	r2, [pc, #100]	@ (8002a4c <HAL_RCC_OscConfig+0x780>)
 80029e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029ea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029ec:	4b17      	ldr	r3, [pc, #92]	@ (8002a4c <HAL_RCC_OscConfig+0x780>)
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	4a16      	ldr	r2, [pc, #88]	@ (8002a4c <HAL_RCC_OscConfig+0x780>)
 80029f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029f6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80029f8:	f7fe fa4a 	bl	8000e90 <HAL_GetTick>
 80029fc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029fe:	e008      	b.n	8002a12 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a00:	f7fe fa46 	bl	8000e90 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e030      	b.n	8002a74 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a12:	4b0e      	ldr	r3, [pc, #56]	@ (8002a4c <HAL_RCC_OscConfig+0x780>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d0f0      	beq.n	8002a00 <HAL_RCC_OscConfig+0x734>
 8002a1e:	e028      	b.n	8002a72 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	2b0c      	cmp	r3, #12
 8002a24:	d023      	beq.n	8002a6e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a26:	4b09      	ldr	r3, [pc, #36]	@ (8002a4c <HAL_RCC_OscConfig+0x780>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a08      	ldr	r2, [pc, #32]	@ (8002a4c <HAL_RCC_OscConfig+0x780>)
 8002a2c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a32:	f7fe fa2d 	bl	8000e90 <HAL_GetTick>
 8002a36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a38:	e00c      	b.n	8002a54 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a3a:	f7fe fa29 	bl	8000e90 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d905      	bls.n	8002a54 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e013      	b.n	8002a74 <HAL_RCC_OscConfig+0x7a8>
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a54:	4b09      	ldr	r3, [pc, #36]	@ (8002a7c <HAL_RCC_OscConfig+0x7b0>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d1ec      	bne.n	8002a3a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002a60:	4b06      	ldr	r3, [pc, #24]	@ (8002a7c <HAL_RCC_OscConfig+0x7b0>)
 8002a62:	68da      	ldr	r2, [r3, #12]
 8002a64:	4905      	ldr	r1, [pc, #20]	@ (8002a7c <HAL_RCC_OscConfig+0x7b0>)
 8002a66:	4b06      	ldr	r3, [pc, #24]	@ (8002a80 <HAL_RCC_OscConfig+0x7b4>)
 8002a68:	4013      	ands	r3, r2
 8002a6a:	60cb      	str	r3, [r1, #12]
 8002a6c:	e001      	b.n	8002a72 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e000      	b.n	8002a74 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3720      	adds	r7, #32
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	feeefffc 	.word	0xfeeefffc

08002a84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d101      	bne.n	8002a98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e0e7      	b.n	8002c68 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a98:	4b75      	ldr	r3, [pc, #468]	@ (8002c70 <HAL_RCC_ClockConfig+0x1ec>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0307 	and.w	r3, r3, #7
 8002aa0:	683a      	ldr	r2, [r7, #0]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d910      	bls.n	8002ac8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aa6:	4b72      	ldr	r3, [pc, #456]	@ (8002c70 <HAL_RCC_ClockConfig+0x1ec>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f023 0207 	bic.w	r2, r3, #7
 8002aae:	4970      	ldr	r1, [pc, #448]	@ (8002c70 <HAL_RCC_ClockConfig+0x1ec>)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ab6:	4b6e      	ldr	r3, [pc, #440]	@ (8002c70 <HAL_RCC_ClockConfig+0x1ec>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0307 	and.w	r3, r3, #7
 8002abe:	683a      	ldr	r2, [r7, #0]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d001      	beq.n	8002ac8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e0cf      	b.n	8002c68 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d010      	beq.n	8002af6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	4b66      	ldr	r3, [pc, #408]	@ (8002c74 <HAL_RCC_ClockConfig+0x1f0>)
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d908      	bls.n	8002af6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ae4:	4b63      	ldr	r3, [pc, #396]	@ (8002c74 <HAL_RCC_ClockConfig+0x1f0>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	4960      	ldr	r1, [pc, #384]	@ (8002c74 <HAL_RCC_ClockConfig+0x1f0>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d04c      	beq.n	8002b9c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	2b03      	cmp	r3, #3
 8002b08:	d107      	bne.n	8002b1a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b0a:	4b5a      	ldr	r3, [pc, #360]	@ (8002c74 <HAL_RCC_ClockConfig+0x1f0>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d121      	bne.n	8002b5a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e0a6      	b.n	8002c68 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d107      	bne.n	8002b32 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b22:	4b54      	ldr	r3, [pc, #336]	@ (8002c74 <HAL_RCC_ClockConfig+0x1f0>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d115      	bne.n	8002b5a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e09a      	b.n	8002c68 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d107      	bne.n	8002b4a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b3a:	4b4e      	ldr	r3, [pc, #312]	@ (8002c74 <HAL_RCC_ClockConfig+0x1f0>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d109      	bne.n	8002b5a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e08e      	b.n	8002c68 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b4a:	4b4a      	ldr	r3, [pc, #296]	@ (8002c74 <HAL_RCC_ClockConfig+0x1f0>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e086      	b.n	8002c68 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b5a:	4b46      	ldr	r3, [pc, #280]	@ (8002c74 <HAL_RCC_ClockConfig+0x1f0>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f023 0203 	bic.w	r2, r3, #3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	4943      	ldr	r1, [pc, #268]	@ (8002c74 <HAL_RCC_ClockConfig+0x1f0>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b6c:	f7fe f990 	bl	8000e90 <HAL_GetTick>
 8002b70:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b72:	e00a      	b.n	8002b8a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b74:	f7fe f98c 	bl	8000e90 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e06e      	b.n	8002c68 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b8a:	4b3a      	ldr	r3, [pc, #232]	@ (8002c74 <HAL_RCC_ClockConfig+0x1f0>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f003 020c 	and.w	r2, r3, #12
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d1eb      	bne.n	8002b74 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0302 	and.w	r3, r3, #2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d010      	beq.n	8002bca <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689a      	ldr	r2, [r3, #8]
 8002bac:	4b31      	ldr	r3, [pc, #196]	@ (8002c74 <HAL_RCC_ClockConfig+0x1f0>)
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d208      	bcs.n	8002bca <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bb8:	4b2e      	ldr	r3, [pc, #184]	@ (8002c74 <HAL_RCC_ClockConfig+0x1f0>)
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	492b      	ldr	r1, [pc, #172]	@ (8002c74 <HAL_RCC_ClockConfig+0x1f0>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bca:	4b29      	ldr	r3, [pc, #164]	@ (8002c70 <HAL_RCC_ClockConfig+0x1ec>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0307 	and.w	r3, r3, #7
 8002bd2:	683a      	ldr	r2, [r7, #0]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d210      	bcs.n	8002bfa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bd8:	4b25      	ldr	r3, [pc, #148]	@ (8002c70 <HAL_RCC_ClockConfig+0x1ec>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f023 0207 	bic.w	r2, r3, #7
 8002be0:	4923      	ldr	r1, [pc, #140]	@ (8002c70 <HAL_RCC_ClockConfig+0x1ec>)
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002be8:	4b21      	ldr	r3, [pc, #132]	@ (8002c70 <HAL_RCC_ClockConfig+0x1ec>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0307 	and.w	r3, r3, #7
 8002bf0:	683a      	ldr	r2, [r7, #0]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d001      	beq.n	8002bfa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e036      	b.n	8002c68 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0304 	and.w	r3, r3, #4
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d008      	beq.n	8002c18 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c06:	4b1b      	ldr	r3, [pc, #108]	@ (8002c74 <HAL_RCC_ClockConfig+0x1f0>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	4918      	ldr	r1, [pc, #96]	@ (8002c74 <HAL_RCC_ClockConfig+0x1f0>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0308 	and.w	r3, r3, #8
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d009      	beq.n	8002c38 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c24:	4b13      	ldr	r3, [pc, #76]	@ (8002c74 <HAL_RCC_ClockConfig+0x1f0>)
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	691b      	ldr	r3, [r3, #16]
 8002c30:	00db      	lsls	r3, r3, #3
 8002c32:	4910      	ldr	r1, [pc, #64]	@ (8002c74 <HAL_RCC_ClockConfig+0x1f0>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c38:	f000 f824 	bl	8002c84 <HAL_RCC_GetSysClockFreq>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8002c74 <HAL_RCC_ClockConfig+0x1f0>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	091b      	lsrs	r3, r3, #4
 8002c44:	f003 030f 	and.w	r3, r3, #15
 8002c48:	490b      	ldr	r1, [pc, #44]	@ (8002c78 <HAL_RCC_ClockConfig+0x1f4>)
 8002c4a:	5ccb      	ldrb	r3, [r1, r3]
 8002c4c:	f003 031f 	and.w	r3, r3, #31
 8002c50:	fa22 f303 	lsr.w	r3, r2, r3
 8002c54:	4a09      	ldr	r2, [pc, #36]	@ (8002c7c <HAL_RCC_ClockConfig+0x1f8>)
 8002c56:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c58:	4b09      	ldr	r3, [pc, #36]	@ (8002c80 <HAL_RCC_ClockConfig+0x1fc>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7fe f8c7 	bl	8000df0 <HAL_InitTick>
 8002c62:	4603      	mov	r3, r0
 8002c64:	72fb      	strb	r3, [r7, #11]

  return status;
 8002c66:	7afb      	ldrb	r3, [r7, #11]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3710      	adds	r7, #16
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	40022000 	.word	0x40022000
 8002c74:	40021000 	.word	0x40021000
 8002c78:	08005070 	.word	0x08005070
 8002c7c:	20000000 	.word	0x20000000
 8002c80:	20000004 	.word	0x20000004

08002c84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b089      	sub	sp, #36	@ 0x24
 8002c88:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	61fb      	str	r3, [r7, #28]
 8002c8e:	2300      	movs	r3, #0
 8002c90:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c92:	4b3e      	ldr	r3, [pc, #248]	@ (8002d8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f003 030c 	and.w	r3, r3, #12
 8002c9a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c9c:	4b3b      	ldr	r3, [pc, #236]	@ (8002d8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	f003 0303 	and.w	r3, r3, #3
 8002ca4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d005      	beq.n	8002cb8 <HAL_RCC_GetSysClockFreq+0x34>
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	2b0c      	cmp	r3, #12
 8002cb0:	d121      	bne.n	8002cf6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d11e      	bne.n	8002cf6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002cb8:	4b34      	ldr	r3, [pc, #208]	@ (8002d8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0308 	and.w	r3, r3, #8
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d107      	bne.n	8002cd4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002cc4:	4b31      	ldr	r3, [pc, #196]	@ (8002d8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002cc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cca:	0a1b      	lsrs	r3, r3, #8
 8002ccc:	f003 030f 	and.w	r3, r3, #15
 8002cd0:	61fb      	str	r3, [r7, #28]
 8002cd2:	e005      	b.n	8002ce0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002cd4:	4b2d      	ldr	r3, [pc, #180]	@ (8002d8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	091b      	lsrs	r3, r3, #4
 8002cda:	f003 030f 	and.w	r3, r3, #15
 8002cde:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002ce0:	4a2b      	ldr	r2, [pc, #172]	@ (8002d90 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ce8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d10d      	bne.n	8002d0c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cf4:	e00a      	b.n	8002d0c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	2b04      	cmp	r3, #4
 8002cfa:	d102      	bne.n	8002d02 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002cfc:	4b25      	ldr	r3, [pc, #148]	@ (8002d94 <HAL_RCC_GetSysClockFreq+0x110>)
 8002cfe:	61bb      	str	r3, [r7, #24]
 8002d00:	e004      	b.n	8002d0c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	2b08      	cmp	r3, #8
 8002d06:	d101      	bne.n	8002d0c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d08:	4b23      	ldr	r3, [pc, #140]	@ (8002d98 <HAL_RCC_GetSysClockFreq+0x114>)
 8002d0a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	2b0c      	cmp	r3, #12
 8002d10:	d134      	bne.n	8002d7c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d12:	4b1e      	ldr	r3, [pc, #120]	@ (8002d8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	f003 0303 	and.w	r3, r3, #3
 8002d1a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d003      	beq.n	8002d2a <HAL_RCC_GetSysClockFreq+0xa6>
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	2b03      	cmp	r3, #3
 8002d26:	d003      	beq.n	8002d30 <HAL_RCC_GetSysClockFreq+0xac>
 8002d28:	e005      	b.n	8002d36 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002d2a:	4b1a      	ldr	r3, [pc, #104]	@ (8002d94 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d2c:	617b      	str	r3, [r7, #20]
      break;
 8002d2e:	e005      	b.n	8002d3c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002d30:	4b19      	ldr	r3, [pc, #100]	@ (8002d98 <HAL_RCC_GetSysClockFreq+0x114>)
 8002d32:	617b      	str	r3, [r7, #20]
      break;
 8002d34:	e002      	b.n	8002d3c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	617b      	str	r3, [r7, #20]
      break;
 8002d3a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d3c:	4b13      	ldr	r3, [pc, #76]	@ (8002d8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	091b      	lsrs	r3, r3, #4
 8002d42:	f003 0307 	and.w	r3, r3, #7
 8002d46:	3301      	adds	r3, #1
 8002d48:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d4a:	4b10      	ldr	r3, [pc, #64]	@ (8002d8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	0a1b      	lsrs	r3, r3, #8
 8002d50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d54:	697a      	ldr	r2, [r7, #20]
 8002d56:	fb03 f202 	mul.w	r2, r3, r2
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d60:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d62:	4b0a      	ldr	r3, [pc, #40]	@ (8002d8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	0e5b      	lsrs	r3, r3, #25
 8002d68:	f003 0303 	and.w	r3, r3, #3
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d7a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002d7c:	69bb      	ldr	r3, [r7, #24]
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3724      	adds	r7, #36	@ 0x24
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	40021000 	.word	0x40021000
 8002d90:	08005088 	.word	0x08005088
 8002d94:	00f42400 	.word	0x00f42400
 8002d98:	007a1200 	.word	0x007a1200

08002d9c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002da0:	4b03      	ldr	r3, [pc, #12]	@ (8002db0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002da2:	681b      	ldr	r3, [r3, #0]
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	20000000 	.word	0x20000000

08002db4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002db8:	f7ff fff0 	bl	8002d9c <HAL_RCC_GetHCLKFreq>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	4b06      	ldr	r3, [pc, #24]	@ (8002dd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	0a1b      	lsrs	r3, r3, #8
 8002dc4:	f003 0307 	and.w	r3, r3, #7
 8002dc8:	4904      	ldr	r1, [pc, #16]	@ (8002ddc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002dca:	5ccb      	ldrb	r3, [r1, r3]
 8002dcc:	f003 031f 	and.w	r3, r3, #31
 8002dd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	40021000 	.word	0x40021000
 8002ddc:	08005080 	.word	0x08005080

08002de0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002de4:	f7ff ffda 	bl	8002d9c <HAL_RCC_GetHCLKFreq>
 8002de8:	4602      	mov	r2, r0
 8002dea:	4b06      	ldr	r3, [pc, #24]	@ (8002e04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	0adb      	lsrs	r3, r3, #11
 8002df0:	f003 0307 	and.w	r3, r3, #7
 8002df4:	4904      	ldr	r1, [pc, #16]	@ (8002e08 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002df6:	5ccb      	ldrb	r3, [r1, r3]
 8002df8:	f003 031f 	and.w	r3, r3, #31
 8002dfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	40021000 	.word	0x40021000
 8002e08:	08005080 	.word	0x08005080

08002e0c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b086      	sub	sp, #24
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002e14:	2300      	movs	r3, #0
 8002e16:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002e18:	4b2a      	ldr	r3, [pc, #168]	@ (8002ec4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d003      	beq.n	8002e2c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002e24:	f7ff f9ee 	bl	8002204 <HAL_PWREx_GetVoltageRange>
 8002e28:	6178      	str	r0, [r7, #20]
 8002e2a:	e014      	b.n	8002e56 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e2c:	4b25      	ldr	r3, [pc, #148]	@ (8002ec4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e30:	4a24      	ldr	r2, [pc, #144]	@ (8002ec4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e36:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e38:	4b22      	ldr	r3, [pc, #136]	@ (8002ec4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e40:	60fb      	str	r3, [r7, #12]
 8002e42:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002e44:	f7ff f9de 	bl	8002204 <HAL_PWREx_GetVoltageRange>
 8002e48:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002e4a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ec4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e4e:	4a1d      	ldr	r2, [pc, #116]	@ (8002ec4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e50:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e54:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e5c:	d10b      	bne.n	8002e76 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2b80      	cmp	r3, #128	@ 0x80
 8002e62:	d919      	bls.n	8002e98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2ba0      	cmp	r3, #160	@ 0xa0
 8002e68:	d902      	bls.n	8002e70 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	613b      	str	r3, [r7, #16]
 8002e6e:	e013      	b.n	8002e98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e70:	2301      	movs	r3, #1
 8002e72:	613b      	str	r3, [r7, #16]
 8002e74:	e010      	b.n	8002e98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2b80      	cmp	r3, #128	@ 0x80
 8002e7a:	d902      	bls.n	8002e82 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	613b      	str	r3, [r7, #16]
 8002e80:	e00a      	b.n	8002e98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2b80      	cmp	r3, #128	@ 0x80
 8002e86:	d102      	bne.n	8002e8e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e88:	2302      	movs	r3, #2
 8002e8a:	613b      	str	r3, [r7, #16]
 8002e8c:	e004      	b.n	8002e98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2b70      	cmp	r3, #112	@ 0x70
 8002e92:	d101      	bne.n	8002e98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e94:	2301      	movs	r3, #1
 8002e96:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e98:	4b0b      	ldr	r3, [pc, #44]	@ (8002ec8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f023 0207 	bic.w	r2, r3, #7
 8002ea0:	4909      	ldr	r1, [pc, #36]	@ (8002ec8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002ea8:	4b07      	ldr	r3, [pc, #28]	@ (8002ec8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0307 	and.w	r3, r3, #7
 8002eb0:	693a      	ldr	r2, [r7, #16]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d001      	beq.n	8002eba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e000      	b.n	8002ebc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3718      	adds	r7, #24
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	40021000 	.word	0x40021000
 8002ec8:	40022000 	.word	0x40022000

08002ecc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e049      	b.n	8002f72 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d106      	bne.n	8002ef8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f7fd fecc 	bl	8000c90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2202      	movs	r2, #2
 8002efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	3304      	adds	r3, #4
 8002f08:	4619      	mov	r1, r3
 8002f0a:	4610      	mov	r0, r2
 8002f0c:	f000 f9d6 	bl	80032bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3708      	adds	r7, #8
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
	...

08002f7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d001      	beq.n	8002f94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e04f      	b.n	8003034 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2202      	movs	r2, #2
 8002f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68da      	ldr	r2, [r3, #12]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f042 0201 	orr.w	r2, r2, #1
 8002faa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a23      	ldr	r2, [pc, #140]	@ (8003040 <HAL_TIM_Base_Start_IT+0xc4>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d01d      	beq.n	8002ff2 <HAL_TIM_Base_Start_IT+0x76>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fbe:	d018      	beq.n	8002ff2 <HAL_TIM_Base_Start_IT+0x76>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a1f      	ldr	r2, [pc, #124]	@ (8003044 <HAL_TIM_Base_Start_IT+0xc8>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d013      	beq.n	8002ff2 <HAL_TIM_Base_Start_IT+0x76>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a1e      	ldr	r2, [pc, #120]	@ (8003048 <HAL_TIM_Base_Start_IT+0xcc>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d00e      	beq.n	8002ff2 <HAL_TIM_Base_Start_IT+0x76>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a1c      	ldr	r2, [pc, #112]	@ (800304c <HAL_TIM_Base_Start_IT+0xd0>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d009      	beq.n	8002ff2 <HAL_TIM_Base_Start_IT+0x76>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a1b      	ldr	r2, [pc, #108]	@ (8003050 <HAL_TIM_Base_Start_IT+0xd4>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d004      	beq.n	8002ff2 <HAL_TIM_Base_Start_IT+0x76>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a19      	ldr	r2, [pc, #100]	@ (8003054 <HAL_TIM_Base_Start_IT+0xd8>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d115      	bne.n	800301e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	689a      	ldr	r2, [r3, #8]
 8002ff8:	4b17      	ldr	r3, [pc, #92]	@ (8003058 <HAL_TIM_Base_Start_IT+0xdc>)
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2b06      	cmp	r3, #6
 8003002:	d015      	beq.n	8003030 <HAL_TIM_Base_Start_IT+0xb4>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800300a:	d011      	beq.n	8003030 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f042 0201 	orr.w	r2, r2, #1
 800301a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800301c:	e008      	b.n	8003030 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f042 0201 	orr.w	r2, r2, #1
 800302c:	601a      	str	r2, [r3, #0]
 800302e:	e000      	b.n	8003032 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003030:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	3714      	adds	r7, #20
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr
 8003040:	40012c00 	.word	0x40012c00
 8003044:	40000400 	.word	0x40000400
 8003048:	40000800 	.word	0x40000800
 800304c:	40000c00 	.word	0x40000c00
 8003050:	40013400 	.word	0x40013400
 8003054:	40014000 	.word	0x40014000
 8003058:	00010007 	.word	0x00010007

0800305c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b00      	cmp	r3, #0
 800307c:	d020      	beq.n	80030c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f003 0302 	and.w	r3, r3, #2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d01b      	beq.n	80030c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f06f 0202 	mvn.w	r2, #2
 8003090:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2201      	movs	r2, #1
 8003096:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	f003 0303 	and.w	r3, r3, #3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d003      	beq.n	80030ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 f8e9 	bl	800327e <HAL_TIM_IC_CaptureCallback>
 80030ac:	e005      	b.n	80030ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 f8db 	bl	800326a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f000 f8ec 	bl	8003292 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	f003 0304 	and.w	r3, r3, #4
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d020      	beq.n	800310c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f003 0304 	and.w	r3, r3, #4
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d01b      	beq.n	800310c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f06f 0204 	mvn.w	r2, #4
 80030dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2202      	movs	r2, #2
 80030e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d003      	beq.n	80030fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 f8c3 	bl	800327e <HAL_TIM_IC_CaptureCallback>
 80030f8:	e005      	b.n	8003106 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 f8b5 	bl	800326a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f000 f8c6 	bl	8003292 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	f003 0308 	and.w	r3, r3, #8
 8003112:	2b00      	cmp	r3, #0
 8003114:	d020      	beq.n	8003158 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f003 0308 	and.w	r3, r3, #8
 800311c:	2b00      	cmp	r3, #0
 800311e:	d01b      	beq.n	8003158 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f06f 0208 	mvn.w	r2, #8
 8003128:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2204      	movs	r2, #4
 800312e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	69db      	ldr	r3, [r3, #28]
 8003136:	f003 0303 	and.w	r3, r3, #3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d003      	beq.n	8003146 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 f89d 	bl	800327e <HAL_TIM_IC_CaptureCallback>
 8003144:	e005      	b.n	8003152 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 f88f 	bl	800326a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f000 f8a0 	bl	8003292 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	f003 0310 	and.w	r3, r3, #16
 800315e:	2b00      	cmp	r3, #0
 8003160:	d020      	beq.n	80031a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f003 0310 	and.w	r3, r3, #16
 8003168:	2b00      	cmp	r3, #0
 800316a:	d01b      	beq.n	80031a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f06f 0210 	mvn.w	r2, #16
 8003174:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2208      	movs	r2, #8
 800317a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	69db      	ldr	r3, [r3, #28]
 8003182:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003186:	2b00      	cmp	r3, #0
 8003188:	d003      	beq.n	8003192 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f000 f877 	bl	800327e <HAL_TIM_IC_CaptureCallback>
 8003190:	e005      	b.n	800319e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 f869 	bl	800326a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f000 f87a 	bl	8003292 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00c      	beq.n	80031c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f003 0301 	and.w	r3, r3, #1
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d007      	beq.n	80031c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f06f 0201 	mvn.w	r2, #1
 80031c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f7fd fc96 	bl	8000af4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d104      	bne.n	80031dc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d00c      	beq.n	80031f6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d007      	beq.n	80031f6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80031ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f000 f913 	bl	800341c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d00c      	beq.n	800321a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003206:	2b00      	cmp	r3, #0
 8003208:	d007      	beq.n	800321a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003212:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f000 f90b 	bl	8003430 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003220:	2b00      	cmp	r3, #0
 8003222:	d00c      	beq.n	800323e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800322a:	2b00      	cmp	r3, #0
 800322c:	d007      	beq.n	800323e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003236:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f000 f834 	bl	80032a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	f003 0320 	and.w	r3, r3, #32
 8003244:	2b00      	cmp	r3, #0
 8003246:	d00c      	beq.n	8003262 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f003 0320 	and.w	r3, r3, #32
 800324e:	2b00      	cmp	r3, #0
 8003250:	d007      	beq.n	8003262 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f06f 0220 	mvn.w	r2, #32
 800325a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f000 f8d3 	bl	8003408 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003262:	bf00      	nop
 8003264:	3710      	adds	r7, #16
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800326a:	b480      	push	{r7}
 800326c:	b083      	sub	sp, #12
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003272:	bf00      	nop
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr

0800327e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800327e:	b480      	push	{r7}
 8003280:	b083      	sub	sp, #12
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003286:	bf00      	nop
 8003288:	370c      	adds	r7, #12
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr

08003292 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003292:	b480      	push	{r7}
 8003294:	b083      	sub	sp, #12
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800329a:	bf00      	nop
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr

080032a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032a6:	b480      	push	{r7}
 80032a8:	b083      	sub	sp, #12
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032ae:	bf00      	nop
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
	...

080032bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80032bc:	b480      	push	{r7}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a46      	ldr	r2, [pc, #280]	@ (80033e8 <TIM_Base_SetConfig+0x12c>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d013      	beq.n	80032fc <TIM_Base_SetConfig+0x40>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032da:	d00f      	beq.n	80032fc <TIM_Base_SetConfig+0x40>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a43      	ldr	r2, [pc, #268]	@ (80033ec <TIM_Base_SetConfig+0x130>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d00b      	beq.n	80032fc <TIM_Base_SetConfig+0x40>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a42      	ldr	r2, [pc, #264]	@ (80033f0 <TIM_Base_SetConfig+0x134>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d007      	beq.n	80032fc <TIM_Base_SetConfig+0x40>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a41      	ldr	r2, [pc, #260]	@ (80033f4 <TIM_Base_SetConfig+0x138>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d003      	beq.n	80032fc <TIM_Base_SetConfig+0x40>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a40      	ldr	r2, [pc, #256]	@ (80033f8 <TIM_Base_SetConfig+0x13c>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d108      	bne.n	800330e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003302:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	68fa      	ldr	r2, [r7, #12]
 800330a:	4313      	orrs	r3, r2
 800330c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a35      	ldr	r2, [pc, #212]	@ (80033e8 <TIM_Base_SetConfig+0x12c>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d01f      	beq.n	8003356 <TIM_Base_SetConfig+0x9a>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800331c:	d01b      	beq.n	8003356 <TIM_Base_SetConfig+0x9a>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a32      	ldr	r2, [pc, #200]	@ (80033ec <TIM_Base_SetConfig+0x130>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d017      	beq.n	8003356 <TIM_Base_SetConfig+0x9a>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a31      	ldr	r2, [pc, #196]	@ (80033f0 <TIM_Base_SetConfig+0x134>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d013      	beq.n	8003356 <TIM_Base_SetConfig+0x9a>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a30      	ldr	r2, [pc, #192]	@ (80033f4 <TIM_Base_SetConfig+0x138>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d00f      	beq.n	8003356 <TIM_Base_SetConfig+0x9a>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a2f      	ldr	r2, [pc, #188]	@ (80033f8 <TIM_Base_SetConfig+0x13c>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d00b      	beq.n	8003356 <TIM_Base_SetConfig+0x9a>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a2e      	ldr	r2, [pc, #184]	@ (80033fc <TIM_Base_SetConfig+0x140>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d007      	beq.n	8003356 <TIM_Base_SetConfig+0x9a>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a2d      	ldr	r2, [pc, #180]	@ (8003400 <TIM_Base_SetConfig+0x144>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d003      	beq.n	8003356 <TIM_Base_SetConfig+0x9a>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a2c      	ldr	r2, [pc, #176]	@ (8003404 <TIM_Base_SetConfig+0x148>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d108      	bne.n	8003368 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800335c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	4313      	orrs	r3, r2
 8003366:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	4313      	orrs	r3, r2
 8003374:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4a16      	ldr	r2, [pc, #88]	@ (80033e8 <TIM_Base_SetConfig+0x12c>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d00f      	beq.n	80033b4 <TIM_Base_SetConfig+0xf8>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a18      	ldr	r2, [pc, #96]	@ (80033f8 <TIM_Base_SetConfig+0x13c>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d00b      	beq.n	80033b4 <TIM_Base_SetConfig+0xf8>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a17      	ldr	r2, [pc, #92]	@ (80033fc <TIM_Base_SetConfig+0x140>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d007      	beq.n	80033b4 <TIM_Base_SetConfig+0xf8>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a16      	ldr	r2, [pc, #88]	@ (8003400 <TIM_Base_SetConfig+0x144>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d003      	beq.n	80033b4 <TIM_Base_SetConfig+0xf8>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a15      	ldr	r2, [pc, #84]	@ (8003404 <TIM_Base_SetConfig+0x148>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d103      	bne.n	80033bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	691a      	ldr	r2, [r3, #16]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d105      	bne.n	80033da <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	f023 0201 	bic.w	r2, r3, #1
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	611a      	str	r2, [r3, #16]
  }
}
 80033da:	bf00      	nop
 80033dc:	3714      	adds	r7, #20
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	40012c00 	.word	0x40012c00
 80033ec:	40000400 	.word	0x40000400
 80033f0:	40000800 	.word	0x40000800
 80033f4:	40000c00 	.word	0x40000c00
 80033f8:	40013400 	.word	0x40013400
 80033fc:	40014000 	.word	0x40014000
 8003400:	40014400 	.word	0x40014400
 8003404:	40014800 	.word	0x40014800

08003408 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003424:	bf00      	nop
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003438:	bf00      	nop
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e040      	b.n	80034d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800345a:	2b00      	cmp	r3, #0
 800345c:	d106      	bne.n	800346c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f7fd fb82 	bl	8000b70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2224      	movs	r2, #36	@ 0x24
 8003470:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f022 0201 	bic.w	r2, r2, #1
 8003480:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003486:	2b00      	cmp	r3, #0
 8003488:	d002      	beq.n	8003490 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 fe90 	bl	80041b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f000 fbd5 	bl	8003c40 <UART_SetConfig>
 8003496:	4603      	mov	r3, r0
 8003498:	2b01      	cmp	r3, #1
 800349a:	d101      	bne.n	80034a0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e01b      	b.n	80034d8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	685a      	ldr	r2, [r3, #4]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80034ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	689a      	ldr	r2, [r3, #8]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80034be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f042 0201 	orr.w	r2, r2, #1
 80034ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f000 ff0f 	bl	80042f4 <UART_CheckIdleState>
 80034d6:	4603      	mov	r3, r0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3708      	adds	r7, #8
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b08a      	sub	sp, #40	@ 0x28
 80034e4:	af02      	add	r7, sp, #8
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	603b      	str	r3, [r7, #0]
 80034ec:	4613      	mov	r3, r2
 80034ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034f4:	2b20      	cmp	r3, #32
 80034f6:	d177      	bne.n	80035e8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d002      	beq.n	8003504 <HAL_UART_Transmit+0x24>
 80034fe:	88fb      	ldrh	r3, [r7, #6]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d101      	bne.n	8003508 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e070      	b.n	80035ea <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2221      	movs	r2, #33	@ 0x21
 8003514:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003516:	f7fd fcbb 	bl	8000e90 <HAL_GetTick>
 800351a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	88fa      	ldrh	r2, [r7, #6]
 8003520:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	88fa      	ldrh	r2, [r7, #6]
 8003528:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003534:	d108      	bne.n	8003548 <HAL_UART_Transmit+0x68>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d104      	bne.n	8003548 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800353e:	2300      	movs	r3, #0
 8003540:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	61bb      	str	r3, [r7, #24]
 8003546:	e003      	b.n	8003550 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800354c:	2300      	movs	r3, #0
 800354e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003550:	e02f      	b.n	80035b2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	9300      	str	r3, [sp, #0]
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	2200      	movs	r2, #0
 800355a:	2180      	movs	r1, #128	@ 0x80
 800355c:	68f8      	ldr	r0, [r7, #12]
 800355e:	f000 ff71 	bl	8004444 <UART_WaitOnFlagUntilTimeout>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d004      	beq.n	8003572 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2220      	movs	r2, #32
 800356c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e03b      	b.n	80035ea <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d10b      	bne.n	8003590 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	881a      	ldrh	r2, [r3, #0]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003584:	b292      	uxth	r2, r2
 8003586:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	3302      	adds	r3, #2
 800358c:	61bb      	str	r3, [r7, #24]
 800358e:	e007      	b.n	80035a0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	781a      	ldrb	r2, [r3, #0]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	3301      	adds	r3, #1
 800359e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	3b01      	subs	r3, #1
 80035aa:	b29a      	uxth	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1c9      	bne.n	8003552 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	9300      	str	r3, [sp, #0]
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	2200      	movs	r2, #0
 80035c6:	2140      	movs	r1, #64	@ 0x40
 80035c8:	68f8      	ldr	r0, [r7, #12]
 80035ca:	f000 ff3b 	bl	8004444 <UART_WaitOnFlagUntilTimeout>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d004      	beq.n	80035de <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2220      	movs	r2, #32
 80035d8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e005      	b.n	80035ea <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2220      	movs	r2, #32
 80035e2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80035e4:	2300      	movs	r3, #0
 80035e6:	e000      	b.n	80035ea <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80035e8:	2302      	movs	r3, #2
  }
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3720      	adds	r7, #32
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
	...

080035f4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b0ba      	sub	sp, #232	@ 0xe8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	69db      	ldr	r3, [r3, #28]
 8003602:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800361a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800361e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003622:	4013      	ands	r3, r2
 8003624:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003628:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800362c:	2b00      	cmp	r3, #0
 800362e:	d115      	bne.n	800365c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003630:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003634:	f003 0320 	and.w	r3, r3, #32
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00f      	beq.n	800365c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800363c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003640:	f003 0320 	and.w	r3, r3, #32
 8003644:	2b00      	cmp	r3, #0
 8003646:	d009      	beq.n	800365c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800364c:	2b00      	cmp	r3, #0
 800364e:	f000 82ca 	beq.w	8003be6 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	4798      	blx	r3
      }
      return;
 800365a:	e2c4      	b.n	8003be6 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800365c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003660:	2b00      	cmp	r3, #0
 8003662:	f000 8117 	beq.w	8003894 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003666:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	2b00      	cmp	r3, #0
 8003670:	d106      	bne.n	8003680 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003672:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003676:	4b85      	ldr	r3, [pc, #532]	@ (800388c <HAL_UART_IRQHandler+0x298>)
 8003678:	4013      	ands	r3, r2
 800367a:	2b00      	cmp	r3, #0
 800367c:	f000 810a 	beq.w	8003894 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003680:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	2b00      	cmp	r3, #0
 800368a:	d011      	beq.n	80036b0 <HAL_UART_IRQHandler+0xbc>
 800368c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003690:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00b      	beq.n	80036b0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2201      	movs	r2, #1
 800369e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036a6:	f043 0201 	orr.w	r2, r3, #1
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80036b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036b4:	f003 0302 	and.w	r3, r3, #2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d011      	beq.n	80036e0 <HAL_UART_IRQHandler+0xec>
 80036bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036c0:	f003 0301 	and.w	r3, r3, #1
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d00b      	beq.n	80036e0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2202      	movs	r2, #2
 80036ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036d6:	f043 0204 	orr.w	r2, r3, #4
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80036e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036e4:	f003 0304 	and.w	r3, r3, #4
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d011      	beq.n	8003710 <HAL_UART_IRQHandler+0x11c>
 80036ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036f0:	f003 0301 	and.w	r3, r3, #1
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d00b      	beq.n	8003710 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2204      	movs	r2, #4
 80036fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003706:	f043 0202 	orr.w	r2, r3, #2
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003710:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003714:	f003 0308 	and.w	r3, r3, #8
 8003718:	2b00      	cmp	r3, #0
 800371a:	d017      	beq.n	800374c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800371c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003720:	f003 0320 	and.w	r3, r3, #32
 8003724:	2b00      	cmp	r3, #0
 8003726:	d105      	bne.n	8003734 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003728:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800372c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003730:	2b00      	cmp	r3, #0
 8003732:	d00b      	beq.n	800374c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2208      	movs	r2, #8
 800373a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003742:	f043 0208 	orr.w	r2, r3, #8
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800374c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003750:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003754:	2b00      	cmp	r3, #0
 8003756:	d012      	beq.n	800377e <HAL_UART_IRQHandler+0x18a>
 8003758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800375c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d00c      	beq.n	800377e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800376c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003774:	f043 0220 	orr.w	r2, r3, #32
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003784:	2b00      	cmp	r3, #0
 8003786:	f000 8230 	beq.w	8003bea <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800378a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800378e:	f003 0320 	and.w	r3, r3, #32
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00d      	beq.n	80037b2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003796:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800379a:	f003 0320 	and.w	r3, r3, #32
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d007      	beq.n	80037b2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d003      	beq.n	80037b2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037b8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037c6:	2b40      	cmp	r3, #64	@ 0x40
 80037c8:	d005      	beq.n	80037d6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80037ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80037ce:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d04f      	beq.n	8003876 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 fea1 	bl	800451e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037e6:	2b40      	cmp	r3, #64	@ 0x40
 80037e8:	d141      	bne.n	800386e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	3308      	adds	r3, #8
 80037f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80037f8:	e853 3f00 	ldrex	r3, [r3]
 80037fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003800:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003804:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003808:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	3308      	adds	r3, #8
 8003812:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003816:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800381a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800381e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003822:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003826:	e841 2300 	strex	r3, r2, [r1]
 800382a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800382e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d1d9      	bne.n	80037ea <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800383a:	2b00      	cmp	r3, #0
 800383c:	d013      	beq.n	8003866 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003842:	4a13      	ldr	r2, [pc, #76]	@ (8003890 <HAL_UART_IRQHandler+0x29c>)
 8003844:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800384a:	4618      	mov	r0, r3
 800384c:	f7fe fab0 	bl	8001db0 <HAL_DMA_Abort_IT>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d017      	beq.n	8003886 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800385a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003860:	4610      	mov	r0, r2
 8003862:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003864:	e00f      	b.n	8003886 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 f9d4 	bl	8003c14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800386c:	e00b      	b.n	8003886 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 f9d0 	bl	8003c14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003874:	e007      	b.n	8003886 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 f9cc 	bl	8003c14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003884:	e1b1      	b.n	8003bea <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003886:	bf00      	nop
    return;
 8003888:	e1af      	b.n	8003bea <HAL_UART_IRQHandler+0x5f6>
 800388a:	bf00      	nop
 800388c:	04000120 	.word	0x04000120
 8003890:	080045e7 	.word	0x080045e7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003898:	2b01      	cmp	r3, #1
 800389a:	f040 816a 	bne.w	8003b72 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800389e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038a2:	f003 0310 	and.w	r3, r3, #16
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	f000 8163 	beq.w	8003b72 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80038ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038b0:	f003 0310 	and.w	r3, r3, #16
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f000 815c 	beq.w	8003b72 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2210      	movs	r2, #16
 80038c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038cc:	2b40      	cmp	r3, #64	@ 0x40
 80038ce:	f040 80d4 	bne.w	8003a7a <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80038de:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	f000 80ad 	beq.w	8003a42 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80038ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80038f2:	429a      	cmp	r2, r3
 80038f4:	f080 80a5 	bcs.w	8003a42 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80038fe:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0320 	and.w	r3, r3, #32
 800390e:	2b00      	cmp	r3, #0
 8003910:	f040 8086 	bne.w	8003a20 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800391c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003920:	e853 3f00 	ldrex	r3, [r3]
 8003924:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003928:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800392c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003930:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	461a      	mov	r2, r3
 800393a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800393e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003942:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003946:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800394a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800394e:	e841 2300 	strex	r3, r2, [r1]
 8003952:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003956:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1da      	bne.n	8003914 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	3308      	adds	r3, #8
 8003964:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003966:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003968:	e853 3f00 	ldrex	r3, [r3]
 800396c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800396e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003970:	f023 0301 	bic.w	r3, r3, #1
 8003974:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	3308      	adds	r3, #8
 800397e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003982:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003986:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003988:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800398a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800398e:	e841 2300 	strex	r3, r2, [r1]
 8003992:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003994:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1e1      	bne.n	800395e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	3308      	adds	r3, #8
 80039a0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80039a4:	e853 3f00 	ldrex	r3, [r3]
 80039a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80039aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80039b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	3308      	adds	r3, #8
 80039ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80039be:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80039c0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80039c4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80039c6:	e841 2300 	strex	r3, r2, [r1]
 80039ca:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80039cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d1e3      	bne.n	800399a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2220      	movs	r2, #32
 80039d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039e8:	e853 3f00 	ldrex	r3, [r3]
 80039ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80039ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039f0:	f023 0310 	bic.w	r3, r3, #16
 80039f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	461a      	mov	r2, r3
 80039fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003a02:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003a04:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a06:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003a08:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003a0a:	e841 2300 	strex	r3, r2, [r1]
 8003a0e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003a10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1e4      	bne.n	80039e0 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7fe f98a 	bl	8001d34 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2202      	movs	r2, #2
 8003a24:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	4619      	mov	r1, r3
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f000 f8f4 	bl	8003c28 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003a40:	e0d5      	b.n	8003bee <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003a48:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	f040 80ce 	bne.w	8003bee <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0320 	and.w	r3, r3, #32
 8003a5e:	2b20      	cmp	r3, #32
 8003a60:	f040 80c5 	bne.w	8003bee <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2202      	movs	r2, #2
 8003a68:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003a70:	4619      	mov	r1, r3
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 f8d8 	bl	8003c28 <HAL_UARTEx_RxEventCallback>
      return;
 8003a78:	e0b9      	b.n	8003bee <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	f000 80ab 	beq.w	8003bf2 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8003a9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	f000 80a6 	beq.w	8003bf2 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aae:	e853 3f00 	ldrex	r3, [r3]
 8003ab2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003ab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ab6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003aba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003ac8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003aca:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003acc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003ace:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ad0:	e841 2300 	strex	r3, r2, [r1]
 8003ad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003ad6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d1e4      	bne.n	8003aa6 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	3308      	adds	r3, #8
 8003ae2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae6:	e853 3f00 	ldrex	r3, [r3]
 8003aea:	623b      	str	r3, [r7, #32]
   return(result);
 8003aec:	6a3b      	ldr	r3, [r7, #32]
 8003aee:	f023 0301 	bic.w	r3, r3, #1
 8003af2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	3308      	adds	r3, #8
 8003afc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003b00:	633a      	str	r2, [r7, #48]	@ 0x30
 8003b02:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b04:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b08:	e841 2300 	strex	r3, r2, [r1]
 8003b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d1e3      	bne.n	8003adc <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2220      	movs	r2, #32
 8003b18:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	e853 3f00 	ldrex	r3, [r3]
 8003b34:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f023 0310 	bic.w	r3, r3, #16
 8003b3c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	461a      	mov	r2, r3
 8003b46:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003b4a:	61fb      	str	r3, [r7, #28]
 8003b4c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b4e:	69b9      	ldr	r1, [r7, #24]
 8003b50:	69fa      	ldr	r2, [r7, #28]
 8003b52:	e841 2300 	strex	r3, r2, [r1]
 8003b56:	617b      	str	r3, [r7, #20]
   return(result);
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1e4      	bne.n	8003b28 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2202      	movs	r2, #2
 8003b62:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003b68:	4619      	mov	r1, r3
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 f85c 	bl	8003c28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003b70:	e03f      	b.n	8003bf2 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003b72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00e      	beq.n	8003b9c <HAL_UART_IRQHandler+0x5a8>
 8003b7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d008      	beq.n	8003b9c <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003b92:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f000 fd66 	bl	8004666 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003b9a:	e02d      	b.n	8003bf8 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003b9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ba0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d00e      	beq.n	8003bc6 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003ba8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d008      	beq.n	8003bc6 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d01c      	beq.n	8003bf6 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	4798      	blx	r3
    }
    return;
 8003bc4:	e017      	b.n	8003bf6 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003bc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d012      	beq.n	8003bf8 <HAL_UART_IRQHandler+0x604>
 8003bd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00c      	beq.n	8003bf8 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 fd17 	bl	8004612 <UART_EndTransmit_IT>
    return;
 8003be4:	e008      	b.n	8003bf8 <HAL_UART_IRQHandler+0x604>
      return;
 8003be6:	bf00      	nop
 8003be8:	e006      	b.n	8003bf8 <HAL_UART_IRQHandler+0x604>
    return;
 8003bea:	bf00      	nop
 8003bec:	e004      	b.n	8003bf8 <HAL_UART_IRQHandler+0x604>
      return;
 8003bee:	bf00      	nop
 8003bf0:	e002      	b.n	8003bf8 <HAL_UART_IRQHandler+0x604>
      return;
 8003bf2:	bf00      	nop
 8003bf4:	e000      	b.n	8003bf8 <HAL_UART_IRQHandler+0x604>
    return;
 8003bf6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003bf8:	37e8      	adds	r7, #232	@ 0xe8
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop

08003c00 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003c1c:	bf00      	nop
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	460b      	mov	r3, r1
 8003c32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c34:	bf00      	nop
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c44:	b08a      	sub	sp, #40	@ 0x28
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	689a      	ldr	r2, [r3, #8]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	691b      	ldr	r3, [r3, #16]
 8003c58:	431a      	orrs	r2, r3
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	431a      	orrs	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	69db      	ldr	r3, [r3, #28]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	4ba4      	ldr	r3, [pc, #656]	@ (8003f00 <UART_SetConfig+0x2c0>)
 8003c70:	4013      	ands	r3, r2
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	6812      	ldr	r2, [r2, #0]
 8003c76:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003c78:	430b      	orrs	r3, r1
 8003c7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	68da      	ldr	r2, [r3, #12]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a99      	ldr	r2, [pc, #612]	@ (8003f04 <UART_SetConfig+0x2c4>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d004      	beq.n	8003cac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a90      	ldr	r2, [pc, #576]	@ (8003f08 <UART_SetConfig+0x2c8>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d126      	bne.n	8003d18 <UART_SetConfig+0xd8>
 8003cca:	4b90      	ldr	r3, [pc, #576]	@ (8003f0c <UART_SetConfig+0x2cc>)
 8003ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cd0:	f003 0303 	and.w	r3, r3, #3
 8003cd4:	2b03      	cmp	r3, #3
 8003cd6:	d81b      	bhi.n	8003d10 <UART_SetConfig+0xd0>
 8003cd8:	a201      	add	r2, pc, #4	@ (adr r2, 8003ce0 <UART_SetConfig+0xa0>)
 8003cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cde:	bf00      	nop
 8003ce0:	08003cf1 	.word	0x08003cf1
 8003ce4:	08003d01 	.word	0x08003d01
 8003ce8:	08003cf9 	.word	0x08003cf9
 8003cec:	08003d09 	.word	0x08003d09
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cf6:	e116      	b.n	8003f26 <UART_SetConfig+0x2e6>
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cfe:	e112      	b.n	8003f26 <UART_SetConfig+0x2e6>
 8003d00:	2304      	movs	r3, #4
 8003d02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d06:	e10e      	b.n	8003f26 <UART_SetConfig+0x2e6>
 8003d08:	2308      	movs	r3, #8
 8003d0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d0e:	e10a      	b.n	8003f26 <UART_SetConfig+0x2e6>
 8003d10:	2310      	movs	r3, #16
 8003d12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d16:	e106      	b.n	8003f26 <UART_SetConfig+0x2e6>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a7c      	ldr	r2, [pc, #496]	@ (8003f10 <UART_SetConfig+0x2d0>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d138      	bne.n	8003d94 <UART_SetConfig+0x154>
 8003d22:	4b7a      	ldr	r3, [pc, #488]	@ (8003f0c <UART_SetConfig+0x2cc>)
 8003d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d28:	f003 030c 	and.w	r3, r3, #12
 8003d2c:	2b0c      	cmp	r3, #12
 8003d2e:	d82d      	bhi.n	8003d8c <UART_SetConfig+0x14c>
 8003d30:	a201      	add	r2, pc, #4	@ (adr r2, 8003d38 <UART_SetConfig+0xf8>)
 8003d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d36:	bf00      	nop
 8003d38:	08003d6d 	.word	0x08003d6d
 8003d3c:	08003d8d 	.word	0x08003d8d
 8003d40:	08003d8d 	.word	0x08003d8d
 8003d44:	08003d8d 	.word	0x08003d8d
 8003d48:	08003d7d 	.word	0x08003d7d
 8003d4c:	08003d8d 	.word	0x08003d8d
 8003d50:	08003d8d 	.word	0x08003d8d
 8003d54:	08003d8d 	.word	0x08003d8d
 8003d58:	08003d75 	.word	0x08003d75
 8003d5c:	08003d8d 	.word	0x08003d8d
 8003d60:	08003d8d 	.word	0x08003d8d
 8003d64:	08003d8d 	.word	0x08003d8d
 8003d68:	08003d85 	.word	0x08003d85
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d72:	e0d8      	b.n	8003f26 <UART_SetConfig+0x2e6>
 8003d74:	2302      	movs	r3, #2
 8003d76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d7a:	e0d4      	b.n	8003f26 <UART_SetConfig+0x2e6>
 8003d7c:	2304      	movs	r3, #4
 8003d7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d82:	e0d0      	b.n	8003f26 <UART_SetConfig+0x2e6>
 8003d84:	2308      	movs	r3, #8
 8003d86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d8a:	e0cc      	b.n	8003f26 <UART_SetConfig+0x2e6>
 8003d8c:	2310      	movs	r3, #16
 8003d8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d92:	e0c8      	b.n	8003f26 <UART_SetConfig+0x2e6>
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a5e      	ldr	r2, [pc, #376]	@ (8003f14 <UART_SetConfig+0x2d4>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d125      	bne.n	8003dea <UART_SetConfig+0x1aa>
 8003d9e:	4b5b      	ldr	r3, [pc, #364]	@ (8003f0c <UART_SetConfig+0x2cc>)
 8003da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003da4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003da8:	2b30      	cmp	r3, #48	@ 0x30
 8003daa:	d016      	beq.n	8003dda <UART_SetConfig+0x19a>
 8003dac:	2b30      	cmp	r3, #48	@ 0x30
 8003dae:	d818      	bhi.n	8003de2 <UART_SetConfig+0x1a2>
 8003db0:	2b20      	cmp	r3, #32
 8003db2:	d00a      	beq.n	8003dca <UART_SetConfig+0x18a>
 8003db4:	2b20      	cmp	r3, #32
 8003db6:	d814      	bhi.n	8003de2 <UART_SetConfig+0x1a2>
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d002      	beq.n	8003dc2 <UART_SetConfig+0x182>
 8003dbc:	2b10      	cmp	r3, #16
 8003dbe:	d008      	beq.n	8003dd2 <UART_SetConfig+0x192>
 8003dc0:	e00f      	b.n	8003de2 <UART_SetConfig+0x1a2>
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dc8:	e0ad      	b.n	8003f26 <UART_SetConfig+0x2e6>
 8003dca:	2302      	movs	r3, #2
 8003dcc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dd0:	e0a9      	b.n	8003f26 <UART_SetConfig+0x2e6>
 8003dd2:	2304      	movs	r3, #4
 8003dd4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dd8:	e0a5      	b.n	8003f26 <UART_SetConfig+0x2e6>
 8003dda:	2308      	movs	r3, #8
 8003ddc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003de0:	e0a1      	b.n	8003f26 <UART_SetConfig+0x2e6>
 8003de2:	2310      	movs	r3, #16
 8003de4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003de8:	e09d      	b.n	8003f26 <UART_SetConfig+0x2e6>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a4a      	ldr	r2, [pc, #296]	@ (8003f18 <UART_SetConfig+0x2d8>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d125      	bne.n	8003e40 <UART_SetConfig+0x200>
 8003df4:	4b45      	ldr	r3, [pc, #276]	@ (8003f0c <UART_SetConfig+0x2cc>)
 8003df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dfa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003dfe:	2bc0      	cmp	r3, #192	@ 0xc0
 8003e00:	d016      	beq.n	8003e30 <UART_SetConfig+0x1f0>
 8003e02:	2bc0      	cmp	r3, #192	@ 0xc0
 8003e04:	d818      	bhi.n	8003e38 <UART_SetConfig+0x1f8>
 8003e06:	2b80      	cmp	r3, #128	@ 0x80
 8003e08:	d00a      	beq.n	8003e20 <UART_SetConfig+0x1e0>
 8003e0a:	2b80      	cmp	r3, #128	@ 0x80
 8003e0c:	d814      	bhi.n	8003e38 <UART_SetConfig+0x1f8>
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d002      	beq.n	8003e18 <UART_SetConfig+0x1d8>
 8003e12:	2b40      	cmp	r3, #64	@ 0x40
 8003e14:	d008      	beq.n	8003e28 <UART_SetConfig+0x1e8>
 8003e16:	e00f      	b.n	8003e38 <UART_SetConfig+0x1f8>
 8003e18:	2300      	movs	r3, #0
 8003e1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e1e:	e082      	b.n	8003f26 <UART_SetConfig+0x2e6>
 8003e20:	2302      	movs	r3, #2
 8003e22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e26:	e07e      	b.n	8003f26 <UART_SetConfig+0x2e6>
 8003e28:	2304      	movs	r3, #4
 8003e2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e2e:	e07a      	b.n	8003f26 <UART_SetConfig+0x2e6>
 8003e30:	2308      	movs	r3, #8
 8003e32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e36:	e076      	b.n	8003f26 <UART_SetConfig+0x2e6>
 8003e38:	2310      	movs	r3, #16
 8003e3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e3e:	e072      	b.n	8003f26 <UART_SetConfig+0x2e6>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a35      	ldr	r2, [pc, #212]	@ (8003f1c <UART_SetConfig+0x2dc>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d12a      	bne.n	8003ea0 <UART_SetConfig+0x260>
 8003e4a:	4b30      	ldr	r3, [pc, #192]	@ (8003f0c <UART_SetConfig+0x2cc>)
 8003e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e50:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e54:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e58:	d01a      	beq.n	8003e90 <UART_SetConfig+0x250>
 8003e5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e5e:	d81b      	bhi.n	8003e98 <UART_SetConfig+0x258>
 8003e60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e64:	d00c      	beq.n	8003e80 <UART_SetConfig+0x240>
 8003e66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e6a:	d815      	bhi.n	8003e98 <UART_SetConfig+0x258>
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d003      	beq.n	8003e78 <UART_SetConfig+0x238>
 8003e70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e74:	d008      	beq.n	8003e88 <UART_SetConfig+0x248>
 8003e76:	e00f      	b.n	8003e98 <UART_SetConfig+0x258>
 8003e78:	2300      	movs	r3, #0
 8003e7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e7e:	e052      	b.n	8003f26 <UART_SetConfig+0x2e6>
 8003e80:	2302      	movs	r3, #2
 8003e82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e86:	e04e      	b.n	8003f26 <UART_SetConfig+0x2e6>
 8003e88:	2304      	movs	r3, #4
 8003e8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e8e:	e04a      	b.n	8003f26 <UART_SetConfig+0x2e6>
 8003e90:	2308      	movs	r3, #8
 8003e92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e96:	e046      	b.n	8003f26 <UART_SetConfig+0x2e6>
 8003e98:	2310      	movs	r3, #16
 8003e9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e9e:	e042      	b.n	8003f26 <UART_SetConfig+0x2e6>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a17      	ldr	r2, [pc, #92]	@ (8003f04 <UART_SetConfig+0x2c4>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d13a      	bne.n	8003f20 <UART_SetConfig+0x2e0>
 8003eaa:	4b18      	ldr	r3, [pc, #96]	@ (8003f0c <UART_SetConfig+0x2cc>)
 8003eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eb0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003eb4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003eb8:	d01a      	beq.n	8003ef0 <UART_SetConfig+0x2b0>
 8003eba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ebe:	d81b      	bhi.n	8003ef8 <UART_SetConfig+0x2b8>
 8003ec0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ec4:	d00c      	beq.n	8003ee0 <UART_SetConfig+0x2a0>
 8003ec6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003eca:	d815      	bhi.n	8003ef8 <UART_SetConfig+0x2b8>
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d003      	beq.n	8003ed8 <UART_SetConfig+0x298>
 8003ed0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ed4:	d008      	beq.n	8003ee8 <UART_SetConfig+0x2a8>
 8003ed6:	e00f      	b.n	8003ef8 <UART_SetConfig+0x2b8>
 8003ed8:	2300      	movs	r3, #0
 8003eda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ede:	e022      	b.n	8003f26 <UART_SetConfig+0x2e6>
 8003ee0:	2302      	movs	r3, #2
 8003ee2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ee6:	e01e      	b.n	8003f26 <UART_SetConfig+0x2e6>
 8003ee8:	2304      	movs	r3, #4
 8003eea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003eee:	e01a      	b.n	8003f26 <UART_SetConfig+0x2e6>
 8003ef0:	2308      	movs	r3, #8
 8003ef2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ef6:	e016      	b.n	8003f26 <UART_SetConfig+0x2e6>
 8003ef8:	2310      	movs	r3, #16
 8003efa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003efe:	e012      	b.n	8003f26 <UART_SetConfig+0x2e6>
 8003f00:	efff69f3 	.word	0xefff69f3
 8003f04:	40008000 	.word	0x40008000
 8003f08:	40013800 	.word	0x40013800
 8003f0c:	40021000 	.word	0x40021000
 8003f10:	40004400 	.word	0x40004400
 8003f14:	40004800 	.word	0x40004800
 8003f18:	40004c00 	.word	0x40004c00
 8003f1c:	40005000 	.word	0x40005000
 8003f20:	2310      	movs	r3, #16
 8003f22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a9f      	ldr	r2, [pc, #636]	@ (80041a8 <UART_SetConfig+0x568>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d17a      	bne.n	8004026 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003f30:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003f34:	2b08      	cmp	r3, #8
 8003f36:	d824      	bhi.n	8003f82 <UART_SetConfig+0x342>
 8003f38:	a201      	add	r2, pc, #4	@ (adr r2, 8003f40 <UART_SetConfig+0x300>)
 8003f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f3e:	bf00      	nop
 8003f40:	08003f65 	.word	0x08003f65
 8003f44:	08003f83 	.word	0x08003f83
 8003f48:	08003f6d 	.word	0x08003f6d
 8003f4c:	08003f83 	.word	0x08003f83
 8003f50:	08003f73 	.word	0x08003f73
 8003f54:	08003f83 	.word	0x08003f83
 8003f58:	08003f83 	.word	0x08003f83
 8003f5c:	08003f83 	.word	0x08003f83
 8003f60:	08003f7b 	.word	0x08003f7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f64:	f7fe ff26 	bl	8002db4 <HAL_RCC_GetPCLK1Freq>
 8003f68:	61f8      	str	r0, [r7, #28]
        break;
 8003f6a:	e010      	b.n	8003f8e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f6c:	4b8f      	ldr	r3, [pc, #572]	@ (80041ac <UART_SetConfig+0x56c>)
 8003f6e:	61fb      	str	r3, [r7, #28]
        break;
 8003f70:	e00d      	b.n	8003f8e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f72:	f7fe fe87 	bl	8002c84 <HAL_RCC_GetSysClockFreq>
 8003f76:	61f8      	str	r0, [r7, #28]
        break;
 8003f78:	e009      	b.n	8003f8e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f7e:	61fb      	str	r3, [r7, #28]
        break;
 8003f80:	e005      	b.n	8003f8e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003f82:	2300      	movs	r3, #0
 8003f84:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003f8c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	f000 80fb 	beq.w	800418c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	685a      	ldr	r2, [r3, #4]
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	005b      	lsls	r3, r3, #1
 8003f9e:	4413      	add	r3, r2
 8003fa0:	69fa      	ldr	r2, [r7, #28]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d305      	bcc.n	8003fb2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003fac:	69fa      	ldr	r2, [r7, #28]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d903      	bls.n	8003fba <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003fb8:	e0e8      	b.n	800418c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	461c      	mov	r4, r3
 8003fc0:	4615      	mov	r5, r2
 8003fc2:	f04f 0200 	mov.w	r2, #0
 8003fc6:	f04f 0300 	mov.w	r3, #0
 8003fca:	022b      	lsls	r3, r5, #8
 8003fcc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003fd0:	0222      	lsls	r2, r4, #8
 8003fd2:	68f9      	ldr	r1, [r7, #12]
 8003fd4:	6849      	ldr	r1, [r1, #4]
 8003fd6:	0849      	lsrs	r1, r1, #1
 8003fd8:	2000      	movs	r0, #0
 8003fda:	4688      	mov	r8, r1
 8003fdc:	4681      	mov	r9, r0
 8003fde:	eb12 0a08 	adds.w	sl, r2, r8
 8003fe2:	eb43 0b09 	adc.w	fp, r3, r9
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	603b      	str	r3, [r7, #0]
 8003fee:	607a      	str	r2, [r7, #4]
 8003ff0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ff4:	4650      	mov	r0, sl
 8003ff6:	4659      	mov	r1, fp
 8003ff8:	f7fc f942 	bl	8000280 <__aeabi_uldivmod>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	460b      	mov	r3, r1
 8004000:	4613      	mov	r3, r2
 8004002:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800400a:	d308      	bcc.n	800401e <UART_SetConfig+0x3de>
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004012:	d204      	bcs.n	800401e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	69ba      	ldr	r2, [r7, #24]
 800401a:	60da      	str	r2, [r3, #12]
 800401c:	e0b6      	b.n	800418c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004024:	e0b2      	b.n	800418c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	69db      	ldr	r3, [r3, #28]
 800402a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800402e:	d15e      	bne.n	80040ee <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004030:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004034:	2b08      	cmp	r3, #8
 8004036:	d828      	bhi.n	800408a <UART_SetConfig+0x44a>
 8004038:	a201      	add	r2, pc, #4	@ (adr r2, 8004040 <UART_SetConfig+0x400>)
 800403a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800403e:	bf00      	nop
 8004040:	08004065 	.word	0x08004065
 8004044:	0800406d 	.word	0x0800406d
 8004048:	08004075 	.word	0x08004075
 800404c:	0800408b 	.word	0x0800408b
 8004050:	0800407b 	.word	0x0800407b
 8004054:	0800408b 	.word	0x0800408b
 8004058:	0800408b 	.word	0x0800408b
 800405c:	0800408b 	.word	0x0800408b
 8004060:	08004083 	.word	0x08004083
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004064:	f7fe fea6 	bl	8002db4 <HAL_RCC_GetPCLK1Freq>
 8004068:	61f8      	str	r0, [r7, #28]
        break;
 800406a:	e014      	b.n	8004096 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800406c:	f7fe feb8 	bl	8002de0 <HAL_RCC_GetPCLK2Freq>
 8004070:	61f8      	str	r0, [r7, #28]
        break;
 8004072:	e010      	b.n	8004096 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004074:	4b4d      	ldr	r3, [pc, #308]	@ (80041ac <UART_SetConfig+0x56c>)
 8004076:	61fb      	str	r3, [r7, #28]
        break;
 8004078:	e00d      	b.n	8004096 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800407a:	f7fe fe03 	bl	8002c84 <HAL_RCC_GetSysClockFreq>
 800407e:	61f8      	str	r0, [r7, #28]
        break;
 8004080:	e009      	b.n	8004096 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004082:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004086:	61fb      	str	r3, [r7, #28]
        break;
 8004088:	e005      	b.n	8004096 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800408a:	2300      	movs	r3, #0
 800408c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004094:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d077      	beq.n	800418c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	005a      	lsls	r2, r3, #1
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	085b      	lsrs	r3, r3, #1
 80040a6:	441a      	add	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	2b0f      	cmp	r3, #15
 80040b6:	d916      	bls.n	80040e6 <UART_SetConfig+0x4a6>
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040be:	d212      	bcs.n	80040e6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	f023 030f 	bic.w	r3, r3, #15
 80040c8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	085b      	lsrs	r3, r3, #1
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	f003 0307 	and.w	r3, r3, #7
 80040d4:	b29a      	uxth	r2, r3
 80040d6:	8afb      	ldrh	r3, [r7, #22]
 80040d8:	4313      	orrs	r3, r2
 80040da:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	8afa      	ldrh	r2, [r7, #22]
 80040e2:	60da      	str	r2, [r3, #12]
 80040e4:	e052      	b.n	800418c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80040ec:	e04e      	b.n	800418c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80040ee:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80040f2:	2b08      	cmp	r3, #8
 80040f4:	d827      	bhi.n	8004146 <UART_SetConfig+0x506>
 80040f6:	a201      	add	r2, pc, #4	@ (adr r2, 80040fc <UART_SetConfig+0x4bc>)
 80040f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040fc:	08004121 	.word	0x08004121
 8004100:	08004129 	.word	0x08004129
 8004104:	08004131 	.word	0x08004131
 8004108:	08004147 	.word	0x08004147
 800410c:	08004137 	.word	0x08004137
 8004110:	08004147 	.word	0x08004147
 8004114:	08004147 	.word	0x08004147
 8004118:	08004147 	.word	0x08004147
 800411c:	0800413f 	.word	0x0800413f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004120:	f7fe fe48 	bl	8002db4 <HAL_RCC_GetPCLK1Freq>
 8004124:	61f8      	str	r0, [r7, #28]
        break;
 8004126:	e014      	b.n	8004152 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004128:	f7fe fe5a 	bl	8002de0 <HAL_RCC_GetPCLK2Freq>
 800412c:	61f8      	str	r0, [r7, #28]
        break;
 800412e:	e010      	b.n	8004152 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004130:	4b1e      	ldr	r3, [pc, #120]	@ (80041ac <UART_SetConfig+0x56c>)
 8004132:	61fb      	str	r3, [r7, #28]
        break;
 8004134:	e00d      	b.n	8004152 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004136:	f7fe fda5 	bl	8002c84 <HAL_RCC_GetSysClockFreq>
 800413a:	61f8      	str	r0, [r7, #28]
        break;
 800413c:	e009      	b.n	8004152 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800413e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004142:	61fb      	str	r3, [r7, #28]
        break;
 8004144:	e005      	b.n	8004152 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004146:	2300      	movs	r3, #0
 8004148:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004150:	bf00      	nop
    }

    if (pclk != 0U)
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d019      	beq.n	800418c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	085a      	lsrs	r2, r3, #1
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	441a      	add	r2, r3
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	fbb2 f3f3 	udiv	r3, r2, r3
 800416a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	2b0f      	cmp	r3, #15
 8004170:	d909      	bls.n	8004186 <UART_SetConfig+0x546>
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004178:	d205      	bcs.n	8004186 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	b29a      	uxth	r2, r3
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	60da      	str	r2, [r3, #12]
 8004184:	e002      	b.n	800418c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2200      	movs	r2, #0
 8004196:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004198:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800419c:	4618      	mov	r0, r3
 800419e:	3728      	adds	r7, #40	@ 0x28
 80041a0:	46bd      	mov	sp, r7
 80041a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041a6:	bf00      	nop
 80041a8:	40008000 	.word	0x40008000
 80041ac:	00f42400 	.word	0x00f42400

080041b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041bc:	f003 0308 	and.w	r3, r3, #8
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d00a      	beq.n	80041da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	430a      	orrs	r2, r1
 80041d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041de:	f003 0301 	and.w	r3, r3, #1
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d00a      	beq.n	80041fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	430a      	orrs	r2, r1
 80041fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004200:	f003 0302 	and.w	r3, r3, #2
 8004204:	2b00      	cmp	r3, #0
 8004206:	d00a      	beq.n	800421e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	430a      	orrs	r2, r1
 800421c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004222:	f003 0304 	and.w	r3, r3, #4
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00a      	beq.n	8004240 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	430a      	orrs	r2, r1
 800423e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004244:	f003 0310 	and.w	r3, r3, #16
 8004248:	2b00      	cmp	r3, #0
 800424a:	d00a      	beq.n	8004262 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	430a      	orrs	r2, r1
 8004260:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004266:	f003 0320 	and.w	r3, r3, #32
 800426a:	2b00      	cmp	r3, #0
 800426c:	d00a      	beq.n	8004284 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	430a      	orrs	r2, r1
 8004282:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004288:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800428c:	2b00      	cmp	r3, #0
 800428e:	d01a      	beq.n	80042c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	430a      	orrs	r2, r1
 80042a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042ae:	d10a      	bne.n	80042c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	430a      	orrs	r2, r1
 80042c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d00a      	beq.n	80042e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	430a      	orrs	r2, r1
 80042e6:	605a      	str	r2, [r3, #4]
  }
}
 80042e8:	bf00      	nop
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b098      	sub	sp, #96	@ 0x60
 80042f8:	af02      	add	r7, sp, #8
 80042fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004304:	f7fc fdc4 	bl	8000e90 <HAL_GetTick>
 8004308:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0308 	and.w	r3, r3, #8
 8004314:	2b08      	cmp	r3, #8
 8004316:	d12e      	bne.n	8004376 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004318:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800431c:	9300      	str	r3, [sp, #0]
 800431e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004320:	2200      	movs	r2, #0
 8004322:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 f88c 	bl	8004444 <UART_WaitOnFlagUntilTimeout>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d021      	beq.n	8004376 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800433a:	e853 3f00 	ldrex	r3, [r3]
 800433e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004340:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004342:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004346:	653b      	str	r3, [r7, #80]	@ 0x50
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	461a      	mov	r2, r3
 800434e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004350:	647b      	str	r3, [r7, #68]	@ 0x44
 8004352:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004354:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004356:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004358:	e841 2300 	strex	r3, r2, [r1]
 800435c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800435e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004360:	2b00      	cmp	r3, #0
 8004362:	d1e6      	bne.n	8004332 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2220      	movs	r2, #32
 8004368:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e062      	b.n	800443c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0304 	and.w	r3, r3, #4
 8004380:	2b04      	cmp	r3, #4
 8004382:	d149      	bne.n	8004418 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004384:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004388:	9300      	str	r3, [sp, #0]
 800438a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800438c:	2200      	movs	r2, #0
 800438e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 f856 	bl	8004444 <UART_WaitOnFlagUntilTimeout>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d03c      	beq.n	8004418 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a6:	e853 3f00 	ldrex	r3, [r3]
 80043aa:	623b      	str	r3, [r7, #32]
   return(result);
 80043ac:	6a3b      	ldr	r3, [r7, #32]
 80043ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	461a      	mov	r2, r3
 80043ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80043be:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80043c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043c4:	e841 2300 	strex	r3, r2, [r1]
 80043c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80043ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d1e6      	bne.n	800439e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	3308      	adds	r3, #8
 80043d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	e853 3f00 	ldrex	r3, [r3]
 80043de:	60fb      	str	r3, [r7, #12]
   return(result);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f023 0301 	bic.w	r3, r3, #1
 80043e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	3308      	adds	r3, #8
 80043ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80043f0:	61fa      	str	r2, [r7, #28]
 80043f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f4:	69b9      	ldr	r1, [r7, #24]
 80043f6:	69fa      	ldr	r2, [r7, #28]
 80043f8:	e841 2300 	strex	r3, r2, [r1]
 80043fc:	617b      	str	r3, [r7, #20]
   return(result);
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d1e5      	bne.n	80043d0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2220      	movs	r2, #32
 8004408:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e011      	b.n	800443c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2220      	movs	r2, #32
 800441c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2220      	movs	r2, #32
 8004422:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3758      	adds	r7, #88	@ 0x58
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	603b      	str	r3, [r7, #0]
 8004450:	4613      	mov	r3, r2
 8004452:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004454:	e04f      	b.n	80044f6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800445c:	d04b      	beq.n	80044f6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800445e:	f7fc fd17 	bl	8000e90 <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	69ba      	ldr	r2, [r7, #24]
 800446a:	429a      	cmp	r2, r3
 800446c:	d302      	bcc.n	8004474 <UART_WaitOnFlagUntilTimeout+0x30>
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d101      	bne.n	8004478 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e04e      	b.n	8004516 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0304 	and.w	r3, r3, #4
 8004482:	2b00      	cmp	r3, #0
 8004484:	d037      	beq.n	80044f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	2b80      	cmp	r3, #128	@ 0x80
 800448a:	d034      	beq.n	80044f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	2b40      	cmp	r3, #64	@ 0x40
 8004490:	d031      	beq.n	80044f6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	69db      	ldr	r3, [r3, #28]
 8004498:	f003 0308 	and.w	r3, r3, #8
 800449c:	2b08      	cmp	r3, #8
 800449e:	d110      	bne.n	80044c2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2208      	movs	r2, #8
 80044a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	f000 f838 	bl	800451e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2208      	movs	r2, #8
 80044b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e029      	b.n	8004516 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	69db      	ldr	r3, [r3, #28]
 80044c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044d0:	d111      	bne.n	80044f6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80044da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044dc:	68f8      	ldr	r0, [r7, #12]
 80044de:	f000 f81e 	bl	800451e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2220      	movs	r2, #32
 80044e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e00f      	b.n	8004516 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	69da      	ldr	r2, [r3, #28]
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	4013      	ands	r3, r2
 8004500:	68ba      	ldr	r2, [r7, #8]
 8004502:	429a      	cmp	r2, r3
 8004504:	bf0c      	ite	eq
 8004506:	2301      	moveq	r3, #1
 8004508:	2300      	movne	r3, #0
 800450a:	b2db      	uxtb	r3, r3
 800450c:	461a      	mov	r2, r3
 800450e:	79fb      	ldrb	r3, [r7, #7]
 8004510:	429a      	cmp	r2, r3
 8004512:	d0a0      	beq.n	8004456 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	3710      	adds	r7, #16
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}

0800451e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800451e:	b480      	push	{r7}
 8004520:	b095      	sub	sp, #84	@ 0x54
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800452c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800452e:	e853 3f00 	ldrex	r3, [r3]
 8004532:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004536:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800453a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	461a      	mov	r2, r3
 8004542:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004544:	643b      	str	r3, [r7, #64]	@ 0x40
 8004546:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004548:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800454a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800454c:	e841 2300 	strex	r3, r2, [r1]
 8004550:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1e6      	bne.n	8004526 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	3308      	adds	r3, #8
 800455e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004560:	6a3b      	ldr	r3, [r7, #32]
 8004562:	e853 3f00 	ldrex	r3, [r3]
 8004566:	61fb      	str	r3, [r7, #28]
   return(result);
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	f023 0301 	bic.w	r3, r3, #1
 800456e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	3308      	adds	r3, #8
 8004576:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004578:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800457a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800457c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800457e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004580:	e841 2300 	strex	r3, r2, [r1]
 8004584:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004588:	2b00      	cmp	r3, #0
 800458a:	d1e5      	bne.n	8004558 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004590:	2b01      	cmp	r3, #1
 8004592:	d118      	bne.n	80045c6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	e853 3f00 	ldrex	r3, [r3]
 80045a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	f023 0310 	bic.w	r3, r3, #16
 80045a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	461a      	mov	r2, r3
 80045b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045b2:	61bb      	str	r3, [r7, #24]
 80045b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b6:	6979      	ldr	r1, [r7, #20]
 80045b8:	69ba      	ldr	r2, [r7, #24]
 80045ba:	e841 2300 	strex	r3, r2, [r1]
 80045be:	613b      	str	r3, [r7, #16]
   return(result);
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d1e6      	bne.n	8004594 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2220      	movs	r2, #32
 80045ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80045da:	bf00      	nop
 80045dc:	3754      	adds	r7, #84	@ 0x54
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr

080045e6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045e6:	b580      	push	{r7, lr}
 80045e8:	b084      	sub	sp, #16
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2200      	movs	r2, #0
 8004600:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004604:	68f8      	ldr	r0, [r7, #12]
 8004606:	f7ff fb05 	bl	8003c14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800460a:	bf00      	nop
 800460c:	3710      	adds	r7, #16
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}

08004612 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004612:	b580      	push	{r7, lr}
 8004614:	b088      	sub	sp, #32
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	e853 3f00 	ldrex	r3, [r3]
 8004626:	60bb      	str	r3, [r7, #8]
   return(result);
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800462e:	61fb      	str	r3, [r7, #28]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	461a      	mov	r2, r3
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	61bb      	str	r3, [r7, #24]
 800463a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800463c:	6979      	ldr	r1, [r7, #20]
 800463e:	69ba      	ldr	r2, [r7, #24]
 8004640:	e841 2300 	strex	r3, r2, [r1]
 8004644:	613b      	str	r3, [r7, #16]
   return(result);
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d1e6      	bne.n	800461a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2220      	movs	r2, #32
 8004650:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f7ff fad1 	bl	8003c00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800465e:	bf00      	nop
 8004660:	3720      	adds	r7, #32
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}

08004666 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004666:	b480      	push	{r7}
 8004668:	b083      	sub	sp, #12
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800466e:	bf00      	nop
 8004670:	370c      	adds	r7, #12
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
	...

0800467c <siprintf>:
 800467c:	b40e      	push	{r1, r2, r3}
 800467e:	b500      	push	{lr}
 8004680:	b09c      	sub	sp, #112	@ 0x70
 8004682:	ab1d      	add	r3, sp, #116	@ 0x74
 8004684:	9002      	str	r0, [sp, #8]
 8004686:	9006      	str	r0, [sp, #24]
 8004688:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800468c:	4809      	ldr	r0, [pc, #36]	@ (80046b4 <siprintf+0x38>)
 800468e:	9107      	str	r1, [sp, #28]
 8004690:	9104      	str	r1, [sp, #16]
 8004692:	4909      	ldr	r1, [pc, #36]	@ (80046b8 <siprintf+0x3c>)
 8004694:	f853 2b04 	ldr.w	r2, [r3], #4
 8004698:	9105      	str	r1, [sp, #20]
 800469a:	6800      	ldr	r0, [r0, #0]
 800469c:	9301      	str	r3, [sp, #4]
 800469e:	a902      	add	r1, sp, #8
 80046a0:	f000 f994 	bl	80049cc <_svfiprintf_r>
 80046a4:	9b02      	ldr	r3, [sp, #8]
 80046a6:	2200      	movs	r2, #0
 80046a8:	701a      	strb	r2, [r3, #0]
 80046aa:	b01c      	add	sp, #112	@ 0x70
 80046ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80046b0:	b003      	add	sp, #12
 80046b2:	4770      	bx	lr
 80046b4:	2000000c 	.word	0x2000000c
 80046b8:	ffff0208 	.word	0xffff0208

080046bc <memset>:
 80046bc:	4402      	add	r2, r0
 80046be:	4603      	mov	r3, r0
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d100      	bne.n	80046c6 <memset+0xa>
 80046c4:	4770      	bx	lr
 80046c6:	f803 1b01 	strb.w	r1, [r3], #1
 80046ca:	e7f9      	b.n	80046c0 <memset+0x4>

080046cc <__errno>:
 80046cc:	4b01      	ldr	r3, [pc, #4]	@ (80046d4 <__errno+0x8>)
 80046ce:	6818      	ldr	r0, [r3, #0]
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	2000000c 	.word	0x2000000c

080046d8 <__libc_init_array>:
 80046d8:	b570      	push	{r4, r5, r6, lr}
 80046da:	4d0d      	ldr	r5, [pc, #52]	@ (8004710 <__libc_init_array+0x38>)
 80046dc:	4c0d      	ldr	r4, [pc, #52]	@ (8004714 <__libc_init_array+0x3c>)
 80046de:	1b64      	subs	r4, r4, r5
 80046e0:	10a4      	asrs	r4, r4, #2
 80046e2:	2600      	movs	r6, #0
 80046e4:	42a6      	cmp	r6, r4
 80046e6:	d109      	bne.n	80046fc <__libc_init_array+0x24>
 80046e8:	4d0b      	ldr	r5, [pc, #44]	@ (8004718 <__libc_init_array+0x40>)
 80046ea:	4c0c      	ldr	r4, [pc, #48]	@ (800471c <__libc_init_array+0x44>)
 80046ec:	f000 fc66 	bl	8004fbc <_init>
 80046f0:	1b64      	subs	r4, r4, r5
 80046f2:	10a4      	asrs	r4, r4, #2
 80046f4:	2600      	movs	r6, #0
 80046f6:	42a6      	cmp	r6, r4
 80046f8:	d105      	bne.n	8004706 <__libc_init_array+0x2e>
 80046fa:	bd70      	pop	{r4, r5, r6, pc}
 80046fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004700:	4798      	blx	r3
 8004702:	3601      	adds	r6, #1
 8004704:	e7ee      	b.n	80046e4 <__libc_init_array+0xc>
 8004706:	f855 3b04 	ldr.w	r3, [r5], #4
 800470a:	4798      	blx	r3
 800470c:	3601      	adds	r6, #1
 800470e:	e7f2      	b.n	80046f6 <__libc_init_array+0x1e>
 8004710:	080050f4 	.word	0x080050f4
 8004714:	080050f4 	.word	0x080050f4
 8004718:	080050f4 	.word	0x080050f4
 800471c:	080050f8 	.word	0x080050f8

08004720 <__retarget_lock_acquire_recursive>:
 8004720:	4770      	bx	lr

08004722 <__retarget_lock_release_recursive>:
 8004722:	4770      	bx	lr

08004724 <_free_r>:
 8004724:	b538      	push	{r3, r4, r5, lr}
 8004726:	4605      	mov	r5, r0
 8004728:	2900      	cmp	r1, #0
 800472a:	d041      	beq.n	80047b0 <_free_r+0x8c>
 800472c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004730:	1f0c      	subs	r4, r1, #4
 8004732:	2b00      	cmp	r3, #0
 8004734:	bfb8      	it	lt
 8004736:	18e4      	addlt	r4, r4, r3
 8004738:	f000 f8e0 	bl	80048fc <__malloc_lock>
 800473c:	4a1d      	ldr	r2, [pc, #116]	@ (80047b4 <_free_r+0x90>)
 800473e:	6813      	ldr	r3, [r2, #0]
 8004740:	b933      	cbnz	r3, 8004750 <_free_r+0x2c>
 8004742:	6063      	str	r3, [r4, #4]
 8004744:	6014      	str	r4, [r2, #0]
 8004746:	4628      	mov	r0, r5
 8004748:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800474c:	f000 b8dc 	b.w	8004908 <__malloc_unlock>
 8004750:	42a3      	cmp	r3, r4
 8004752:	d908      	bls.n	8004766 <_free_r+0x42>
 8004754:	6820      	ldr	r0, [r4, #0]
 8004756:	1821      	adds	r1, r4, r0
 8004758:	428b      	cmp	r3, r1
 800475a:	bf01      	itttt	eq
 800475c:	6819      	ldreq	r1, [r3, #0]
 800475e:	685b      	ldreq	r3, [r3, #4]
 8004760:	1809      	addeq	r1, r1, r0
 8004762:	6021      	streq	r1, [r4, #0]
 8004764:	e7ed      	b.n	8004742 <_free_r+0x1e>
 8004766:	461a      	mov	r2, r3
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	b10b      	cbz	r3, 8004770 <_free_r+0x4c>
 800476c:	42a3      	cmp	r3, r4
 800476e:	d9fa      	bls.n	8004766 <_free_r+0x42>
 8004770:	6811      	ldr	r1, [r2, #0]
 8004772:	1850      	adds	r0, r2, r1
 8004774:	42a0      	cmp	r0, r4
 8004776:	d10b      	bne.n	8004790 <_free_r+0x6c>
 8004778:	6820      	ldr	r0, [r4, #0]
 800477a:	4401      	add	r1, r0
 800477c:	1850      	adds	r0, r2, r1
 800477e:	4283      	cmp	r3, r0
 8004780:	6011      	str	r1, [r2, #0]
 8004782:	d1e0      	bne.n	8004746 <_free_r+0x22>
 8004784:	6818      	ldr	r0, [r3, #0]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	6053      	str	r3, [r2, #4]
 800478a:	4408      	add	r0, r1
 800478c:	6010      	str	r0, [r2, #0]
 800478e:	e7da      	b.n	8004746 <_free_r+0x22>
 8004790:	d902      	bls.n	8004798 <_free_r+0x74>
 8004792:	230c      	movs	r3, #12
 8004794:	602b      	str	r3, [r5, #0]
 8004796:	e7d6      	b.n	8004746 <_free_r+0x22>
 8004798:	6820      	ldr	r0, [r4, #0]
 800479a:	1821      	adds	r1, r4, r0
 800479c:	428b      	cmp	r3, r1
 800479e:	bf04      	itt	eq
 80047a0:	6819      	ldreq	r1, [r3, #0]
 80047a2:	685b      	ldreq	r3, [r3, #4]
 80047a4:	6063      	str	r3, [r4, #4]
 80047a6:	bf04      	itt	eq
 80047a8:	1809      	addeq	r1, r1, r0
 80047aa:	6021      	streq	r1, [r4, #0]
 80047ac:	6054      	str	r4, [r2, #4]
 80047ae:	e7ca      	b.n	8004746 <_free_r+0x22>
 80047b0:	bd38      	pop	{r3, r4, r5, pc}
 80047b2:	bf00      	nop
 80047b4:	200002c4 	.word	0x200002c4

080047b8 <sbrk_aligned>:
 80047b8:	b570      	push	{r4, r5, r6, lr}
 80047ba:	4e0f      	ldr	r6, [pc, #60]	@ (80047f8 <sbrk_aligned+0x40>)
 80047bc:	460c      	mov	r4, r1
 80047be:	6831      	ldr	r1, [r6, #0]
 80047c0:	4605      	mov	r5, r0
 80047c2:	b911      	cbnz	r1, 80047ca <sbrk_aligned+0x12>
 80047c4:	f000 fba6 	bl	8004f14 <_sbrk_r>
 80047c8:	6030      	str	r0, [r6, #0]
 80047ca:	4621      	mov	r1, r4
 80047cc:	4628      	mov	r0, r5
 80047ce:	f000 fba1 	bl	8004f14 <_sbrk_r>
 80047d2:	1c43      	adds	r3, r0, #1
 80047d4:	d103      	bne.n	80047de <sbrk_aligned+0x26>
 80047d6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80047da:	4620      	mov	r0, r4
 80047dc:	bd70      	pop	{r4, r5, r6, pc}
 80047de:	1cc4      	adds	r4, r0, #3
 80047e0:	f024 0403 	bic.w	r4, r4, #3
 80047e4:	42a0      	cmp	r0, r4
 80047e6:	d0f8      	beq.n	80047da <sbrk_aligned+0x22>
 80047e8:	1a21      	subs	r1, r4, r0
 80047ea:	4628      	mov	r0, r5
 80047ec:	f000 fb92 	bl	8004f14 <_sbrk_r>
 80047f0:	3001      	adds	r0, #1
 80047f2:	d1f2      	bne.n	80047da <sbrk_aligned+0x22>
 80047f4:	e7ef      	b.n	80047d6 <sbrk_aligned+0x1e>
 80047f6:	bf00      	nop
 80047f8:	200002c0 	.word	0x200002c0

080047fc <_malloc_r>:
 80047fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004800:	1ccd      	adds	r5, r1, #3
 8004802:	f025 0503 	bic.w	r5, r5, #3
 8004806:	3508      	adds	r5, #8
 8004808:	2d0c      	cmp	r5, #12
 800480a:	bf38      	it	cc
 800480c:	250c      	movcc	r5, #12
 800480e:	2d00      	cmp	r5, #0
 8004810:	4606      	mov	r6, r0
 8004812:	db01      	blt.n	8004818 <_malloc_r+0x1c>
 8004814:	42a9      	cmp	r1, r5
 8004816:	d904      	bls.n	8004822 <_malloc_r+0x26>
 8004818:	230c      	movs	r3, #12
 800481a:	6033      	str	r3, [r6, #0]
 800481c:	2000      	movs	r0, #0
 800481e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004822:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80048f8 <_malloc_r+0xfc>
 8004826:	f000 f869 	bl	80048fc <__malloc_lock>
 800482a:	f8d8 3000 	ldr.w	r3, [r8]
 800482e:	461c      	mov	r4, r3
 8004830:	bb44      	cbnz	r4, 8004884 <_malloc_r+0x88>
 8004832:	4629      	mov	r1, r5
 8004834:	4630      	mov	r0, r6
 8004836:	f7ff ffbf 	bl	80047b8 <sbrk_aligned>
 800483a:	1c43      	adds	r3, r0, #1
 800483c:	4604      	mov	r4, r0
 800483e:	d158      	bne.n	80048f2 <_malloc_r+0xf6>
 8004840:	f8d8 4000 	ldr.w	r4, [r8]
 8004844:	4627      	mov	r7, r4
 8004846:	2f00      	cmp	r7, #0
 8004848:	d143      	bne.n	80048d2 <_malloc_r+0xd6>
 800484a:	2c00      	cmp	r4, #0
 800484c:	d04b      	beq.n	80048e6 <_malloc_r+0xea>
 800484e:	6823      	ldr	r3, [r4, #0]
 8004850:	4639      	mov	r1, r7
 8004852:	4630      	mov	r0, r6
 8004854:	eb04 0903 	add.w	r9, r4, r3
 8004858:	f000 fb5c 	bl	8004f14 <_sbrk_r>
 800485c:	4581      	cmp	r9, r0
 800485e:	d142      	bne.n	80048e6 <_malloc_r+0xea>
 8004860:	6821      	ldr	r1, [r4, #0]
 8004862:	1a6d      	subs	r5, r5, r1
 8004864:	4629      	mov	r1, r5
 8004866:	4630      	mov	r0, r6
 8004868:	f7ff ffa6 	bl	80047b8 <sbrk_aligned>
 800486c:	3001      	adds	r0, #1
 800486e:	d03a      	beq.n	80048e6 <_malloc_r+0xea>
 8004870:	6823      	ldr	r3, [r4, #0]
 8004872:	442b      	add	r3, r5
 8004874:	6023      	str	r3, [r4, #0]
 8004876:	f8d8 3000 	ldr.w	r3, [r8]
 800487a:	685a      	ldr	r2, [r3, #4]
 800487c:	bb62      	cbnz	r2, 80048d8 <_malloc_r+0xdc>
 800487e:	f8c8 7000 	str.w	r7, [r8]
 8004882:	e00f      	b.n	80048a4 <_malloc_r+0xa8>
 8004884:	6822      	ldr	r2, [r4, #0]
 8004886:	1b52      	subs	r2, r2, r5
 8004888:	d420      	bmi.n	80048cc <_malloc_r+0xd0>
 800488a:	2a0b      	cmp	r2, #11
 800488c:	d917      	bls.n	80048be <_malloc_r+0xc2>
 800488e:	1961      	adds	r1, r4, r5
 8004890:	42a3      	cmp	r3, r4
 8004892:	6025      	str	r5, [r4, #0]
 8004894:	bf18      	it	ne
 8004896:	6059      	strne	r1, [r3, #4]
 8004898:	6863      	ldr	r3, [r4, #4]
 800489a:	bf08      	it	eq
 800489c:	f8c8 1000 	streq.w	r1, [r8]
 80048a0:	5162      	str	r2, [r4, r5]
 80048a2:	604b      	str	r3, [r1, #4]
 80048a4:	4630      	mov	r0, r6
 80048a6:	f000 f82f 	bl	8004908 <__malloc_unlock>
 80048aa:	f104 000b 	add.w	r0, r4, #11
 80048ae:	1d23      	adds	r3, r4, #4
 80048b0:	f020 0007 	bic.w	r0, r0, #7
 80048b4:	1ac2      	subs	r2, r0, r3
 80048b6:	bf1c      	itt	ne
 80048b8:	1a1b      	subne	r3, r3, r0
 80048ba:	50a3      	strne	r3, [r4, r2]
 80048bc:	e7af      	b.n	800481e <_malloc_r+0x22>
 80048be:	6862      	ldr	r2, [r4, #4]
 80048c0:	42a3      	cmp	r3, r4
 80048c2:	bf0c      	ite	eq
 80048c4:	f8c8 2000 	streq.w	r2, [r8]
 80048c8:	605a      	strne	r2, [r3, #4]
 80048ca:	e7eb      	b.n	80048a4 <_malloc_r+0xa8>
 80048cc:	4623      	mov	r3, r4
 80048ce:	6864      	ldr	r4, [r4, #4]
 80048d0:	e7ae      	b.n	8004830 <_malloc_r+0x34>
 80048d2:	463c      	mov	r4, r7
 80048d4:	687f      	ldr	r7, [r7, #4]
 80048d6:	e7b6      	b.n	8004846 <_malloc_r+0x4a>
 80048d8:	461a      	mov	r2, r3
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	42a3      	cmp	r3, r4
 80048de:	d1fb      	bne.n	80048d8 <_malloc_r+0xdc>
 80048e0:	2300      	movs	r3, #0
 80048e2:	6053      	str	r3, [r2, #4]
 80048e4:	e7de      	b.n	80048a4 <_malloc_r+0xa8>
 80048e6:	230c      	movs	r3, #12
 80048e8:	6033      	str	r3, [r6, #0]
 80048ea:	4630      	mov	r0, r6
 80048ec:	f000 f80c 	bl	8004908 <__malloc_unlock>
 80048f0:	e794      	b.n	800481c <_malloc_r+0x20>
 80048f2:	6005      	str	r5, [r0, #0]
 80048f4:	e7d6      	b.n	80048a4 <_malloc_r+0xa8>
 80048f6:	bf00      	nop
 80048f8:	200002c4 	.word	0x200002c4

080048fc <__malloc_lock>:
 80048fc:	4801      	ldr	r0, [pc, #4]	@ (8004904 <__malloc_lock+0x8>)
 80048fe:	f7ff bf0f 	b.w	8004720 <__retarget_lock_acquire_recursive>
 8004902:	bf00      	nop
 8004904:	200002bc 	.word	0x200002bc

08004908 <__malloc_unlock>:
 8004908:	4801      	ldr	r0, [pc, #4]	@ (8004910 <__malloc_unlock+0x8>)
 800490a:	f7ff bf0a 	b.w	8004722 <__retarget_lock_release_recursive>
 800490e:	bf00      	nop
 8004910:	200002bc 	.word	0x200002bc

08004914 <__ssputs_r>:
 8004914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004918:	688e      	ldr	r6, [r1, #8]
 800491a:	461f      	mov	r7, r3
 800491c:	42be      	cmp	r6, r7
 800491e:	680b      	ldr	r3, [r1, #0]
 8004920:	4682      	mov	sl, r0
 8004922:	460c      	mov	r4, r1
 8004924:	4690      	mov	r8, r2
 8004926:	d82d      	bhi.n	8004984 <__ssputs_r+0x70>
 8004928:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800492c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004930:	d026      	beq.n	8004980 <__ssputs_r+0x6c>
 8004932:	6965      	ldr	r5, [r4, #20]
 8004934:	6909      	ldr	r1, [r1, #16]
 8004936:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800493a:	eba3 0901 	sub.w	r9, r3, r1
 800493e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004942:	1c7b      	adds	r3, r7, #1
 8004944:	444b      	add	r3, r9
 8004946:	106d      	asrs	r5, r5, #1
 8004948:	429d      	cmp	r5, r3
 800494a:	bf38      	it	cc
 800494c:	461d      	movcc	r5, r3
 800494e:	0553      	lsls	r3, r2, #21
 8004950:	d527      	bpl.n	80049a2 <__ssputs_r+0x8e>
 8004952:	4629      	mov	r1, r5
 8004954:	f7ff ff52 	bl	80047fc <_malloc_r>
 8004958:	4606      	mov	r6, r0
 800495a:	b360      	cbz	r0, 80049b6 <__ssputs_r+0xa2>
 800495c:	6921      	ldr	r1, [r4, #16]
 800495e:	464a      	mov	r2, r9
 8004960:	f000 fae8 	bl	8004f34 <memcpy>
 8004964:	89a3      	ldrh	r3, [r4, #12]
 8004966:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800496a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800496e:	81a3      	strh	r3, [r4, #12]
 8004970:	6126      	str	r6, [r4, #16]
 8004972:	6165      	str	r5, [r4, #20]
 8004974:	444e      	add	r6, r9
 8004976:	eba5 0509 	sub.w	r5, r5, r9
 800497a:	6026      	str	r6, [r4, #0]
 800497c:	60a5      	str	r5, [r4, #8]
 800497e:	463e      	mov	r6, r7
 8004980:	42be      	cmp	r6, r7
 8004982:	d900      	bls.n	8004986 <__ssputs_r+0x72>
 8004984:	463e      	mov	r6, r7
 8004986:	6820      	ldr	r0, [r4, #0]
 8004988:	4632      	mov	r2, r6
 800498a:	4641      	mov	r1, r8
 800498c:	f000 faa8 	bl	8004ee0 <memmove>
 8004990:	68a3      	ldr	r3, [r4, #8]
 8004992:	1b9b      	subs	r3, r3, r6
 8004994:	60a3      	str	r3, [r4, #8]
 8004996:	6823      	ldr	r3, [r4, #0]
 8004998:	4433      	add	r3, r6
 800499a:	6023      	str	r3, [r4, #0]
 800499c:	2000      	movs	r0, #0
 800499e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049a2:	462a      	mov	r2, r5
 80049a4:	f000 fad4 	bl	8004f50 <_realloc_r>
 80049a8:	4606      	mov	r6, r0
 80049aa:	2800      	cmp	r0, #0
 80049ac:	d1e0      	bne.n	8004970 <__ssputs_r+0x5c>
 80049ae:	6921      	ldr	r1, [r4, #16]
 80049b0:	4650      	mov	r0, sl
 80049b2:	f7ff feb7 	bl	8004724 <_free_r>
 80049b6:	230c      	movs	r3, #12
 80049b8:	f8ca 3000 	str.w	r3, [sl]
 80049bc:	89a3      	ldrh	r3, [r4, #12]
 80049be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049c2:	81a3      	strh	r3, [r4, #12]
 80049c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80049c8:	e7e9      	b.n	800499e <__ssputs_r+0x8a>
	...

080049cc <_svfiprintf_r>:
 80049cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049d0:	4698      	mov	r8, r3
 80049d2:	898b      	ldrh	r3, [r1, #12]
 80049d4:	061b      	lsls	r3, r3, #24
 80049d6:	b09d      	sub	sp, #116	@ 0x74
 80049d8:	4607      	mov	r7, r0
 80049da:	460d      	mov	r5, r1
 80049dc:	4614      	mov	r4, r2
 80049de:	d510      	bpl.n	8004a02 <_svfiprintf_r+0x36>
 80049e0:	690b      	ldr	r3, [r1, #16]
 80049e2:	b973      	cbnz	r3, 8004a02 <_svfiprintf_r+0x36>
 80049e4:	2140      	movs	r1, #64	@ 0x40
 80049e6:	f7ff ff09 	bl	80047fc <_malloc_r>
 80049ea:	6028      	str	r0, [r5, #0]
 80049ec:	6128      	str	r0, [r5, #16]
 80049ee:	b930      	cbnz	r0, 80049fe <_svfiprintf_r+0x32>
 80049f0:	230c      	movs	r3, #12
 80049f2:	603b      	str	r3, [r7, #0]
 80049f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80049f8:	b01d      	add	sp, #116	@ 0x74
 80049fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049fe:	2340      	movs	r3, #64	@ 0x40
 8004a00:	616b      	str	r3, [r5, #20]
 8004a02:	2300      	movs	r3, #0
 8004a04:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a06:	2320      	movs	r3, #32
 8004a08:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004a0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a10:	2330      	movs	r3, #48	@ 0x30
 8004a12:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004bb0 <_svfiprintf_r+0x1e4>
 8004a16:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004a1a:	f04f 0901 	mov.w	r9, #1
 8004a1e:	4623      	mov	r3, r4
 8004a20:	469a      	mov	sl, r3
 8004a22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a26:	b10a      	cbz	r2, 8004a2c <_svfiprintf_r+0x60>
 8004a28:	2a25      	cmp	r2, #37	@ 0x25
 8004a2a:	d1f9      	bne.n	8004a20 <_svfiprintf_r+0x54>
 8004a2c:	ebba 0b04 	subs.w	fp, sl, r4
 8004a30:	d00b      	beq.n	8004a4a <_svfiprintf_r+0x7e>
 8004a32:	465b      	mov	r3, fp
 8004a34:	4622      	mov	r2, r4
 8004a36:	4629      	mov	r1, r5
 8004a38:	4638      	mov	r0, r7
 8004a3a:	f7ff ff6b 	bl	8004914 <__ssputs_r>
 8004a3e:	3001      	adds	r0, #1
 8004a40:	f000 80a7 	beq.w	8004b92 <_svfiprintf_r+0x1c6>
 8004a44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004a46:	445a      	add	r2, fp
 8004a48:	9209      	str	r2, [sp, #36]	@ 0x24
 8004a4a:	f89a 3000 	ldrb.w	r3, [sl]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	f000 809f 	beq.w	8004b92 <_svfiprintf_r+0x1c6>
 8004a54:	2300      	movs	r3, #0
 8004a56:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004a5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a5e:	f10a 0a01 	add.w	sl, sl, #1
 8004a62:	9304      	str	r3, [sp, #16]
 8004a64:	9307      	str	r3, [sp, #28]
 8004a66:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004a6a:	931a      	str	r3, [sp, #104]	@ 0x68
 8004a6c:	4654      	mov	r4, sl
 8004a6e:	2205      	movs	r2, #5
 8004a70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a74:	484e      	ldr	r0, [pc, #312]	@ (8004bb0 <_svfiprintf_r+0x1e4>)
 8004a76:	f7fb fbb3 	bl	80001e0 <memchr>
 8004a7a:	9a04      	ldr	r2, [sp, #16]
 8004a7c:	b9d8      	cbnz	r0, 8004ab6 <_svfiprintf_r+0xea>
 8004a7e:	06d0      	lsls	r0, r2, #27
 8004a80:	bf44      	itt	mi
 8004a82:	2320      	movmi	r3, #32
 8004a84:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004a88:	0711      	lsls	r1, r2, #28
 8004a8a:	bf44      	itt	mi
 8004a8c:	232b      	movmi	r3, #43	@ 0x2b
 8004a8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004a92:	f89a 3000 	ldrb.w	r3, [sl]
 8004a96:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a98:	d015      	beq.n	8004ac6 <_svfiprintf_r+0xfa>
 8004a9a:	9a07      	ldr	r2, [sp, #28]
 8004a9c:	4654      	mov	r4, sl
 8004a9e:	2000      	movs	r0, #0
 8004aa0:	f04f 0c0a 	mov.w	ip, #10
 8004aa4:	4621      	mov	r1, r4
 8004aa6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004aaa:	3b30      	subs	r3, #48	@ 0x30
 8004aac:	2b09      	cmp	r3, #9
 8004aae:	d94b      	bls.n	8004b48 <_svfiprintf_r+0x17c>
 8004ab0:	b1b0      	cbz	r0, 8004ae0 <_svfiprintf_r+0x114>
 8004ab2:	9207      	str	r2, [sp, #28]
 8004ab4:	e014      	b.n	8004ae0 <_svfiprintf_r+0x114>
 8004ab6:	eba0 0308 	sub.w	r3, r0, r8
 8004aba:	fa09 f303 	lsl.w	r3, r9, r3
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	9304      	str	r3, [sp, #16]
 8004ac2:	46a2      	mov	sl, r4
 8004ac4:	e7d2      	b.n	8004a6c <_svfiprintf_r+0xa0>
 8004ac6:	9b03      	ldr	r3, [sp, #12]
 8004ac8:	1d19      	adds	r1, r3, #4
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	9103      	str	r1, [sp, #12]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	bfbb      	ittet	lt
 8004ad2:	425b      	neglt	r3, r3
 8004ad4:	f042 0202 	orrlt.w	r2, r2, #2
 8004ad8:	9307      	strge	r3, [sp, #28]
 8004ada:	9307      	strlt	r3, [sp, #28]
 8004adc:	bfb8      	it	lt
 8004ade:	9204      	strlt	r2, [sp, #16]
 8004ae0:	7823      	ldrb	r3, [r4, #0]
 8004ae2:	2b2e      	cmp	r3, #46	@ 0x2e
 8004ae4:	d10a      	bne.n	8004afc <_svfiprintf_r+0x130>
 8004ae6:	7863      	ldrb	r3, [r4, #1]
 8004ae8:	2b2a      	cmp	r3, #42	@ 0x2a
 8004aea:	d132      	bne.n	8004b52 <_svfiprintf_r+0x186>
 8004aec:	9b03      	ldr	r3, [sp, #12]
 8004aee:	1d1a      	adds	r2, r3, #4
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	9203      	str	r2, [sp, #12]
 8004af4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004af8:	3402      	adds	r4, #2
 8004afa:	9305      	str	r3, [sp, #20]
 8004afc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004bc0 <_svfiprintf_r+0x1f4>
 8004b00:	7821      	ldrb	r1, [r4, #0]
 8004b02:	2203      	movs	r2, #3
 8004b04:	4650      	mov	r0, sl
 8004b06:	f7fb fb6b 	bl	80001e0 <memchr>
 8004b0a:	b138      	cbz	r0, 8004b1c <_svfiprintf_r+0x150>
 8004b0c:	9b04      	ldr	r3, [sp, #16]
 8004b0e:	eba0 000a 	sub.w	r0, r0, sl
 8004b12:	2240      	movs	r2, #64	@ 0x40
 8004b14:	4082      	lsls	r2, r0
 8004b16:	4313      	orrs	r3, r2
 8004b18:	3401      	adds	r4, #1
 8004b1a:	9304      	str	r3, [sp, #16]
 8004b1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b20:	4824      	ldr	r0, [pc, #144]	@ (8004bb4 <_svfiprintf_r+0x1e8>)
 8004b22:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004b26:	2206      	movs	r2, #6
 8004b28:	f7fb fb5a 	bl	80001e0 <memchr>
 8004b2c:	2800      	cmp	r0, #0
 8004b2e:	d036      	beq.n	8004b9e <_svfiprintf_r+0x1d2>
 8004b30:	4b21      	ldr	r3, [pc, #132]	@ (8004bb8 <_svfiprintf_r+0x1ec>)
 8004b32:	bb1b      	cbnz	r3, 8004b7c <_svfiprintf_r+0x1b0>
 8004b34:	9b03      	ldr	r3, [sp, #12]
 8004b36:	3307      	adds	r3, #7
 8004b38:	f023 0307 	bic.w	r3, r3, #7
 8004b3c:	3308      	adds	r3, #8
 8004b3e:	9303      	str	r3, [sp, #12]
 8004b40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b42:	4433      	add	r3, r6
 8004b44:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b46:	e76a      	b.n	8004a1e <_svfiprintf_r+0x52>
 8004b48:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b4c:	460c      	mov	r4, r1
 8004b4e:	2001      	movs	r0, #1
 8004b50:	e7a8      	b.n	8004aa4 <_svfiprintf_r+0xd8>
 8004b52:	2300      	movs	r3, #0
 8004b54:	3401      	adds	r4, #1
 8004b56:	9305      	str	r3, [sp, #20]
 8004b58:	4619      	mov	r1, r3
 8004b5a:	f04f 0c0a 	mov.w	ip, #10
 8004b5e:	4620      	mov	r0, r4
 8004b60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b64:	3a30      	subs	r2, #48	@ 0x30
 8004b66:	2a09      	cmp	r2, #9
 8004b68:	d903      	bls.n	8004b72 <_svfiprintf_r+0x1a6>
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d0c6      	beq.n	8004afc <_svfiprintf_r+0x130>
 8004b6e:	9105      	str	r1, [sp, #20]
 8004b70:	e7c4      	b.n	8004afc <_svfiprintf_r+0x130>
 8004b72:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b76:	4604      	mov	r4, r0
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e7f0      	b.n	8004b5e <_svfiprintf_r+0x192>
 8004b7c:	ab03      	add	r3, sp, #12
 8004b7e:	9300      	str	r3, [sp, #0]
 8004b80:	462a      	mov	r2, r5
 8004b82:	4b0e      	ldr	r3, [pc, #56]	@ (8004bbc <_svfiprintf_r+0x1f0>)
 8004b84:	a904      	add	r1, sp, #16
 8004b86:	4638      	mov	r0, r7
 8004b88:	f3af 8000 	nop.w
 8004b8c:	1c42      	adds	r2, r0, #1
 8004b8e:	4606      	mov	r6, r0
 8004b90:	d1d6      	bne.n	8004b40 <_svfiprintf_r+0x174>
 8004b92:	89ab      	ldrh	r3, [r5, #12]
 8004b94:	065b      	lsls	r3, r3, #25
 8004b96:	f53f af2d 	bmi.w	80049f4 <_svfiprintf_r+0x28>
 8004b9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004b9c:	e72c      	b.n	80049f8 <_svfiprintf_r+0x2c>
 8004b9e:	ab03      	add	r3, sp, #12
 8004ba0:	9300      	str	r3, [sp, #0]
 8004ba2:	462a      	mov	r2, r5
 8004ba4:	4b05      	ldr	r3, [pc, #20]	@ (8004bbc <_svfiprintf_r+0x1f0>)
 8004ba6:	a904      	add	r1, sp, #16
 8004ba8:	4638      	mov	r0, r7
 8004baa:	f000 f879 	bl	8004ca0 <_printf_i>
 8004bae:	e7ed      	b.n	8004b8c <_svfiprintf_r+0x1c0>
 8004bb0:	080050b8 	.word	0x080050b8
 8004bb4:	080050c2 	.word	0x080050c2
 8004bb8:	00000000 	.word	0x00000000
 8004bbc:	08004915 	.word	0x08004915
 8004bc0:	080050be 	.word	0x080050be

08004bc4 <_printf_common>:
 8004bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bc8:	4616      	mov	r6, r2
 8004bca:	4698      	mov	r8, r3
 8004bcc:	688a      	ldr	r2, [r1, #8]
 8004bce:	690b      	ldr	r3, [r1, #16]
 8004bd0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	bfb8      	it	lt
 8004bd8:	4613      	movlt	r3, r2
 8004bda:	6033      	str	r3, [r6, #0]
 8004bdc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004be0:	4607      	mov	r7, r0
 8004be2:	460c      	mov	r4, r1
 8004be4:	b10a      	cbz	r2, 8004bea <_printf_common+0x26>
 8004be6:	3301      	adds	r3, #1
 8004be8:	6033      	str	r3, [r6, #0]
 8004bea:	6823      	ldr	r3, [r4, #0]
 8004bec:	0699      	lsls	r1, r3, #26
 8004bee:	bf42      	ittt	mi
 8004bf0:	6833      	ldrmi	r3, [r6, #0]
 8004bf2:	3302      	addmi	r3, #2
 8004bf4:	6033      	strmi	r3, [r6, #0]
 8004bf6:	6825      	ldr	r5, [r4, #0]
 8004bf8:	f015 0506 	ands.w	r5, r5, #6
 8004bfc:	d106      	bne.n	8004c0c <_printf_common+0x48>
 8004bfe:	f104 0a19 	add.w	sl, r4, #25
 8004c02:	68e3      	ldr	r3, [r4, #12]
 8004c04:	6832      	ldr	r2, [r6, #0]
 8004c06:	1a9b      	subs	r3, r3, r2
 8004c08:	42ab      	cmp	r3, r5
 8004c0a:	dc26      	bgt.n	8004c5a <_printf_common+0x96>
 8004c0c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004c10:	6822      	ldr	r2, [r4, #0]
 8004c12:	3b00      	subs	r3, #0
 8004c14:	bf18      	it	ne
 8004c16:	2301      	movne	r3, #1
 8004c18:	0692      	lsls	r2, r2, #26
 8004c1a:	d42b      	bmi.n	8004c74 <_printf_common+0xb0>
 8004c1c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004c20:	4641      	mov	r1, r8
 8004c22:	4638      	mov	r0, r7
 8004c24:	47c8      	blx	r9
 8004c26:	3001      	adds	r0, #1
 8004c28:	d01e      	beq.n	8004c68 <_printf_common+0xa4>
 8004c2a:	6823      	ldr	r3, [r4, #0]
 8004c2c:	6922      	ldr	r2, [r4, #16]
 8004c2e:	f003 0306 	and.w	r3, r3, #6
 8004c32:	2b04      	cmp	r3, #4
 8004c34:	bf02      	ittt	eq
 8004c36:	68e5      	ldreq	r5, [r4, #12]
 8004c38:	6833      	ldreq	r3, [r6, #0]
 8004c3a:	1aed      	subeq	r5, r5, r3
 8004c3c:	68a3      	ldr	r3, [r4, #8]
 8004c3e:	bf0c      	ite	eq
 8004c40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c44:	2500      	movne	r5, #0
 8004c46:	4293      	cmp	r3, r2
 8004c48:	bfc4      	itt	gt
 8004c4a:	1a9b      	subgt	r3, r3, r2
 8004c4c:	18ed      	addgt	r5, r5, r3
 8004c4e:	2600      	movs	r6, #0
 8004c50:	341a      	adds	r4, #26
 8004c52:	42b5      	cmp	r5, r6
 8004c54:	d11a      	bne.n	8004c8c <_printf_common+0xc8>
 8004c56:	2000      	movs	r0, #0
 8004c58:	e008      	b.n	8004c6c <_printf_common+0xa8>
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	4652      	mov	r2, sl
 8004c5e:	4641      	mov	r1, r8
 8004c60:	4638      	mov	r0, r7
 8004c62:	47c8      	blx	r9
 8004c64:	3001      	adds	r0, #1
 8004c66:	d103      	bne.n	8004c70 <_printf_common+0xac>
 8004c68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004c6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c70:	3501      	adds	r5, #1
 8004c72:	e7c6      	b.n	8004c02 <_printf_common+0x3e>
 8004c74:	18e1      	adds	r1, r4, r3
 8004c76:	1c5a      	adds	r2, r3, #1
 8004c78:	2030      	movs	r0, #48	@ 0x30
 8004c7a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004c7e:	4422      	add	r2, r4
 8004c80:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004c84:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004c88:	3302      	adds	r3, #2
 8004c8a:	e7c7      	b.n	8004c1c <_printf_common+0x58>
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	4622      	mov	r2, r4
 8004c90:	4641      	mov	r1, r8
 8004c92:	4638      	mov	r0, r7
 8004c94:	47c8      	blx	r9
 8004c96:	3001      	adds	r0, #1
 8004c98:	d0e6      	beq.n	8004c68 <_printf_common+0xa4>
 8004c9a:	3601      	adds	r6, #1
 8004c9c:	e7d9      	b.n	8004c52 <_printf_common+0x8e>
	...

08004ca0 <_printf_i>:
 8004ca0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ca4:	7e0f      	ldrb	r7, [r1, #24]
 8004ca6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004ca8:	2f78      	cmp	r7, #120	@ 0x78
 8004caa:	4691      	mov	r9, r2
 8004cac:	4680      	mov	r8, r0
 8004cae:	460c      	mov	r4, r1
 8004cb0:	469a      	mov	sl, r3
 8004cb2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004cb6:	d807      	bhi.n	8004cc8 <_printf_i+0x28>
 8004cb8:	2f62      	cmp	r7, #98	@ 0x62
 8004cba:	d80a      	bhi.n	8004cd2 <_printf_i+0x32>
 8004cbc:	2f00      	cmp	r7, #0
 8004cbe:	f000 80d2 	beq.w	8004e66 <_printf_i+0x1c6>
 8004cc2:	2f58      	cmp	r7, #88	@ 0x58
 8004cc4:	f000 80b9 	beq.w	8004e3a <_printf_i+0x19a>
 8004cc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ccc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004cd0:	e03a      	b.n	8004d48 <_printf_i+0xa8>
 8004cd2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004cd6:	2b15      	cmp	r3, #21
 8004cd8:	d8f6      	bhi.n	8004cc8 <_printf_i+0x28>
 8004cda:	a101      	add	r1, pc, #4	@ (adr r1, 8004ce0 <_printf_i+0x40>)
 8004cdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ce0:	08004d39 	.word	0x08004d39
 8004ce4:	08004d4d 	.word	0x08004d4d
 8004ce8:	08004cc9 	.word	0x08004cc9
 8004cec:	08004cc9 	.word	0x08004cc9
 8004cf0:	08004cc9 	.word	0x08004cc9
 8004cf4:	08004cc9 	.word	0x08004cc9
 8004cf8:	08004d4d 	.word	0x08004d4d
 8004cfc:	08004cc9 	.word	0x08004cc9
 8004d00:	08004cc9 	.word	0x08004cc9
 8004d04:	08004cc9 	.word	0x08004cc9
 8004d08:	08004cc9 	.word	0x08004cc9
 8004d0c:	08004e4d 	.word	0x08004e4d
 8004d10:	08004d77 	.word	0x08004d77
 8004d14:	08004e07 	.word	0x08004e07
 8004d18:	08004cc9 	.word	0x08004cc9
 8004d1c:	08004cc9 	.word	0x08004cc9
 8004d20:	08004e6f 	.word	0x08004e6f
 8004d24:	08004cc9 	.word	0x08004cc9
 8004d28:	08004d77 	.word	0x08004d77
 8004d2c:	08004cc9 	.word	0x08004cc9
 8004d30:	08004cc9 	.word	0x08004cc9
 8004d34:	08004e0f 	.word	0x08004e0f
 8004d38:	6833      	ldr	r3, [r6, #0]
 8004d3a:	1d1a      	adds	r2, r3, #4
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	6032      	str	r2, [r6, #0]
 8004d40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004d44:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e09d      	b.n	8004e88 <_printf_i+0x1e8>
 8004d4c:	6833      	ldr	r3, [r6, #0]
 8004d4e:	6820      	ldr	r0, [r4, #0]
 8004d50:	1d19      	adds	r1, r3, #4
 8004d52:	6031      	str	r1, [r6, #0]
 8004d54:	0606      	lsls	r6, r0, #24
 8004d56:	d501      	bpl.n	8004d5c <_printf_i+0xbc>
 8004d58:	681d      	ldr	r5, [r3, #0]
 8004d5a:	e003      	b.n	8004d64 <_printf_i+0xc4>
 8004d5c:	0645      	lsls	r5, r0, #25
 8004d5e:	d5fb      	bpl.n	8004d58 <_printf_i+0xb8>
 8004d60:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004d64:	2d00      	cmp	r5, #0
 8004d66:	da03      	bge.n	8004d70 <_printf_i+0xd0>
 8004d68:	232d      	movs	r3, #45	@ 0x2d
 8004d6a:	426d      	negs	r5, r5
 8004d6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d70:	4859      	ldr	r0, [pc, #356]	@ (8004ed8 <_printf_i+0x238>)
 8004d72:	230a      	movs	r3, #10
 8004d74:	e011      	b.n	8004d9a <_printf_i+0xfa>
 8004d76:	6821      	ldr	r1, [r4, #0]
 8004d78:	6833      	ldr	r3, [r6, #0]
 8004d7a:	0608      	lsls	r0, r1, #24
 8004d7c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004d80:	d402      	bmi.n	8004d88 <_printf_i+0xe8>
 8004d82:	0649      	lsls	r1, r1, #25
 8004d84:	bf48      	it	mi
 8004d86:	b2ad      	uxthmi	r5, r5
 8004d88:	2f6f      	cmp	r7, #111	@ 0x6f
 8004d8a:	4853      	ldr	r0, [pc, #332]	@ (8004ed8 <_printf_i+0x238>)
 8004d8c:	6033      	str	r3, [r6, #0]
 8004d8e:	bf14      	ite	ne
 8004d90:	230a      	movne	r3, #10
 8004d92:	2308      	moveq	r3, #8
 8004d94:	2100      	movs	r1, #0
 8004d96:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004d9a:	6866      	ldr	r6, [r4, #4]
 8004d9c:	60a6      	str	r6, [r4, #8]
 8004d9e:	2e00      	cmp	r6, #0
 8004da0:	bfa2      	ittt	ge
 8004da2:	6821      	ldrge	r1, [r4, #0]
 8004da4:	f021 0104 	bicge.w	r1, r1, #4
 8004da8:	6021      	strge	r1, [r4, #0]
 8004daa:	b90d      	cbnz	r5, 8004db0 <_printf_i+0x110>
 8004dac:	2e00      	cmp	r6, #0
 8004dae:	d04b      	beq.n	8004e48 <_printf_i+0x1a8>
 8004db0:	4616      	mov	r6, r2
 8004db2:	fbb5 f1f3 	udiv	r1, r5, r3
 8004db6:	fb03 5711 	mls	r7, r3, r1, r5
 8004dba:	5dc7      	ldrb	r7, [r0, r7]
 8004dbc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004dc0:	462f      	mov	r7, r5
 8004dc2:	42bb      	cmp	r3, r7
 8004dc4:	460d      	mov	r5, r1
 8004dc6:	d9f4      	bls.n	8004db2 <_printf_i+0x112>
 8004dc8:	2b08      	cmp	r3, #8
 8004dca:	d10b      	bne.n	8004de4 <_printf_i+0x144>
 8004dcc:	6823      	ldr	r3, [r4, #0]
 8004dce:	07df      	lsls	r7, r3, #31
 8004dd0:	d508      	bpl.n	8004de4 <_printf_i+0x144>
 8004dd2:	6923      	ldr	r3, [r4, #16]
 8004dd4:	6861      	ldr	r1, [r4, #4]
 8004dd6:	4299      	cmp	r1, r3
 8004dd8:	bfde      	ittt	le
 8004dda:	2330      	movle	r3, #48	@ 0x30
 8004ddc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004de0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004de4:	1b92      	subs	r2, r2, r6
 8004de6:	6122      	str	r2, [r4, #16]
 8004de8:	f8cd a000 	str.w	sl, [sp]
 8004dec:	464b      	mov	r3, r9
 8004dee:	aa03      	add	r2, sp, #12
 8004df0:	4621      	mov	r1, r4
 8004df2:	4640      	mov	r0, r8
 8004df4:	f7ff fee6 	bl	8004bc4 <_printf_common>
 8004df8:	3001      	adds	r0, #1
 8004dfa:	d14a      	bne.n	8004e92 <_printf_i+0x1f2>
 8004dfc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004e00:	b004      	add	sp, #16
 8004e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e06:	6823      	ldr	r3, [r4, #0]
 8004e08:	f043 0320 	orr.w	r3, r3, #32
 8004e0c:	6023      	str	r3, [r4, #0]
 8004e0e:	4833      	ldr	r0, [pc, #204]	@ (8004edc <_printf_i+0x23c>)
 8004e10:	2778      	movs	r7, #120	@ 0x78
 8004e12:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004e16:	6823      	ldr	r3, [r4, #0]
 8004e18:	6831      	ldr	r1, [r6, #0]
 8004e1a:	061f      	lsls	r7, r3, #24
 8004e1c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004e20:	d402      	bmi.n	8004e28 <_printf_i+0x188>
 8004e22:	065f      	lsls	r7, r3, #25
 8004e24:	bf48      	it	mi
 8004e26:	b2ad      	uxthmi	r5, r5
 8004e28:	6031      	str	r1, [r6, #0]
 8004e2a:	07d9      	lsls	r1, r3, #31
 8004e2c:	bf44      	itt	mi
 8004e2e:	f043 0320 	orrmi.w	r3, r3, #32
 8004e32:	6023      	strmi	r3, [r4, #0]
 8004e34:	b11d      	cbz	r5, 8004e3e <_printf_i+0x19e>
 8004e36:	2310      	movs	r3, #16
 8004e38:	e7ac      	b.n	8004d94 <_printf_i+0xf4>
 8004e3a:	4827      	ldr	r0, [pc, #156]	@ (8004ed8 <_printf_i+0x238>)
 8004e3c:	e7e9      	b.n	8004e12 <_printf_i+0x172>
 8004e3e:	6823      	ldr	r3, [r4, #0]
 8004e40:	f023 0320 	bic.w	r3, r3, #32
 8004e44:	6023      	str	r3, [r4, #0]
 8004e46:	e7f6      	b.n	8004e36 <_printf_i+0x196>
 8004e48:	4616      	mov	r6, r2
 8004e4a:	e7bd      	b.n	8004dc8 <_printf_i+0x128>
 8004e4c:	6833      	ldr	r3, [r6, #0]
 8004e4e:	6825      	ldr	r5, [r4, #0]
 8004e50:	6961      	ldr	r1, [r4, #20]
 8004e52:	1d18      	adds	r0, r3, #4
 8004e54:	6030      	str	r0, [r6, #0]
 8004e56:	062e      	lsls	r6, r5, #24
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	d501      	bpl.n	8004e60 <_printf_i+0x1c0>
 8004e5c:	6019      	str	r1, [r3, #0]
 8004e5e:	e002      	b.n	8004e66 <_printf_i+0x1c6>
 8004e60:	0668      	lsls	r0, r5, #25
 8004e62:	d5fb      	bpl.n	8004e5c <_printf_i+0x1bc>
 8004e64:	8019      	strh	r1, [r3, #0]
 8004e66:	2300      	movs	r3, #0
 8004e68:	6123      	str	r3, [r4, #16]
 8004e6a:	4616      	mov	r6, r2
 8004e6c:	e7bc      	b.n	8004de8 <_printf_i+0x148>
 8004e6e:	6833      	ldr	r3, [r6, #0]
 8004e70:	1d1a      	adds	r2, r3, #4
 8004e72:	6032      	str	r2, [r6, #0]
 8004e74:	681e      	ldr	r6, [r3, #0]
 8004e76:	6862      	ldr	r2, [r4, #4]
 8004e78:	2100      	movs	r1, #0
 8004e7a:	4630      	mov	r0, r6
 8004e7c:	f7fb f9b0 	bl	80001e0 <memchr>
 8004e80:	b108      	cbz	r0, 8004e86 <_printf_i+0x1e6>
 8004e82:	1b80      	subs	r0, r0, r6
 8004e84:	6060      	str	r0, [r4, #4]
 8004e86:	6863      	ldr	r3, [r4, #4]
 8004e88:	6123      	str	r3, [r4, #16]
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e90:	e7aa      	b.n	8004de8 <_printf_i+0x148>
 8004e92:	6923      	ldr	r3, [r4, #16]
 8004e94:	4632      	mov	r2, r6
 8004e96:	4649      	mov	r1, r9
 8004e98:	4640      	mov	r0, r8
 8004e9a:	47d0      	blx	sl
 8004e9c:	3001      	adds	r0, #1
 8004e9e:	d0ad      	beq.n	8004dfc <_printf_i+0x15c>
 8004ea0:	6823      	ldr	r3, [r4, #0]
 8004ea2:	079b      	lsls	r3, r3, #30
 8004ea4:	d413      	bmi.n	8004ece <_printf_i+0x22e>
 8004ea6:	68e0      	ldr	r0, [r4, #12]
 8004ea8:	9b03      	ldr	r3, [sp, #12]
 8004eaa:	4298      	cmp	r0, r3
 8004eac:	bfb8      	it	lt
 8004eae:	4618      	movlt	r0, r3
 8004eb0:	e7a6      	b.n	8004e00 <_printf_i+0x160>
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	4632      	mov	r2, r6
 8004eb6:	4649      	mov	r1, r9
 8004eb8:	4640      	mov	r0, r8
 8004eba:	47d0      	blx	sl
 8004ebc:	3001      	adds	r0, #1
 8004ebe:	d09d      	beq.n	8004dfc <_printf_i+0x15c>
 8004ec0:	3501      	adds	r5, #1
 8004ec2:	68e3      	ldr	r3, [r4, #12]
 8004ec4:	9903      	ldr	r1, [sp, #12]
 8004ec6:	1a5b      	subs	r3, r3, r1
 8004ec8:	42ab      	cmp	r3, r5
 8004eca:	dcf2      	bgt.n	8004eb2 <_printf_i+0x212>
 8004ecc:	e7eb      	b.n	8004ea6 <_printf_i+0x206>
 8004ece:	2500      	movs	r5, #0
 8004ed0:	f104 0619 	add.w	r6, r4, #25
 8004ed4:	e7f5      	b.n	8004ec2 <_printf_i+0x222>
 8004ed6:	bf00      	nop
 8004ed8:	080050c9 	.word	0x080050c9
 8004edc:	080050da 	.word	0x080050da

08004ee0 <memmove>:
 8004ee0:	4288      	cmp	r0, r1
 8004ee2:	b510      	push	{r4, lr}
 8004ee4:	eb01 0402 	add.w	r4, r1, r2
 8004ee8:	d902      	bls.n	8004ef0 <memmove+0x10>
 8004eea:	4284      	cmp	r4, r0
 8004eec:	4623      	mov	r3, r4
 8004eee:	d807      	bhi.n	8004f00 <memmove+0x20>
 8004ef0:	1e43      	subs	r3, r0, #1
 8004ef2:	42a1      	cmp	r1, r4
 8004ef4:	d008      	beq.n	8004f08 <memmove+0x28>
 8004ef6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004efa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004efe:	e7f8      	b.n	8004ef2 <memmove+0x12>
 8004f00:	4402      	add	r2, r0
 8004f02:	4601      	mov	r1, r0
 8004f04:	428a      	cmp	r2, r1
 8004f06:	d100      	bne.n	8004f0a <memmove+0x2a>
 8004f08:	bd10      	pop	{r4, pc}
 8004f0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004f0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004f12:	e7f7      	b.n	8004f04 <memmove+0x24>

08004f14 <_sbrk_r>:
 8004f14:	b538      	push	{r3, r4, r5, lr}
 8004f16:	4d06      	ldr	r5, [pc, #24]	@ (8004f30 <_sbrk_r+0x1c>)
 8004f18:	2300      	movs	r3, #0
 8004f1a:	4604      	mov	r4, r0
 8004f1c:	4608      	mov	r0, r1
 8004f1e:	602b      	str	r3, [r5, #0]
 8004f20:	f7fb fed4 	bl	8000ccc <_sbrk>
 8004f24:	1c43      	adds	r3, r0, #1
 8004f26:	d102      	bne.n	8004f2e <_sbrk_r+0x1a>
 8004f28:	682b      	ldr	r3, [r5, #0]
 8004f2a:	b103      	cbz	r3, 8004f2e <_sbrk_r+0x1a>
 8004f2c:	6023      	str	r3, [r4, #0]
 8004f2e:	bd38      	pop	{r3, r4, r5, pc}
 8004f30:	200002b8 	.word	0x200002b8

08004f34 <memcpy>:
 8004f34:	440a      	add	r2, r1
 8004f36:	4291      	cmp	r1, r2
 8004f38:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004f3c:	d100      	bne.n	8004f40 <memcpy+0xc>
 8004f3e:	4770      	bx	lr
 8004f40:	b510      	push	{r4, lr}
 8004f42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f4a:	4291      	cmp	r1, r2
 8004f4c:	d1f9      	bne.n	8004f42 <memcpy+0xe>
 8004f4e:	bd10      	pop	{r4, pc}

08004f50 <_realloc_r>:
 8004f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f54:	4680      	mov	r8, r0
 8004f56:	4615      	mov	r5, r2
 8004f58:	460c      	mov	r4, r1
 8004f5a:	b921      	cbnz	r1, 8004f66 <_realloc_r+0x16>
 8004f5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f60:	4611      	mov	r1, r2
 8004f62:	f7ff bc4b 	b.w	80047fc <_malloc_r>
 8004f66:	b92a      	cbnz	r2, 8004f74 <_realloc_r+0x24>
 8004f68:	f7ff fbdc 	bl	8004724 <_free_r>
 8004f6c:	2400      	movs	r4, #0
 8004f6e:	4620      	mov	r0, r4
 8004f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f74:	f000 f81a 	bl	8004fac <_malloc_usable_size_r>
 8004f78:	4285      	cmp	r5, r0
 8004f7a:	4606      	mov	r6, r0
 8004f7c:	d802      	bhi.n	8004f84 <_realloc_r+0x34>
 8004f7e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004f82:	d8f4      	bhi.n	8004f6e <_realloc_r+0x1e>
 8004f84:	4629      	mov	r1, r5
 8004f86:	4640      	mov	r0, r8
 8004f88:	f7ff fc38 	bl	80047fc <_malloc_r>
 8004f8c:	4607      	mov	r7, r0
 8004f8e:	2800      	cmp	r0, #0
 8004f90:	d0ec      	beq.n	8004f6c <_realloc_r+0x1c>
 8004f92:	42b5      	cmp	r5, r6
 8004f94:	462a      	mov	r2, r5
 8004f96:	4621      	mov	r1, r4
 8004f98:	bf28      	it	cs
 8004f9a:	4632      	movcs	r2, r6
 8004f9c:	f7ff ffca 	bl	8004f34 <memcpy>
 8004fa0:	4621      	mov	r1, r4
 8004fa2:	4640      	mov	r0, r8
 8004fa4:	f7ff fbbe 	bl	8004724 <_free_r>
 8004fa8:	463c      	mov	r4, r7
 8004faa:	e7e0      	b.n	8004f6e <_realloc_r+0x1e>

08004fac <_malloc_usable_size_r>:
 8004fac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fb0:	1f18      	subs	r0, r3, #4
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	bfbc      	itt	lt
 8004fb6:	580b      	ldrlt	r3, [r1, r0]
 8004fb8:	18c0      	addlt	r0, r0, r3
 8004fba:	4770      	bx	lr

08004fbc <_init>:
 8004fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fbe:	bf00      	nop
 8004fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fc2:	bc08      	pop	{r3}
 8004fc4:	469e      	mov	lr, r3
 8004fc6:	4770      	bx	lr

08004fc8 <_fini>:
 8004fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fca:	bf00      	nop
 8004fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fce:	bc08      	pop	{r3}
 8004fd0:	469e      	mov	lr, r3
 8004fd2:	4770      	bx	lr
