
CAN_NormalMode-f407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a60  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08004bf0  08004bf0  00005bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cf0  08004cf0  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004cf0  08004cf0  00005cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004cf8  08004cf8  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cf8  08004cf8  00005cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004cfc  08004cfc  00005cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004d00  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000605c  2**0
                  CONTENTS
 10 .bss          00000228  2000005c  2000005c  0000605c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000284  20000284  0000605c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000efac  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fa8  00000000  00000000  00015038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000da8  00000000  00000000  00016fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000aae  00000000  00000000  00017d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021627  00000000  00000000  00018836  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ee5c  00000000  00000000  00039e5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cdcf4  00000000  00000000  00048cb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001169ad  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003f38  00000000  00000000  001169f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  0011a928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004bd8 	.word	0x08004bd8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08004bd8 	.word	0x08004bd8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <SysTick_Handler>:
extern UART_HandleTypeDef huart2;
extern TIM_HandleTypeDef htimer6;
extern CAN_HandleTypeDef hcan1;

void SysTick_Handler(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
	 HAL_IncTick();
 8000574:	f000 fd4c 	bl	8001010 <HAL_IncTick>
	 HAL_SYSTICK_IRQHandler();
 8000578:	f001 fcb9 	bl	8001eee <HAL_SYSTICK_IRQHandler>
}
 800057c:	bf00      	nop
 800057e:	bd80      	pop	{r7, pc}

08000580 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
//	Below func handles UART interrupt request, identify the reason
	HAL_UART_IRQHandler(&huart2);
 8000584:	4802      	ldr	r0, [pc, #8]	@ (8000590 <USART2_IRQHandler+0x10>)
 8000586:	f002 ff4b 	bl	8003420 <HAL_UART_IRQHandler>
}
 800058a:	bf00      	nop
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	20000078 	.word	0x20000078

08000594 <CAN1_TX_IRQHandler>:

void CAN1_TX_IRQHandler(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 8000598:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <CAN1_TX_IRQHandler+0x10>)
 800059a:	f001 f98f 	bl	80018bc <HAL_CAN_IRQHandler>
}
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	20000108 	.word	0x20000108

080005a8 <CAN1_RX0_IRQHandler>:

void CAN1_RX0_IRQHandler()
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 80005ac:	4802      	ldr	r0, [pc, #8]	@ (80005b8 <CAN1_RX0_IRQHandler+0x10>)
 80005ae:	f001 f985 	bl	80018bc <HAL_CAN_IRQHandler>
}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	20000108 	.word	0x20000108

080005bc <CAN1_RX1_IRQHandler>:

void CAN1_RX1_IRQHandler()
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 80005c0:	4802      	ldr	r0, [pc, #8]	@ (80005cc <CAN1_RX1_IRQHandler+0x10>)
 80005c2:	f001 f97b 	bl	80018bc <HAL_CAN_IRQHandler>
}
 80005c6:	bf00      	nop
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	20000108 	.word	0x20000108

080005d0 <CAN1_SCE_IRQHandler>:

void CAN1_SCE_IRQHandler(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 80005d4:	4802      	ldr	r0, [pc, #8]	@ (80005e0 <CAN1_SCE_IRQHandler+0x10>)
 80005d6:	f001 f971 	bl	80018bc <HAL_CAN_IRQHandler>
}
 80005da:	bf00      	nop
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	20000108 	.word	0x20000108

080005e4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htimer6);
 80005e8:	4802      	ldr	r0, [pc, #8]	@ (80005f4 <TIM6_DAC_IRQHandler+0x10>)
 80005ea:	f002 fc6b 	bl	8002ec4 <HAL_TIM_IRQHandler>
}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	200000c0 	.word	0x200000c0

080005f8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htimer6);
 80005fc:	4803      	ldr	r0, [pc, #12]	@ (800060c <EXTI0_IRQHandler+0x14>)
 80005fe:	f002 fbf1 	bl	8002de4 <HAL_TIM_Base_Start_IT>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000602:	2001      	movs	r0, #1
 8000604:	f001 fee2 	bl	80023cc <HAL_GPIO_EXTI_IRQHandler>
}
 8000608:	bf00      	nop
 800060a:	bd80      	pop	{r7, pc}
 800060c:	200000c0 	.word	0x200000c0

08000610 <main>:
UART_HandleTypeDef huart2;
TIM_HandleTypeDef  htimer6;
CAN_HandleTypeDef hcan1;

int main()
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
	HAL_Init();
 8000614:	f000 fcaa 	bl	8000f6c <HAL_Init>
	SystemClock_Config();
 8000618:	f000 f822 	bl	8000660 <SystemClock_Config>
	GPIO_Init();
 800061c:	f000 f88a 	bl	8000734 <GPIO_Init>
	UART2_Init();
 8000620:	f000 f8ea 	bl	80007f8 <UART2_Init>
	TIMER6_Init();
 8000624:	f000 f90e 	bl	8000844 <TIMER6_Init>

	CAN1_Init();
 8000628:	f000 f928 	bl	800087c <CAN1_Init>

	CAN_Filter_Config();
 800062c:	f000 f994 	bl	8000958 <CAN_Filter_Config>

	if(HAL_CAN_ActivateNotification(&hcan1,
 8000630:	f240 4103 	movw	r1, #1027	@ 0x403
 8000634:	4809      	ldr	r0, [pc, #36]	@ (800065c <main+0x4c>)
 8000636:	f001 f91b 	bl	8001870 <HAL_CAN_ActivateNotification>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <main+0x34>
			CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF) != HAL_OK)
	{
		Error_Handler();
 8000640:	f000 f9b0 	bl	80009a4 <Error_Handler>
	}

	if(HAL_CAN_Start(&hcan1) != HAL_OK)
 8000644:	4805      	ldr	r0, [pc, #20]	@ (800065c <main+0x4c>)
 8000646:	f000 fedd 	bl	8001404 <HAL_CAN_Start>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d002      	beq.n	8000656 <main+0x46>
	{
		Error_Handler();
 8000650:	f000 f9a8 	bl	80009a4 <Error_Handler>
	}

//	CAN1_Tx();


	while(1);
 8000654:	bf00      	nop
 8000656:	bf00      	nop
 8000658:	e7fd      	b.n	8000656 <main+0x46>
 800065a:	bf00      	nop
 800065c:	20000108 	.word	0x20000108

08000660 <SystemClock_Config>:
	return 0;
}


void SystemClock_Config(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b094      	sub	sp, #80	@ 0x50
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	f107 0320 	add.w	r3, r7, #32
 800066a:	2230      	movs	r2, #48	@ 0x30
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f003 fe32 	bl	80042d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000674:	f107 030c 	add.w	r3, r7, #12
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000684:	2300      	movs	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	4b28      	ldr	r3, [pc, #160]	@ (800072c <SystemClock_Config+0xcc>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800068c:	4a27      	ldr	r2, [pc, #156]	@ (800072c <SystemClock_Config+0xcc>)
 800068e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000692:	6413      	str	r3, [r2, #64]	@ 0x40
 8000694:	4b25      	ldr	r3, [pc, #148]	@ (800072c <SystemClock_Config+0xcc>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000698:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a0:	2300      	movs	r3, #0
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	4b22      	ldr	r3, [pc, #136]	@ (8000730 <SystemClock_Config+0xd0>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a21      	ldr	r2, [pc, #132]	@ (8000730 <SystemClock_Config+0xd0>)
 80006aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006ae:	6013      	str	r3, [r2, #0]
 80006b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000730 <SystemClock_Config+0xd0>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006bc:	2301      	movs	r3, #1
 80006be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006c4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c6:	2302      	movs	r3, #2
 80006c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ca:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006d0:	2308      	movs	r3, #8
 80006d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006d4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80006d8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006da:	2302      	movs	r3, #2
 80006dc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006de:	2307      	movs	r3, #7
 80006e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e2:	f107 0320 	add.w	r3, r7, #32
 80006e6:	4618      	mov	r0, r3
 80006e8:	f001 fe94 	bl	8002414 <HAL_RCC_OscConfig>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006f2:	f000 f957 	bl	80009a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f6:	230f      	movs	r3, #15
 80006f8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fa:	2302      	movs	r3, #2
 80006fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000702:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000706:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000708:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800070c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800070e:	f107 030c 	add.w	r3, r7, #12
 8000712:	2105      	movs	r1, #5
 8000714:	4618      	mov	r0, r3
 8000716:	f002 f8f5 	bl	8002904 <HAL_RCC_ClockConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000720:	f000 f940 	bl	80009a4 <Error_Handler>
  }
}
 8000724:	bf00      	nop
 8000726:	3750      	adds	r7, #80	@ 0x50
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40023800 	.word	0x40023800
 8000730:	40007000 	.word	0x40007000

08000734 <GPIO_Init>:

void GPIO_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08e      	sub	sp, #56	@ 0x38
 8000738:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	60fb      	str	r3, [r7, #12]
 800073e:	4b2b      	ldr	r3, [pc, #172]	@ (80007ec <GPIO_Init+0xb8>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	4a2a      	ldr	r2, [pc, #168]	@ (80007ec <GPIO_Init+0xb8>)
 8000744:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000748:	6313      	str	r3, [r2, #48]	@ 0x30
 800074a:	4b28      	ldr	r3, [pc, #160]	@ (80007ec <GPIO_Init+0xb8>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	60bb      	str	r3, [r7, #8]
 800075a:	4b24      	ldr	r3, [pc, #144]	@ (80007ec <GPIO_Init+0xb8>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075e:	4a23      	ldr	r2, [pc, #140]	@ (80007ec <GPIO_Init+0xb8>)
 8000760:	f043 0301 	orr.w	r3, r3, #1
 8000764:	6313      	str	r3, [r2, #48]	@ 0x30
 8000766:	4b21      	ldr	r3, [pc, #132]	@ (80007ec <GPIO_Init+0xb8>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	60bb      	str	r3, [r7, #8]
 8000770:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	4b1d      	ldr	r3, [pc, #116]	@ (80007ec <GPIO_Init+0xb8>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	4a1c      	ldr	r2, [pc, #112]	@ (80007ec <GPIO_Init+0xb8>)
 800077c:	f043 0308 	orr.w	r3, r3, #8
 8000780:	6313      	str	r3, [r2, #48]	@ 0x30
 8000782:	4b1a      	ldr	r3, [pc, #104]	@ (80007ec <GPIO_Init+0xb8>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	f003 0308 	and.w	r3, r3, #8
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	603b      	str	r3, [r7, #0]
 8000792:	4b16      	ldr	r3, [pc, #88]	@ (80007ec <GPIO_Init+0xb8>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	4a15      	ldr	r2, [pc, #84]	@ (80007ec <GPIO_Init+0xb8>)
 8000798:	f043 0302 	orr.w	r3, r3, #2
 800079c:	6313      	str	r3, [r2, #48]	@ 0x30
 800079e:	4b13      	ldr	r3, [pc, #76]	@ (80007ec <GPIO_Init+0xb8>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a2:	f003 0302 	and.w	r3, r3, #2
 80007a6:	603b      	str	r3, [r7, #0]
 80007a8:	683b      	ldr	r3, [r7, #0]

  GPIO_InitTypeDef ledgpio;
  ledgpio.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 80007aa:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80007ae:	627b      	str	r3, [r7, #36]	@ 0x24
  ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 80007b0:	2301      	movs	r3, #1
 80007b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  ledgpio.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD,&ledgpio);
 80007b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007bc:	4619      	mov	r1, r3
 80007be:	480c      	ldr	r0, [pc, #48]	@ (80007f0 <GPIO_Init+0xbc>)
 80007c0:	f001 fc34 	bl	800202c <HAL_GPIO_Init>

  GPIO_InitTypeDef pushButtongpio;
  pushButtongpio.Pin = GPIO_PIN_0;
 80007c4:	2301      	movs	r3, #1
 80007c6:	613b      	str	r3, [r7, #16]
  pushButtongpio.Mode = GPIO_MODE_IT_FALLING;
 80007c8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007cc:	617b      	str	r3, [r7, #20]
  pushButtongpio.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &pushButtongpio);
 80007d2:	f107 0310 	add.w	r3, r7, #16
 80007d6:	4619      	mov	r1, r3
 80007d8:	4806      	ldr	r0, [pc, #24]	@ (80007f4 <GPIO_Init+0xc0>)
 80007da:	f001 fc27 	bl	800202c <HAL_GPIO_Init>

  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007de:	2006      	movs	r0, #6
 80007e0:	f001 fb6b 	bl	8001eba <HAL_NVIC_EnableIRQ>
}
 80007e4:	bf00      	nop
 80007e6:	3738      	adds	r7, #56	@ 0x38
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40020c00 	.word	0x40020c00
 80007f4:	40020000 	.word	0x40020000

080007f8 <UART2_Init>:

void UART2_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 80007fc:	4b0f      	ldr	r3, [pc, #60]	@ (800083c <UART2_Init+0x44>)
 80007fe:	4a10      	ldr	r2, [pc, #64]	@ (8000840 <UART2_Init+0x48>)
 8000800:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000802:	4b0e      	ldr	r3, [pc, #56]	@ (800083c <UART2_Init+0x44>)
 8000804:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000808:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800080a:	4b0c      	ldr	r3, [pc, #48]	@ (800083c <UART2_Init+0x44>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000810:	4b0a      	ldr	r3, [pc, #40]	@ (800083c <UART2_Init+0x44>)
 8000812:	2200      	movs	r2, #0
 8000814:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000816:	4b09      	ldr	r3, [pc, #36]	@ (800083c <UART2_Init+0x44>)
 8000818:	2200      	movs	r2, #0
 800081a:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800081c:	4b07      	ldr	r3, [pc, #28]	@ (800083c <UART2_Init+0x44>)
 800081e:	2200      	movs	r2, #0
 8000820:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000822:	4b06      	ldr	r3, [pc, #24]	@ (800083c <UART2_Init+0x44>)
 8000824:	220c      	movs	r2, #12
 8000826:	615a      	str	r2, [r3, #20]
	if(HAL_UART_Init(&huart2) != HAL_OK){
 8000828:	4804      	ldr	r0, [pc, #16]	@ (800083c <UART2_Init+0x44>)
 800082a:	f002 fd1d 	bl	8003268 <HAL_UART_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <UART2_Init+0x40>
//		There is a problem
		Error_Handler();
 8000834:	f000 f8b6 	bl	80009a4 <Error_Handler>
	}
}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}
 800083c:	20000078 	.word	0x20000078
 8000840:	40004400 	.word	0x40004400

08000844 <TIMER6_Init>:

void TIMER6_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
	htimer6.Instance = TIM6;
 8000848:	4b0a      	ldr	r3, [pc, #40]	@ (8000874 <TIMER6_Init+0x30>)
 800084a:	4a0b      	ldr	r2, [pc, #44]	@ (8000878 <TIMER6_Init+0x34>)
 800084c:	601a      	str	r2, [r3, #0]
	htimer6.Init.Prescaler = 4999;
 800084e:	4b09      	ldr	r3, [pc, #36]	@ (8000874 <TIMER6_Init+0x30>)
 8000850:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000854:	605a      	str	r2, [r3, #4]
	htimer6.Init.Period = 10000-1;
 8000856:	4b07      	ldr	r3, [pc, #28]	@ (8000874 <TIMER6_Init+0x30>)
 8000858:	f242 720f 	movw	r2, #9999	@ 0x270f
 800085c:	60da      	str	r2, [r3, #12]
	if( HAL_TIM_Base_Init(&htimer6) != HAL_OK )
 800085e:	4805      	ldr	r0, [pc, #20]	@ (8000874 <TIMER6_Init+0x30>)
 8000860:	f002 fa70 	bl	8002d44 <HAL_TIM_Base_Init>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <TIMER6_Init+0x2a>
	{
	Error_Handler();
 800086a:	f000 f89b 	bl	80009a4 <Error_Handler>
	}
}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	200000c0 	.word	0x200000c0
 8000878:	40001000 	.word	0x40001000

0800087c <CAN1_Init>:

void CAN1_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
	hcan1.Instance = CAN1;
 8000880:	4b17      	ldr	r3, [pc, #92]	@ (80008e0 <CAN1_Init+0x64>)
 8000882:	4a18      	ldr	r2, [pc, #96]	@ (80008e4 <CAN1_Init+0x68>)
 8000884:	601a      	str	r2, [r3, #0]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000886:	4b16      	ldr	r3, [pc, #88]	@ (80008e0 <CAN1_Init+0x64>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
	hcan1.Init.AutoBusOff = ENABLE;
 800088c:	4b14      	ldr	r3, [pc, #80]	@ (80008e0 <CAN1_Init+0x64>)
 800088e:	2201      	movs	r2, #1
 8000890:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoRetransmission = ENABLE;
 8000892:	4b13      	ldr	r3, [pc, #76]	@ (80008e0 <CAN1_Init+0x64>)
 8000894:	2201      	movs	r2, #1
 8000896:	76da      	strb	r2, [r3, #27]
	hcan1.Init.AutoWakeUp = DISABLE;
 8000898:	4b11      	ldr	r3, [pc, #68]	@ (80008e0 <CAN1_Init+0x64>)
 800089a:	2200      	movs	r2, #0
 800089c:	769a      	strb	r2, [r3, #26]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 800089e:	4b10      	ldr	r3, [pc, #64]	@ (80008e0 <CAN1_Init+0x64>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 80008a4:	4b0e      	ldr	r3, [pc, #56]	@ (80008e0 <CAN1_Init+0x64>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	761a      	strb	r2, [r3, #24]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 80008aa:	4b0d      	ldr	r3, [pc, #52]	@ (80008e0 <CAN1_Init+0x64>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	775a      	strb	r2, [r3, #29]

	//	settings related to CAN bit timings
	hcan1.Init.Prescaler = 6;
 80008b0:	4b0b      	ldr	r3, [pc, #44]	@ (80008e0 <CAN1_Init+0x64>)
 80008b2:	2206      	movs	r2, #6
 80008b4:	605a      	str	r2, [r3, #4]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80008b6:	4b0a      	ldr	r3, [pc, #40]	@ (80008e0 <CAN1_Init+0x64>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 80008bc:	4b08      	ldr	r3, [pc, #32]	@ (80008e0 <CAN1_Init+0x64>)
 80008be:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 80008c2:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80008c4:	4b06      	ldr	r3, [pc, #24]	@ (80008e0 <CAN1_Init+0x64>)
 80008c6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80008ca:	615a      	str	r2, [r3, #20]
	if(HAL_CAN_Init(&hcan1) != HAL_OK)
 80008cc:	4804      	ldr	r0, [pc, #16]	@ (80008e0 <CAN1_Init+0x64>)
 80008ce:	f000 fbbf 	bl	8001050 <HAL_CAN_Init>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <CAN1_Init+0x60>
	{
		Error_Handler();
 80008d8:	f000 f864 	bl	80009a4 <Error_Handler>
	}

}
 80008dc:	bf00      	nop
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20000108 	.word	0x20000108
 80008e4:	40006400 	.word	0x40006400

080008e8 <CAN1_Tx>:

uint8_t led_no = 0;

void CAN1_Tx(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b088      	sub	sp, #32
 80008ec:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef TxHeader;
	uint32_t TxMailbox;

	uint8_t message;

	TxHeader.DLC = 1;
 80008ee:	2301      	movs	r3, #1
 80008f0:	61bb      	str	r3, [r7, #24]
	TxHeader.StdId = 0x65D;
 80008f2:	f240 635d 	movw	r3, #1629	@ 0x65d
 80008f6:	60bb      	str	r3, [r7, #8]
	TxHeader.IDE = CAN_ID_STD;
 80008f8:	2300      	movs	r3, #0
 80008fa:	613b      	str	r3, [r7, #16]
	TxHeader.RTR = CAN_RTR_DATA;
 80008fc:	2300      	movs	r3, #0
 80008fe:	617b      	str	r3, [r7, #20]

	message = ++led_no;
 8000900:	4b12      	ldr	r3, [pc, #72]	@ (800094c <CAN1_Tx+0x64>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	3301      	adds	r3, #1
 8000906:	b2da      	uxtb	r2, r3
 8000908:	4b10      	ldr	r3, [pc, #64]	@ (800094c <CAN1_Tx+0x64>)
 800090a:	701a      	strb	r2, [r3, #0]
 800090c:	4b0f      	ldr	r3, [pc, #60]	@ (800094c <CAN1_Tx+0x64>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	70fb      	strb	r3, [r7, #3]

	if(led_no == 4)
 8000912:	4b0e      	ldr	r3, [pc, #56]	@ (800094c <CAN1_Tx+0x64>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	2b04      	cmp	r3, #4
 8000918:	d102      	bne.n	8000920 <CAN1_Tx+0x38>
	{
		led_no = 0;
 800091a:	4b0c      	ldr	r3, [pc, #48]	@ (800094c <CAN1_Tx+0x64>)
 800091c:	2200      	movs	r2, #0
 800091e:	701a      	strb	r2, [r3, #0]
	}

	HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_13);
 8000920:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000924:	480a      	ldr	r0, [pc, #40]	@ (8000950 <CAN1_Tx+0x68>)
 8000926:	f001 fd36 	bl	8002396 <HAL_GPIO_TogglePin>

	if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, &message, &TxMailbox) != HAL_OK)
 800092a:	1d3b      	adds	r3, r7, #4
 800092c:	1cfa      	adds	r2, r7, #3
 800092e:	f107 0108 	add.w	r1, r7, #8
 8000932:	4808      	ldr	r0, [pc, #32]	@ (8000954 <CAN1_Tx+0x6c>)
 8000934:	f000 fdaa 	bl	800148c <HAL_CAN_AddTxMessage>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <CAN1_Tx+0x5a>
	{
		Error_Handler();
 800093e:	f000 f831 	bl	80009a4 <Error_Handler>
	}

}
 8000942:	bf00      	nop
 8000944:	3720      	adds	r7, #32
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000130 	.word	0x20000130
 8000950:	40020c00 	.word	0x40020c00
 8000954:	20000108 	.word	0x20000108

08000958 <CAN_Filter_Config>:

void CAN_Filter_Config(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b08a      	sub	sp, #40	@ 0x28
 800095c:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef can1_filter_init;
	can1_filter_init.FilterActivation = CAN_FILTER_ENABLE;
 800095e:	2301      	movs	r3, #1
 8000960:	623b      	str	r3, [r7, #32]
	can1_filter_init.FilterBank = 0;
 8000962:	2300      	movs	r3, #0
 8000964:	617b      	str	r3, [r7, #20]
	can1_filter_init.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000966:	2300      	movs	r3, #0
 8000968:	613b      	str	r3, [r7, #16]
	can1_filter_init.FilterIdHigh = 0x0000;
 800096a:	2300      	movs	r3, #0
 800096c:	603b      	str	r3, [r7, #0]
	can1_filter_init.FilterIdLow = 0x0000;
 800096e:	2300      	movs	r3, #0
 8000970:	607b      	str	r3, [r7, #4]
	can1_filter_init.FilterMaskIdHigh = 0x0000;
 8000972:	2300      	movs	r3, #0
 8000974:	60bb      	str	r3, [r7, #8]
	can1_filter_init.FilterMaskIdLow = 0x0000;
 8000976:	2300      	movs	r3, #0
 8000978:	60fb      	str	r3, [r7, #12]
	can1_filter_init.FilterMode = CAN_FILTERMODE_IDMASK;
 800097a:	2300      	movs	r3, #0
 800097c:	61bb      	str	r3, [r7, #24]
	can1_filter_init.FilterScale = CAN_FILTERSCALE_32BIT;
 800097e:	2301      	movs	r3, #1
 8000980:	61fb      	str	r3, [r7, #28]

	if(HAL_CAN_ConfigFilter(&hcan1, &can1_filter_init) != HAL_OK)
 8000982:	463b      	mov	r3, r7
 8000984:	4619      	mov	r1, r3
 8000986:	4806      	ldr	r0, [pc, #24]	@ (80009a0 <CAN_Filter_Config+0x48>)
 8000988:	f000 fc5e 	bl	8001248 <HAL_CAN_ConfigFilter>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <CAN_Filter_Config+0x3e>
	{
		Error_Handler();
 8000992:	f000 f807 	bl	80009a4 <Error_Handler>
	}

}
 8000996:	bf00      	nop
 8000998:	3728      	adds	r7, #40	@ 0x28
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	20000108 	.word	0x20000108

080009a4 <Error_Handler>:

void Error_Handler(void){
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
	while(1);
 80009a8:	bf00      	nop
 80009aa:	e7fd      	b.n	80009a8 <Error_Handler+0x4>

080009ac <HAL_CAN_TxMailbox0CompleteCallback>:
}

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b090      	sub	sp, #64	@ 0x40
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
	char msg[50];
	sprintf(msg, "Message Transmitted from Mailbox0\r\n");
 80009b4:	f107 030c 	add.w	r3, r7, #12
 80009b8:	490a      	ldr	r1, [pc, #40]	@ (80009e4 <HAL_CAN_TxMailbox0CompleteCallback+0x38>)
 80009ba:	4618      	mov	r0, r3
 80009bc:	f003 fc6c 	bl	8004298 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 80009c0:	f107 030c 	add.w	r3, r7, #12
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff fc03 	bl	80001d0 <strlen>
 80009ca:	4603      	mov	r3, r0
 80009cc:	b29a      	uxth	r2, r3
 80009ce:	f107 010c 	add.w	r1, r7, #12
 80009d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80009d6:	4804      	ldr	r0, [pc, #16]	@ (80009e8 <HAL_CAN_TxMailbox0CompleteCallback+0x3c>)
 80009d8:	f002 fc96 	bl	8003308 <HAL_UART_Transmit>
}
 80009dc:	bf00      	nop
 80009de:	3740      	adds	r7, #64	@ 0x40
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	08004bf0 	.word	0x08004bf0
 80009e8:	20000078 	.word	0x20000078

080009ec <HAL_CAN_TxMailbox1CompleteCallback>:
void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b090      	sub	sp, #64	@ 0x40
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
	char msg[50];
	sprintf(msg, "Message Transmitted from Mailbox1\r\n");
 80009f4:	f107 030c 	add.w	r3, r7, #12
 80009f8:	490a      	ldr	r1, [pc, #40]	@ (8000a24 <HAL_CAN_TxMailbox1CompleteCallback+0x38>)
 80009fa:	4618      	mov	r0, r3
 80009fc:	f003 fc4c 	bl	8004298 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000a00:	f107 030c 	add.w	r3, r7, #12
 8000a04:	4618      	mov	r0, r3
 8000a06:	f7ff fbe3 	bl	80001d0 <strlen>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	b29a      	uxth	r2, r3
 8000a0e:	f107 010c 	add.w	r1, r7, #12
 8000a12:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000a16:	4804      	ldr	r0, [pc, #16]	@ (8000a28 <HAL_CAN_TxMailbox1CompleteCallback+0x3c>)
 8000a18:	f002 fc76 	bl	8003308 <HAL_UART_Transmit>
}
 8000a1c:	bf00      	nop
 8000a1e:	3740      	adds	r7, #64	@ 0x40
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	08004c14 	.word	0x08004c14
 8000a28:	20000078 	.word	0x20000078

08000a2c <HAL_CAN_TxMailbox2CompleteCallback>:
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b090      	sub	sp, #64	@ 0x40
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
	char msg[50];
	sprintf(msg, "Message Transmitted from Mailbox2\r\n");
 8000a34:	f107 030c 	add.w	r3, r7, #12
 8000a38:	490a      	ldr	r1, [pc, #40]	@ (8000a64 <HAL_CAN_TxMailbox2CompleteCallback+0x38>)
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f003 fc2c 	bl	8004298 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000a40:	f107 030c 	add.w	r3, r7, #12
 8000a44:	4618      	mov	r0, r3
 8000a46:	f7ff fbc3 	bl	80001d0 <strlen>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	b29a      	uxth	r2, r3
 8000a4e:	f107 010c 	add.w	r1, r7, #12
 8000a52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000a56:	4804      	ldr	r0, [pc, #16]	@ (8000a68 <HAL_CAN_TxMailbox2CompleteCallback+0x3c>)
 8000a58:	f002 fc56 	bl	8003308 <HAL_UART_Transmit>
}
 8000a5c:	bf00      	nop
 8000a5e:	3740      	adds	r7, #64	@ 0x40
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	08004c38 	.word	0x08004c38
 8000a68:	20000078 	.word	0x20000078

08000a6c <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b098      	sub	sp, #96	@ 0x60
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rcvd_message[8];
	char msg[50];

	if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rcvd_message) != HAL_OK)
 8000a74:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000a78:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4828      	ldr	r0, [pc, #160]	@ (8000b20 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 8000a80:	f000 fdd4 	bl	800162c <HAL_CAN_GetRxMessage>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
	{
		Error_Handler();
 8000a8a:	f7ff ff8b 	bl	80009a4 <Error_Handler>
	}

	if(RxHeader.StdId == 0x65D && RxHeader.RTR == CAN_RTR_DATA)
 8000a8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000a90:	f240 625d 	movw	r2, #1629	@ 0x65d
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d111      	bne.n	8000abc <HAL_CAN_RxFifo0MsgPendingCallback+0x50>
 8000a98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d10e      	bne.n	8000abc <HAL_CAN_RxFifo0MsgPendingCallback+0x50>
	{
//		This is DATA frame sent by node1 to node2
		LED_Manage_Output(rcvd_message[0]);
 8000a9e:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f000 f86e 	bl	8000b84 <LED_Manage_Output>
		sprintf(msg, "Message Received: #%X\r\n", rcvd_message[0]);
 8000aa8:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8000aac:	461a      	mov	r2, r3
 8000aae:	f107 0308 	add.w	r3, r7, #8
 8000ab2:	491c      	ldr	r1, [pc, #112]	@ (8000b24 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f003 fbef 	bl	8004298 <siprintf>
 8000aba:	e020      	b.n	8000afe <HAL_CAN_RxFifo0MsgPendingCallback+0x92>
	}
	else if(RxHeader.StdId == 0x651 && RxHeader.RTR == CAN_RTR_REMOTE)
 8000abc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000abe:	f240 6251 	movw	r2, #1617	@ 0x651
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d107      	bne.n	8000ad6 <HAL_CAN_RxFifo0MsgPendingCallback+0x6a>
 8000ac6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000ac8:	2b02      	cmp	r3, #2
 8000aca:	d104      	bne.n	8000ad6 <HAL_CAN_RxFifo0MsgPendingCallback+0x6a>
	{
//		This is REMOTE frame sent by node1 to node2
		Send_Response(RxHeader.StdId);
 8000acc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f000 f8da 	bl	8000c88 <Send_Response>
 8000ad4:	e021      	b.n	8000b1a <HAL_CAN_RxFifo0MsgPendingCallback+0xae>
		return;
	}
	else if(RxHeader.StdId == 0x651 && RxHeader.RTR == CAN_RTR_DATA)
 8000ad6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000ad8:	f240 6251 	movw	r2, #1617	@ 0x651
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d10e      	bne.n	8000afe <HAL_CAN_RxFifo0MsgPendingCallback+0x92>
 8000ae0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d10b      	bne.n	8000afe <HAL_CAN_RxFifo0MsgPendingCallback+0x92>
	{
//		This is a REPLY (data frame) by node2 to node1
		sprintf(msg, "Reply Received: #%X\r\n", rcvd_message[0] << 8 | rcvd_message[1]);
 8000ae6:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8000aea:	021b      	lsls	r3, r3, #8
 8000aec:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8000af0:	431a      	orrs	r2, r3
 8000af2:	f107 0308 	add.w	r3, r7, #8
 8000af6:	490c      	ldr	r1, [pc, #48]	@ (8000b28 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 8000af8:	4618      	mov	r0, r3
 8000afa:	f003 fbcd 	bl	8004298 <siprintf>
	}

	HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000afe:	f107 0308 	add.w	r3, r7, #8
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff fb64 	bl	80001d0 <strlen>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	b29a      	uxth	r2, r3
 8000b0c:	f107 0108 	add.w	r1, r7, #8
 8000b10:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b14:	4805      	ldr	r0, [pc, #20]	@ (8000b2c <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8000b16:	f002 fbf7 	bl	8003308 <HAL_UART_Transmit>

}
 8000b1a:	3760      	adds	r7, #96	@ 0x60
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	20000108 	.word	0x20000108
 8000b24:	08004c5c 	.word	0x08004c5c
 8000b28:	08004c74 	.word	0x08004c74
 8000b2c:	20000078 	.word	0x20000078

08000b30 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b090      	sub	sp, #64	@ 0x40
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
	char msg[50];
	sprintf(msg, "CAN Error Detected\r\n");
 8000b38:	f107 030c 	add.w	r3, r7, #12
 8000b3c:	490a      	ldr	r1, [pc, #40]	@ (8000b68 <HAL_CAN_ErrorCallback+0x38>)
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f003 fbaa 	bl	8004298 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000b44:	f107 030c 	add.w	r3, r7, #12
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f7ff fb41 	bl	80001d0 <strlen>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	b29a      	uxth	r2, r3
 8000b52:	f107 010c 	add.w	r1, r7, #12
 8000b56:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b5a:	4804      	ldr	r0, [pc, #16]	@ (8000b6c <HAL_CAN_ErrorCallback+0x3c>)
 8000b5c:	f002 fbd4 	bl	8003308 <HAL_UART_Transmit>
}
 8000b60:	bf00      	nop
 8000b62:	3740      	adds	r7, #64	@ 0x40
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	08004c8c 	.word	0x08004c8c
 8000b6c:	20000078 	.word	0x20000078

08000b70 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
	CAN1_Tx();
 8000b78:	f7ff feb6 	bl	80008e8 <CAN1_Tx>
}
 8000b7c:	bf00      	nop
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <LED_Manage_Output>:

// led_numbers: 1 : D12(Green), 2 : D13(Orange), 3 : D14(Red), 4 : D15(Blue)
void LED_Manage_Output(uint8_t led_number)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	71fb      	strb	r3, [r7, #7]
	switch(led_number)
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	3b01      	subs	r3, #1
 8000b92:	2b03      	cmp	r3, #3
 8000b94:	d86e      	bhi.n	8000c74 <LED_Manage_Output+0xf0>
 8000b96:	a201      	add	r2, pc, #4	@ (adr r2, 8000b9c <LED_Manage_Output+0x18>)
 8000b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b9c:	08000bad 	.word	0x08000bad
 8000ba0:	08000bdf 	.word	0x08000bdf
 8000ba4:	08000c11 	.word	0x08000c11
 8000ba8:	08000c43 	.word	0x08000c43
	{
	case 1:
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000bac:	2201      	movs	r2, #1
 8000bae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000bb2:	4834      	ldr	r0, [pc, #208]	@ (8000c84 <LED_Manage_Output+0x100>)
 8000bb4:	f001 fbd6 	bl	8002364 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bbe:	4831      	ldr	r0, [pc, #196]	@ (8000c84 <LED_Manage_Output+0x100>)
 8000bc0:	f001 fbd0 	bl	8002364 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000bca:	482e      	ldr	r0, [pc, #184]	@ (8000c84 <LED_Manage_Output+0x100>)
 8000bcc:	f001 fbca 	bl	8002364 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000bd6:	482b      	ldr	r0, [pc, #172]	@ (8000c84 <LED_Manage_Output+0x100>)
 8000bd8:	f001 fbc4 	bl	8002364 <HAL_GPIO_WritePin>
		break;
 8000bdc:	e04d      	b.n	8000c7a <LED_Manage_Output+0xf6>
	case 2:
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000bde:	2200      	movs	r2, #0
 8000be0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000be4:	4827      	ldr	r0, [pc, #156]	@ (8000c84 <LED_Manage_Output+0x100>)
 8000be6:	f001 fbbd 	bl	8002364 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000bea:	2201      	movs	r2, #1
 8000bec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bf0:	4824      	ldr	r0, [pc, #144]	@ (8000c84 <LED_Manage_Output+0x100>)
 8000bf2:	f001 fbb7 	bl	8002364 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000bfc:	4821      	ldr	r0, [pc, #132]	@ (8000c84 <LED_Manage_Output+0x100>)
 8000bfe:	f001 fbb1 	bl	8002364 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000c02:	2200      	movs	r2, #0
 8000c04:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c08:	481e      	ldr	r0, [pc, #120]	@ (8000c84 <LED_Manage_Output+0x100>)
 8000c0a:	f001 fbab 	bl	8002364 <HAL_GPIO_WritePin>
		break;
 8000c0e:	e034      	b.n	8000c7a <LED_Manage_Output+0xf6>
	case 3:
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000c10:	2200      	movs	r2, #0
 8000c12:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c16:	481b      	ldr	r0, [pc, #108]	@ (8000c84 <LED_Manage_Output+0x100>)
 8000c18:	f001 fba4 	bl	8002364 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c22:	4818      	ldr	r0, [pc, #96]	@ (8000c84 <LED_Manage_Output+0x100>)
 8000c24:	f001 fb9e 	bl	8002364 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000c28:	2201      	movs	r2, #1
 8000c2a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c2e:	4815      	ldr	r0, [pc, #84]	@ (8000c84 <LED_Manage_Output+0x100>)
 8000c30:	f001 fb98 	bl	8002364 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000c34:	2200      	movs	r2, #0
 8000c36:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c3a:	4812      	ldr	r0, [pc, #72]	@ (8000c84 <LED_Manage_Output+0x100>)
 8000c3c:	f001 fb92 	bl	8002364 <HAL_GPIO_WritePin>
		break;
 8000c40:	e01b      	b.n	8000c7a <LED_Manage_Output+0xf6>
	case 4:
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000c42:	2200      	movs	r2, #0
 8000c44:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c48:	480e      	ldr	r0, [pc, #56]	@ (8000c84 <LED_Manage_Output+0x100>)
 8000c4a:	f001 fb8b 	bl	8002364 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c54:	480b      	ldr	r0, [pc, #44]	@ (8000c84 <LED_Manage_Output+0x100>)
 8000c56:	f001 fb85 	bl	8002364 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c60:	4808      	ldr	r0, [pc, #32]	@ (8000c84 <LED_Manage_Output+0x100>)
 8000c62:	f001 fb7f 	bl	8002364 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000c66:	2201      	movs	r2, #1
 8000c68:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c6c:	4805      	ldr	r0, [pc, #20]	@ (8000c84 <LED_Manage_Output+0x100>)
 8000c6e:	f001 fb79 	bl	8002364 <HAL_GPIO_WritePin>
		break;
 8000c72:	e002      	b.n	8000c7a <LED_Manage_Output+0xf6>
	default:
		Error_Handler();
 8000c74:	f7ff fe96 	bl	80009a4 <Error_Handler>
		break;
 8000c78:	bf00      	nop
	}
}
 8000c7a:	bf00      	nop
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40020c00 	.word	0x40020c00

08000c88 <Send_Response>:

void Send_Response(uint32_t StdId)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08a      	sub	sp, #40	@ 0x28
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
	CAN_TxHeaderTypeDef TxHeader;
	uint32_t TxMailbox;

	uint8_t response[2] = {0xAB, 0xCD};
 8000c90:	f64c 53ab 	movw	r3, #52651	@ 0xcdab
 8000c94:	813b      	strh	r3, [r7, #8]

	TxHeader.DLC = 2;
 8000c96:	2302      	movs	r3, #2
 8000c98:	623b      	str	r3, [r7, #32]
	TxHeader.StdId = StdId;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	613b      	str	r3, [r7, #16]
	TxHeader.IDE = CAN_ID_STD;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61bb      	str	r3, [r7, #24]
	TxHeader.RTR = CAN_RTR_DATA;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	61fb      	str	r3, [r7, #28]

	if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, response, &TxMailbox) != HAL_OK)
 8000ca6:	f107 030c 	add.w	r3, r7, #12
 8000caa:	f107 0208 	add.w	r2, r7, #8
 8000cae:	f107 0110 	add.w	r1, r7, #16
 8000cb2:	4806      	ldr	r0, [pc, #24]	@ (8000ccc <Send_Response+0x44>)
 8000cb4:	f000 fbea 	bl	800148c <HAL_CAN_AddTxMessage>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <Send_Response+0x3a>
	{
		Error_Handler();
 8000cbe:	f7ff fe71 	bl	80009a4 <Error_Handler>
	}

}
 8000cc2:	bf00      	nop
 8000cc4:	3728      	adds	r7, #40	@ 0x28
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000108 	.word	0x20000108

08000cd0 <HAL_MspInit>:

#include "main.h"

// processor specific
void HAL_MspInit(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
//  Here low level processor specific inits
//	1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cd4:	2003      	movs	r0, #3
 8000cd6:	f001 f8c9 	bl	8001e6c <HAL_NVIC_SetPriorityGrouping>

//	2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; // usg fault, mem fault, bus fault exceptions
 8000cda:	4b0d      	ldr	r3, [pc, #52]	@ (8000d10 <HAL_MspInit+0x40>)
 8000cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cde:	4a0c      	ldr	r2, [pc, #48]	@ (8000d10 <HAL_MspInit+0x40>)
 8000ce0:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8000ce4:	6253      	str	r3, [r2, #36]	@ 0x24

//	3. Configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2100      	movs	r1, #0
 8000cea:	f06f 000b 	mvn.w	r0, #11
 8000cee:	f001 f8c8 	bl	8001e82 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	f06f 000a 	mvn.w	r0, #10
 8000cfa:	f001 f8c2 	bl	8001e82 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2100      	movs	r1, #0
 8000d02:	f06f 0009 	mvn.w	r0, #9
 8000d06:	f001 f8bc 	bl	8001e82 <HAL_NVIC_SetPriority>

}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <HAL_UART_MspInit>:

//peripheral specific
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b08a      	sub	sp, #40	@ 0x28
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
//	here do the low level inits of USART2 peripheral
	GPIO_InitTypeDef gpio_uart;
//	1. enable the clock for the USART2 peripheral as well as for GPIOA peripheral
	__HAL_RCC_USART2_CLK_ENABLE();
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	613b      	str	r3, [r7, #16]
 8000d20:	4b1a      	ldr	r3, [pc, #104]	@ (8000d8c <HAL_UART_MspInit+0x78>)
 8000d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d24:	4a19      	ldr	r2, [pc, #100]	@ (8000d8c <HAL_UART_MspInit+0x78>)
 8000d26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d2a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d2c:	4b17      	ldr	r3, [pc, #92]	@ (8000d8c <HAL_UART_MspInit+0x78>)
 8000d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d34:	613b      	str	r3, [r7, #16]
 8000d36:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000d38:	2300      	movs	r3, #0
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	4b13      	ldr	r3, [pc, #76]	@ (8000d8c <HAL_UART_MspInit+0x78>)
 8000d3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d40:	4a12      	ldr	r2, [pc, #72]	@ (8000d8c <HAL_UART_MspInit+0x78>)
 8000d42:	f043 0301 	orr.w	r3, r3, #1
 8000d46:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d48:	4b10      	ldr	r3, [pc, #64]	@ (8000d8c <HAL_UART_MspInit+0x78>)
 8000d4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4c:	f003 0301 	and.w	r3, r3, #1
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	68fb      	ldr	r3, [r7, #12]
//	2. do the pin muxing configurations
	gpio_uart.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8000d54:	230c      	movs	r3, #12
 8000d56:	617b      	str	r3, [r7, #20]
	gpio_uart.Mode = GPIO_MODE_AF_PP;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	61bb      	str	r3, [r7, #24]
	gpio_uart.Pull = GPIO_PULLUP;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	61fb      	str	r3, [r7, #28]
	gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 8000d60:	2300      	movs	r3, #0
 8000d62:	623b      	str	r3, [r7, #32]
	gpio_uart.Alternate = GPIO_AF7_USART2;	// UART2_Tx, UART2_Rx
 8000d64:	2307      	movs	r3, #7
 8000d66:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 8000d68:	f107 0314 	add.w	r3, r7, #20
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4808      	ldr	r0, [pc, #32]	@ (8000d90 <HAL_UART_MspInit+0x7c>)
 8000d70:	f001 f95c 	bl	800202c <HAL_GPIO_Init>
//	3. enable the IRQ and set up the priority (NVIC settings)
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d74:	2026      	movs	r0, #38	@ 0x26
 8000d76:	f001 f8a0 	bl	8001eba <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	210f      	movs	r1, #15
 8000d7e:	2026      	movs	r0, #38	@ 0x26
 8000d80:	f001 f87f 	bl	8001e82 <HAL_NVIC_SetPriority>
}
 8000d84:	bf00      	nop
 8000d86:	3728      	adds	r7, #40	@ 0x28
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	40023800 	.word	0x40023800
 8000d90:	40020000 	.word	0x40020000

08000d94 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08a      	sub	sp, #40	@ 0x28
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpio_can;

	__HAL_RCC_CAN1_CLK_ENABLE();
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	613b      	str	r3, [r7, #16]
 8000da0:	4b27      	ldr	r3, [pc, #156]	@ (8000e40 <HAL_CAN_MspInit+0xac>)
 8000da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da4:	4a26      	ldr	r2, [pc, #152]	@ (8000e40 <HAL_CAN_MspInit+0xac>)
 8000da6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000daa:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dac:	4b24      	ldr	r3, [pc, #144]	@ (8000e40 <HAL_CAN_MspInit+0xac>)
 8000dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000db4:	613b      	str	r3, [r7, #16]
 8000db6:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000db8:	2300      	movs	r3, #0
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	4b20      	ldr	r3, [pc, #128]	@ (8000e40 <HAL_CAN_MspInit+0xac>)
 8000dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc0:	4a1f      	ldr	r2, [pc, #124]	@ (8000e40 <HAL_CAN_MspInit+0xac>)
 8000dc2:	f043 0302 	orr.w	r3, r3, #2
 8000dc6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dc8:	4b1d      	ldr	r3, [pc, #116]	@ (8000e40 <HAL_CAN_MspInit+0xac>)
 8000dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dcc:	f003 0302 	and.w	r3, r3, #2
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	68fb      	ldr	r3, [r7, #12]

//	CAN1 GPIO Configuration
//	PA11	---> CAN1_RX
//	PA12	---> CAN1_TX

	gpio_can.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8000dd4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000dd8:	617b      	str	r3, [r7, #20]
	gpio_can.Mode = GPIO_MODE_AF_PP;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	61bb      	str	r3, [r7, #24]
	gpio_can.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	61fb      	str	r3, [r7, #28]
	gpio_can.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de2:	2303      	movs	r3, #3
 8000de4:	623b      	str	r3, [r7, #32]
	gpio_can.Alternate = GPIO_AF9_CAN1;
 8000de6:	2309      	movs	r3, #9
 8000de8:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOB, &gpio_can);
 8000dea:	f107 0314 	add.w	r3, r7, #20
 8000dee:	4619      	mov	r1, r3
 8000df0:	4814      	ldr	r0, [pc, #80]	@ (8000e44 <HAL_CAN_MspInit+0xb0>)
 8000df2:	f001 f91b 	bl	800202c <HAL_GPIO_Init>

	HAL_NVIC_SetPriority(CAN1_TX_IRQn, 15, 0);
 8000df6:	2200      	movs	r2, #0
 8000df8:	210f      	movs	r1, #15
 8000dfa:	2013      	movs	r0, #19
 8000dfc:	f001 f841 	bl	8001e82 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 15, 0);
 8000e00:	2200      	movs	r2, #0
 8000e02:	210f      	movs	r1, #15
 8000e04:	2014      	movs	r0, #20
 8000e06:	f001 f83c 	bl	8001e82 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 15, 0);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	210f      	movs	r1, #15
 8000e0e:	2015      	movs	r0, #21
 8000e10:	f001 f837 	bl	8001e82 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 15, 0);
 8000e14:	2200      	movs	r2, #0
 8000e16:	210f      	movs	r1, #15
 8000e18:	2016      	movs	r0, #22
 8000e1a:	f001 f832 	bl	8001e82 <HAL_NVIC_SetPriority>

	HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000e1e:	2013      	movs	r0, #19
 8000e20:	f001 f84b 	bl	8001eba <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000e24:	2014      	movs	r0, #20
 8000e26:	f001 f848 	bl	8001eba <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000e2a:	2015      	movs	r0, #21
 8000e2c:	f001 f845 	bl	8001eba <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000e30:	2016      	movs	r0, #22
 8000e32:	f001 f842 	bl	8001eba <HAL_NVIC_EnableIRQ>

}
 8000e36:	bf00      	nop
 8000e38:	3728      	adds	r7, #40	@ 0x28
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40023800 	.word	0x40023800
 8000e44:	40020400 	.word	0x40020400

08000e48 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htimer)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  //1. enable the clock for the TIM6 peripheral
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e50:	2300      	movs	r3, #0
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	4b0b      	ldr	r3, [pc, #44]	@ (8000e84 <HAL_TIM_Base_MspInit+0x3c>)
 8000e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e58:	4a0a      	ldr	r2, [pc, #40]	@ (8000e84 <HAL_TIM_Base_MspInit+0x3c>)
 8000e5a:	f043 0310 	orr.w	r3, r3, #16
 8000e5e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e60:	4b08      	ldr	r3, [pc, #32]	@ (8000e84 <HAL_TIM_Base_MspInit+0x3c>)
 8000e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e64:	f003 0310 	and.w	r3, r3, #16
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	68fb      	ldr	r3, [r7, #12]

  //2. Enable the IRQ of TIM6
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e6c:	2036      	movs	r0, #54	@ 0x36
 8000e6e:	f001 f824 	bl	8001eba <HAL_NVIC_EnableIRQ>

  //3. setup the priority for TIM6_DAC_IRQn
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn,15,0);
 8000e72:	2200      	movs	r2, #0
 8000e74:	210f      	movs	r1, #15
 8000e76:	2036      	movs	r0, #54	@ 0x36
 8000e78:	f001 f803 	bl	8001e82 <HAL_NVIC_SetPriority>
}
 8000e7c:	bf00      	nop
 8000e7e:	3710      	adds	r7, #16
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40023800 	.word	0x40023800

08000e88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b086      	sub	sp, #24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e90:	4a14      	ldr	r2, [pc, #80]	@ (8000ee4 <_sbrk+0x5c>)
 8000e92:	4b15      	ldr	r3, [pc, #84]	@ (8000ee8 <_sbrk+0x60>)
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e9c:	4b13      	ldr	r3, [pc, #76]	@ (8000eec <_sbrk+0x64>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d102      	bne.n	8000eaa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ea4:	4b11      	ldr	r3, [pc, #68]	@ (8000eec <_sbrk+0x64>)
 8000ea6:	4a12      	ldr	r2, [pc, #72]	@ (8000ef0 <_sbrk+0x68>)
 8000ea8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eaa:	4b10      	ldr	r3, [pc, #64]	@ (8000eec <_sbrk+0x64>)
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d207      	bcs.n	8000ec8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000eb8:	f003 fa16 	bl	80042e8 <__errno>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	220c      	movs	r2, #12
 8000ec0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ec2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ec6:	e009      	b.n	8000edc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ec8:	4b08      	ldr	r3, [pc, #32]	@ (8000eec <_sbrk+0x64>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ece:	4b07      	ldr	r3, [pc, #28]	@ (8000eec <_sbrk+0x64>)
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	4a05      	ldr	r2, [pc, #20]	@ (8000eec <_sbrk+0x64>)
 8000ed8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eda:	68fb      	ldr	r3, [r7, #12]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3718      	adds	r7, #24
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20020000 	.word	0x20020000
 8000ee8:	00000400 	.word	0x00000400
 8000eec:	20000134 	.word	0x20000134
 8000ef0:	20000288 	.word	0x20000288

08000ef4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ef8:	4b06      	ldr	r3, [pc, #24]	@ (8000f14 <SystemInit+0x20>)
 8000efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000efe:	4a05      	ldr	r2, [pc, #20]	@ (8000f14 <SystemInit+0x20>)
 8000f00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f18:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f50 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f1c:	f7ff ffea 	bl	8000ef4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f20:	480c      	ldr	r0, [pc, #48]	@ (8000f54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f22:	490d      	ldr	r1, [pc, #52]	@ (8000f58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f24:	4a0d      	ldr	r2, [pc, #52]	@ (8000f5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f28:	e002      	b.n	8000f30 <LoopCopyDataInit>

08000f2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f2e:	3304      	adds	r3, #4

08000f30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f34:	d3f9      	bcc.n	8000f2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f36:	4a0a      	ldr	r2, [pc, #40]	@ (8000f60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f38:	4c0a      	ldr	r4, [pc, #40]	@ (8000f64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f3c:	e001      	b.n	8000f42 <LoopFillZerobss>

08000f3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f40:	3204      	adds	r2, #4

08000f42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f44:	d3fb      	bcc.n	8000f3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f46:	f003 f9d5 	bl	80042f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f4a:	f7ff fb61 	bl	8000610 <main>
  bx  lr    
 8000f4e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f58:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000f5c:	08004d00 	.word	0x08004d00
  ldr r2, =_sbss
 8000f60:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000f64:	20000284 	.word	0x20000284

08000f68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f68:	e7fe      	b.n	8000f68 <ADC_IRQHandler>
	...

08000f6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f70:	4b0e      	ldr	r3, [pc, #56]	@ (8000fac <HAL_Init+0x40>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a0d      	ldr	r2, [pc, #52]	@ (8000fac <HAL_Init+0x40>)
 8000f76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000fac <HAL_Init+0x40>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a0a      	ldr	r2, [pc, #40]	@ (8000fac <HAL_Init+0x40>)
 8000f82:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f88:	4b08      	ldr	r3, [pc, #32]	@ (8000fac <HAL_Init+0x40>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a07      	ldr	r2, [pc, #28]	@ (8000fac <HAL_Init+0x40>)
 8000f8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f94:	2003      	movs	r0, #3
 8000f96:	f000 ff69 	bl	8001e6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f9a:	2000      	movs	r0, #0
 8000f9c:	f000 f808 	bl	8000fb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fa0:	f7ff fe96 	bl	8000cd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40023c00 	.word	0x40023c00

08000fb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fb8:	4b12      	ldr	r3, [pc, #72]	@ (8001004 <HAL_InitTick+0x54>)
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	4b12      	ldr	r3, [pc, #72]	@ (8001008 <HAL_InitTick+0x58>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f000 ff81 	bl	8001ed6 <HAL_SYSTICK_Config>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e00e      	b.n	8000ffc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2b0f      	cmp	r3, #15
 8000fe2:	d80a      	bhi.n	8000ffa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	6879      	ldr	r1, [r7, #4]
 8000fe8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000fec:	f000 ff49 	bl	8001e82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ff0:	4a06      	ldr	r2, [pc, #24]	@ (800100c <HAL_InitTick+0x5c>)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	e000      	b.n	8000ffc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20000000 	.word	0x20000000
 8001008:	20000008 	.word	0x20000008
 800100c:	20000004 	.word	0x20000004

08001010 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001014:	4b06      	ldr	r3, [pc, #24]	@ (8001030 <HAL_IncTick+0x20>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	461a      	mov	r2, r3
 800101a:	4b06      	ldr	r3, [pc, #24]	@ (8001034 <HAL_IncTick+0x24>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4413      	add	r3, r2
 8001020:	4a04      	ldr	r2, [pc, #16]	@ (8001034 <HAL_IncTick+0x24>)
 8001022:	6013      	str	r3, [r2, #0]
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	20000008 	.word	0x20000008
 8001034:	20000138 	.word	0x20000138

08001038 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  return uwTick;
 800103c:	4b03      	ldr	r3, [pc, #12]	@ (800104c <HAL_GetTick+0x14>)
 800103e:	681b      	ldr	r3, [r3, #0]
}
 8001040:	4618      	mov	r0, r3
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	20000138 	.word	0x20000138

08001050 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d101      	bne.n	8001062 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e0ed      	b.n	800123e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001068:	b2db      	uxtb	r3, r3
 800106a:	2b00      	cmp	r3, #0
 800106c:	d102      	bne.n	8001074 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f7ff fe90 	bl	8000d94 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f042 0201 	orr.w	r2, r2, #1
 8001082:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001084:	f7ff ffd8 	bl	8001038 <HAL_GetTick>
 8001088:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800108a:	e012      	b.n	80010b2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800108c:	f7ff ffd4 	bl	8001038 <HAL_GetTick>
 8001090:	4602      	mov	r2, r0
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	2b0a      	cmp	r3, #10
 8001098:	d90b      	bls.n	80010b2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800109e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2205      	movs	r2, #5
 80010aa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e0c5      	b.n	800123e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f003 0301 	and.w	r3, r3, #1
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d0e5      	beq.n	800108c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f022 0202 	bic.w	r2, r2, #2
 80010ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010d0:	f7ff ffb2 	bl	8001038 <HAL_GetTick>
 80010d4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80010d6:	e012      	b.n	80010fe <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010d8:	f7ff ffae 	bl	8001038 <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	2b0a      	cmp	r3, #10
 80010e4:	d90b      	bls.n	80010fe <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010ea:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2205      	movs	r2, #5
 80010f6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e09f      	b.n	800123e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f003 0302 	and.w	r3, r3, #2
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1e5      	bne.n	80010d8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	7e1b      	ldrb	r3, [r3, #24]
 8001110:	2b01      	cmp	r3, #1
 8001112:	d108      	bne.n	8001126 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	e007      	b.n	8001136 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001134:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	7e5b      	ldrb	r3, [r3, #25]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d108      	bne.n	8001150 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	e007      	b.n	8001160 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800115e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	7e9b      	ldrb	r3, [r3, #26]
 8001164:	2b01      	cmp	r3, #1
 8001166:	d108      	bne.n	800117a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f042 0220 	orr.w	r2, r2, #32
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	e007      	b.n	800118a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f022 0220 	bic.w	r2, r2, #32
 8001188:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	7edb      	ldrb	r3, [r3, #27]
 800118e:	2b01      	cmp	r3, #1
 8001190:	d108      	bne.n	80011a4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f022 0210 	bic.w	r2, r2, #16
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	e007      	b.n	80011b4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f042 0210 	orr.w	r2, r2, #16
 80011b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	7f1b      	ldrb	r3, [r3, #28]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d108      	bne.n	80011ce <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f042 0208 	orr.w	r2, r2, #8
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	e007      	b.n	80011de <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f022 0208 	bic.w	r2, r2, #8
 80011dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	7f5b      	ldrb	r3, [r3, #29]
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d108      	bne.n	80011f8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f042 0204 	orr.w	r2, r2, #4
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	e007      	b.n	8001208 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f022 0204 	bic.w	r2, r2, #4
 8001206:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	689a      	ldr	r2, [r3, #8]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	431a      	orrs	r2, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	691b      	ldr	r3, [r3, #16]
 8001216:	431a      	orrs	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	695b      	ldr	r3, [r3, #20]
 800121c:	ea42 0103 	orr.w	r1, r2, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	1e5a      	subs	r2, r3, #1
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	430a      	orrs	r2, r1
 800122c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2200      	movs	r2, #0
 8001232:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2201      	movs	r2, #1
 8001238:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
	...

08001248 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001248:	b480      	push	{r7}
 800124a:	b087      	sub	sp, #28
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001258:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 800125a:	7dfb      	ldrb	r3, [r7, #23]
 800125c:	2b01      	cmp	r3, #1
 800125e:	d003      	beq.n	8001268 <HAL_CAN_ConfigFilter+0x20>
 8001260:	7dfb      	ldrb	r3, [r7, #23]
 8001262:	2b02      	cmp	r3, #2
 8001264:	f040 80be 	bne.w	80013e4 <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001268:	4b65      	ldr	r3, [pc, #404]	@ (8001400 <HAL_CAN_ConfigFilter+0x1b8>)
 800126a:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001272:	f043 0201 	orr.w	r2, r3, #1
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001282:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001296:	021b      	lsls	r3, r3, #8
 8001298:	431a      	orrs	r2, r3
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	695b      	ldr	r3, [r3, #20]
 80012a4:	f003 031f 	and.w	r3, r3, #31
 80012a8:	2201      	movs	r2, #1
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	43db      	mvns	r3, r3
 80012ba:	401a      	ands	r2, r3
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	69db      	ldr	r3, [r3, #28]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d123      	bne.n	8001312 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	43db      	mvns	r3, r3
 80012d4:	401a      	ands	r2, r3
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012e8:	683a      	ldr	r2, [r7, #0]
 80012ea:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80012ec:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	3248      	adds	r2, #72	@ 0x48
 80012f2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001306:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001308:	6939      	ldr	r1, [r7, #16]
 800130a:	3348      	adds	r3, #72	@ 0x48
 800130c:	00db      	lsls	r3, r3, #3
 800130e:	440b      	add	r3, r1
 8001310:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	69db      	ldr	r3, [r3, #28]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d122      	bne.n	8001360 <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	431a      	orrs	r2, r3
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001336:	683a      	ldr	r2, [r7, #0]
 8001338:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800133a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	3248      	adds	r2, #72	@ 0x48
 8001340:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	68db      	ldr	r3, [r3, #12]
 800134e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001354:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001356:	6939      	ldr	r1, [r7, #16]
 8001358:	3348      	adds	r3, #72	@ 0x48
 800135a:	00db      	lsls	r3, r3, #3
 800135c:	440b      	add	r3, r1
 800135e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d109      	bne.n	800137c <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	43db      	mvns	r3, r3
 8001372:	401a      	ands	r2, r3
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800137a:	e007      	b.n	800138c <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	431a      	orrs	r2, r3
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	691b      	ldr	r3, [r3, #16]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d109      	bne.n	80013a8 <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	43db      	mvns	r3, r3
 800139e:	401a      	ands	r2, r3
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80013a6:	e007      	b.n	80013b8 <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	431a      	orrs	r2, r3
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	6a1b      	ldr	r3, [r3, #32]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d107      	bne.n	80013d0 <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	431a      	orrs	r2, r3
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80013d6:	f023 0201 	bic.w	r2, r3, #1
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80013e0:	2300      	movs	r3, #0
 80013e2:	e006      	b.n	80013f2 <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013e8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
  }
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	371c      	adds	r7, #28
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	40006400 	.word	0x40006400

08001404 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001412:	b2db      	uxtb	r3, r3
 8001414:	2b01      	cmp	r3, #1
 8001416:	d12e      	bne.n	8001476 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2202      	movs	r2, #2
 800141c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f022 0201 	bic.w	r2, r2, #1
 800142e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001430:	f7ff fe02 	bl	8001038 <HAL_GetTick>
 8001434:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001436:	e012      	b.n	800145e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001438:	f7ff fdfe 	bl	8001038 <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b0a      	cmp	r3, #10
 8001444:	d90b      	bls.n	800145e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800144a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2205      	movs	r2, #5
 8001456:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e012      	b.n	8001484 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f003 0301 	and.w	r3, r3, #1
 8001468:	2b00      	cmp	r3, #0
 800146a:	d1e5      	bne.n	8001438 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2200      	movs	r2, #0
 8001470:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001472:	2300      	movs	r3, #0
 8001474:	e006      	b.n	8001484 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800147a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
  }
}
 8001484:	4618      	mov	r0, r3
 8001486:	3710      	adds	r7, #16
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800148c:	b480      	push	{r7}
 800148e:	b089      	sub	sp, #36	@ 0x24
 8001490:	af00      	add	r7, sp, #0
 8001492:	60f8      	str	r0, [r7, #12]
 8001494:	60b9      	str	r1, [r7, #8]
 8001496:	607a      	str	r2, [r7, #4]
 8001498:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014a0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80014aa:	7ffb      	ldrb	r3, [r7, #31]
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d003      	beq.n	80014b8 <HAL_CAN_AddTxMessage+0x2c>
 80014b0:	7ffb      	ldrb	r3, [r7, #31]
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	f040 80ad 	bne.w	8001612 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d10a      	bne.n	80014d8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d105      	bne.n	80014d8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	f000 8095 	beq.w	8001602 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	0e1b      	lsrs	r3, r3, #24
 80014dc:	f003 0303 	and.w	r3, r3, #3
 80014e0:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80014e2:	2201      	movs	r2, #1
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	409a      	lsls	r2, r3
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d10d      	bne.n	8001510 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80014fe:	68f9      	ldr	r1, [r7, #12]
 8001500:	6809      	ldr	r1, [r1, #0]
 8001502:	431a      	orrs	r2, r3
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	3318      	adds	r3, #24
 8001508:	011b      	lsls	r3, r3, #4
 800150a:	440b      	add	r3, r1
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	e00f      	b.n	8001530 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800151a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001520:	68f9      	ldr	r1, [r7, #12]
 8001522:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001524:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	3318      	adds	r3, #24
 800152a:	011b      	lsls	r3, r3, #4
 800152c:	440b      	add	r3, r1
 800152e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	6819      	ldr	r1, [r3, #0]
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	691a      	ldr	r2, [r3, #16]
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	3318      	adds	r3, #24
 800153c:	011b      	lsls	r3, r3, #4
 800153e:	440b      	add	r3, r1
 8001540:	3304      	adds	r3, #4
 8001542:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	7d1b      	ldrb	r3, [r3, #20]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d111      	bne.n	8001570 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	3318      	adds	r3, #24
 8001554:	011b      	lsls	r3, r3, #4
 8001556:	4413      	add	r3, r2
 8001558:	3304      	adds	r3, #4
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	68fa      	ldr	r2, [r7, #12]
 800155e:	6811      	ldr	r1, [r2, #0]
 8001560:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	3318      	adds	r3, #24
 8001568:	011b      	lsls	r3, r3, #4
 800156a:	440b      	add	r3, r1
 800156c:	3304      	adds	r3, #4
 800156e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	3307      	adds	r3, #7
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	061a      	lsls	r2, r3, #24
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	3306      	adds	r3, #6
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	041b      	lsls	r3, r3, #16
 8001580:	431a      	orrs	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	3305      	adds	r3, #5
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	021b      	lsls	r3, r3, #8
 800158a:	4313      	orrs	r3, r2
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	3204      	adds	r2, #4
 8001590:	7812      	ldrb	r2, [r2, #0]
 8001592:	4610      	mov	r0, r2
 8001594:	68fa      	ldr	r2, [r7, #12]
 8001596:	6811      	ldr	r1, [r2, #0]
 8001598:	ea43 0200 	orr.w	r2, r3, r0
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	011b      	lsls	r3, r3, #4
 80015a0:	440b      	add	r3, r1
 80015a2:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80015a6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	3303      	adds	r3, #3
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	061a      	lsls	r2, r3, #24
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	3302      	adds	r3, #2
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	041b      	lsls	r3, r3, #16
 80015b8:	431a      	orrs	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	3301      	adds	r3, #1
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	021b      	lsls	r3, r3, #8
 80015c2:	4313      	orrs	r3, r2
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	7812      	ldrb	r2, [r2, #0]
 80015c8:	4610      	mov	r0, r2
 80015ca:	68fa      	ldr	r2, [r7, #12]
 80015cc:	6811      	ldr	r1, [r2, #0]
 80015ce:	ea43 0200 	orr.w	r2, r3, r0
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	011b      	lsls	r3, r3, #4
 80015d6:	440b      	add	r3, r1
 80015d8:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80015dc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	3318      	adds	r3, #24
 80015e6:	011b      	lsls	r3, r3, #4
 80015e8:	4413      	add	r3, r2
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	68fa      	ldr	r2, [r7, #12]
 80015ee:	6811      	ldr	r1, [r2, #0]
 80015f0:	f043 0201 	orr.w	r2, r3, #1
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	3318      	adds	r3, #24
 80015f8:	011b      	lsls	r3, r3, #4
 80015fa:	440b      	add	r3, r1
 80015fc:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80015fe:	2300      	movs	r3, #0
 8001600:	e00e      	b.n	8001620 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001606:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e006      	b.n	8001620 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001616:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
  }
}
 8001620:	4618      	mov	r0, r3
 8001622:	3724      	adds	r7, #36	@ 0x24
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800162c:	b480      	push	{r7}
 800162e:	b087      	sub	sp, #28
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
 8001638:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001640:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001642:	7dfb      	ldrb	r3, [r7, #23]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d003      	beq.n	8001650 <HAL_CAN_GetRxMessage+0x24>
 8001648:	7dfb      	ldrb	r3, [r7, #23]
 800164a:	2b02      	cmp	r3, #2
 800164c:	f040 8103 	bne.w	8001856 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d10e      	bne.n	8001674 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	f003 0303 	and.w	r3, r3, #3
 8001660:	2b00      	cmp	r3, #0
 8001662:	d116      	bne.n	8001692 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001668:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e0f7      	b.n	8001864 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	691b      	ldr	r3, [r3, #16]
 800167a:	f003 0303 	and.w	r3, r3, #3
 800167e:	2b00      	cmp	r3, #0
 8001680:	d107      	bne.n	8001692 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001686:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e0e8      	b.n	8001864 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	331b      	adds	r3, #27
 800169a:	011b      	lsls	r3, r3, #4
 800169c:	4413      	add	r3, r2
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0204 	and.w	r2, r3, #4
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d10c      	bne.n	80016ca <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	331b      	adds	r3, #27
 80016b8:	011b      	lsls	r3, r3, #4
 80016ba:	4413      	add	r3, r2
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	0d5b      	lsrs	r3, r3, #21
 80016c0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	e00b      	b.n	80016e2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	331b      	adds	r3, #27
 80016d2:	011b      	lsls	r3, r3, #4
 80016d4:	4413      	add	r3, r2
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	08db      	lsrs	r3, r3, #3
 80016da:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	331b      	adds	r3, #27
 80016ea:	011b      	lsls	r3, r3, #4
 80016ec:	4413      	add	r3, r2
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0202 	and.w	r2, r3, #2
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	331b      	adds	r3, #27
 8001700:	011b      	lsls	r3, r3, #4
 8001702:	4413      	add	r3, r2
 8001704:	3304      	adds	r3, #4
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0308 	and.w	r3, r3, #8
 800170c:	2b00      	cmp	r3, #0
 800170e:	d003      	beq.n	8001718 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2208      	movs	r2, #8
 8001714:	611a      	str	r2, [r3, #16]
 8001716:	e00b      	b.n	8001730 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	331b      	adds	r3, #27
 8001720:	011b      	lsls	r3, r3, #4
 8001722:	4413      	add	r3, r2
 8001724:	3304      	adds	r3, #4
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 020f 	and.w	r2, r3, #15
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	331b      	adds	r3, #27
 8001738:	011b      	lsls	r3, r3, #4
 800173a:	4413      	add	r3, r2
 800173c:	3304      	adds	r3, #4
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	0a1b      	lsrs	r3, r3, #8
 8001742:	b2da      	uxtb	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	331b      	adds	r3, #27
 8001750:	011b      	lsls	r3, r3, #4
 8001752:	4413      	add	r3, r2
 8001754:	3304      	adds	r3, #4
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	0c1b      	lsrs	r3, r3, #16
 800175a:	b29a      	uxth	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	011b      	lsls	r3, r3, #4
 8001768:	4413      	add	r3, r2
 800176a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	b2da      	uxtb	r2, r3
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	011b      	lsls	r3, r3, #4
 800177e:	4413      	add	r3, r2
 8001780:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	0a1a      	lsrs	r2, r3, #8
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	3301      	adds	r3, #1
 800178c:	b2d2      	uxtb	r2, r2
 800178e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	011b      	lsls	r3, r3, #4
 8001798:	4413      	add	r3, r2
 800179a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	0c1a      	lsrs	r2, r3, #16
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	3302      	adds	r3, #2
 80017a6:	b2d2      	uxtb	r2, r2
 80017a8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	011b      	lsls	r3, r3, #4
 80017b2:	4413      	add	r3, r2
 80017b4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	0e1a      	lsrs	r2, r3, #24
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	3303      	adds	r3, #3
 80017c0:	b2d2      	uxtb	r2, r2
 80017c2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	011b      	lsls	r3, r3, #4
 80017cc:	4413      	add	r3, r2
 80017ce:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	3304      	adds	r3, #4
 80017d8:	b2d2      	uxtb	r2, r2
 80017da:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	011b      	lsls	r3, r3, #4
 80017e4:	4413      	add	r3, r2
 80017e6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	0a1a      	lsrs	r2, r3, #8
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	3305      	adds	r3, #5
 80017f2:	b2d2      	uxtb	r2, r2
 80017f4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	011b      	lsls	r3, r3, #4
 80017fe:	4413      	add	r3, r2
 8001800:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	0c1a      	lsrs	r2, r3, #16
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	3306      	adds	r3, #6
 800180c:	b2d2      	uxtb	r2, r2
 800180e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	011b      	lsls	r3, r3, #4
 8001818:	4413      	add	r3, r2
 800181a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	0e1a      	lsrs	r2, r3, #24
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	3307      	adds	r3, #7
 8001826:	b2d2      	uxtb	r2, r2
 8001828:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d108      	bne.n	8001842 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	68da      	ldr	r2, [r3, #12]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f042 0220 	orr.w	r2, r2, #32
 800183e:	60da      	str	r2, [r3, #12]
 8001840:	e007      	b.n	8001852 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	691a      	ldr	r2, [r3, #16]
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f042 0220 	orr.w	r2, r2, #32
 8001850:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001852:	2300      	movs	r3, #0
 8001854:	e006      	b.n	8001864 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800185a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
  }
}
 8001864:	4618      	mov	r0, r3
 8001866:	371c      	adds	r7, #28
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001870:	b480      	push	{r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001880:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001882:	7bfb      	ldrb	r3, [r7, #15]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d002      	beq.n	800188e <HAL_CAN_ActivateNotification+0x1e>
 8001888:	7bfb      	ldrb	r3, [r7, #15]
 800188a:	2b02      	cmp	r3, #2
 800188c:	d109      	bne.n	80018a2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	6959      	ldr	r1, [r3, #20]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	683a      	ldr	r2, [r7, #0]
 800189a:	430a      	orrs	r2, r1
 800189c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800189e:	2300      	movs	r3, #0
 80018a0:	e006      	b.n	80018b0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018a6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
  }
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3714      	adds	r7, #20
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b08a      	sub	sp, #40	@ 0x28
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80018c4:	2300      	movs	r3, #0
 80018c6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	691b      	ldr	r3, [r3, #16]
 80018ee:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	699b      	ldr	r3, [r3, #24]
 80018f6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80018f8:	6a3b      	ldr	r3, [r7, #32]
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d07c      	beq.n	80019fc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	f003 0301 	and.w	r3, r3, #1
 8001908:	2b00      	cmp	r3, #0
 800190a:	d023      	beq.n	8001954 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2201      	movs	r2, #1
 8001912:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	2b00      	cmp	r3, #0
 800191c:	d003      	beq.n	8001926 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f7ff f844 	bl	80009ac <HAL_CAN_TxMailbox0CompleteCallback>
 8001924:	e016      	b.n	8001954 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	f003 0304 	and.w	r3, r3, #4
 800192c:	2b00      	cmp	r3, #0
 800192e:	d004      	beq.n	800193a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001932:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001936:	627b      	str	r3, [r7, #36]	@ 0x24
 8001938:	e00c      	b.n	8001954 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	f003 0308 	and.w	r3, r3, #8
 8001940:	2b00      	cmp	r3, #0
 8001942:	d004      	beq.n	800194e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001946:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800194a:	627b      	str	r3, [r7, #36]	@ 0x24
 800194c:	e002      	b.n	8001954 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f000 f96b 	bl	8001c2a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800195a:	2b00      	cmp	r3, #0
 800195c:	d024      	beq.n	80019a8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001966:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800196e:	2b00      	cmp	r3, #0
 8001970:	d003      	beq.n	800197a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f7ff f83a 	bl	80009ec <HAL_CAN_TxMailbox1CompleteCallback>
 8001978:	e016      	b.n	80019a8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001980:	2b00      	cmp	r3, #0
 8001982:	d004      	beq.n	800198e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001986:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800198a:	627b      	str	r3, [r7, #36]	@ 0x24
 800198c:	e00c      	b.n	80019a8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001994:	2b00      	cmp	r3, #0
 8001996:	d004      	beq.n	80019a2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800199a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800199e:	627b      	str	r3, [r7, #36]	@ 0x24
 80019a0:	e002      	b.n	80019a8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f000 f94b 	bl	8001c3e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d024      	beq.n	80019fc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80019ba:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d003      	beq.n	80019ce <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f7ff f830 	bl	8000a2c <HAL_CAN_TxMailbox2CompleteCallback>
 80019cc:	e016      	b.n	80019fc <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d004      	beq.n	80019e2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80019d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80019de:	627b      	str	r3, [r7, #36]	@ 0x24
 80019e0:	e00c      	b.n	80019fc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d004      	beq.n	80019f6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80019ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80019f4:	e002      	b.n	80019fc <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f000 f92b 	bl	8001c52 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80019fc:	6a3b      	ldr	r3, [r7, #32]
 80019fe:	f003 0308 	and.w	r3, r3, #8
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d00c      	beq.n	8001a20 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	f003 0310 	and.w	r3, r3, #16
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d007      	beq.n	8001a20 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a16:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2210      	movs	r2, #16
 8001a1e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001a20:	6a3b      	ldr	r3, [r7, #32]
 8001a22:	f003 0304 	and.w	r3, r3, #4
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d00b      	beq.n	8001a42 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	f003 0308 	and.w	r3, r3, #8
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d006      	beq.n	8001a42 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2208      	movs	r2, #8
 8001a3a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f000 f912 	bl	8001c66 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001a42:	6a3b      	ldr	r3, [r7, #32]
 8001a44:	f003 0302 	and.w	r3, r3, #2
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d009      	beq.n	8001a60 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	68db      	ldr	r3, [r3, #12]
 8001a52:	f003 0303 	and.w	r3, r3, #3
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d002      	beq.n	8001a60 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f7ff f806 	bl	8000a6c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001a60:	6a3b      	ldr	r3, [r7, #32]
 8001a62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d00c      	beq.n	8001a84 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	f003 0310 	and.w	r3, r3, #16
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d007      	beq.n	8001a84 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a76:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a7a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2210      	movs	r2, #16
 8001a82:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001a84:	6a3b      	ldr	r3, [r7, #32]
 8001a86:	f003 0320 	and.w	r3, r3, #32
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d00b      	beq.n	8001aa6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	f003 0308 	and.w	r3, r3, #8
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d006      	beq.n	8001aa6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2208      	movs	r2, #8
 8001a9e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f000 f8f4 	bl	8001c8e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001aa6:	6a3b      	ldr	r3, [r7, #32]
 8001aa8:	f003 0310 	and.w	r3, r3, #16
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d009      	beq.n	8001ac4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	691b      	ldr	r3, [r3, #16]
 8001ab6:	f003 0303 	and.w	r3, r3, #3
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d002      	beq.n	8001ac4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f000 f8db 	bl	8001c7a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001ac4:	6a3b      	ldr	r3, [r7, #32]
 8001ac6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d00b      	beq.n	8001ae6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	f003 0310 	and.w	r3, r3, #16
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d006      	beq.n	8001ae6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2210      	movs	r2, #16
 8001ade:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f000 f8de 	bl	8001ca2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001ae6:	6a3b      	ldr	r3, [r7, #32]
 8001ae8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d00b      	beq.n	8001b08 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	f003 0308 	and.w	r3, r3, #8
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d006      	beq.n	8001b08 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2208      	movs	r2, #8
 8001b00:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f000 f8d7 	bl	8001cb6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001b08:	6a3b      	ldr	r3, [r7, #32]
 8001b0a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d07b      	beq.n	8001c0a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d072      	beq.n	8001c02 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b1c:	6a3b      	ldr	r3, [r7, #32]
 8001b1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d008      	beq.n	8001b38 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d003      	beq.n	8001b38 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b32:	f043 0301 	orr.w	r3, r3, #1
 8001b36:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b38:	6a3b      	ldr	r3, [r7, #32]
 8001b3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d008      	beq.n	8001b54 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d003      	beq.n	8001b54 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b4e:	f043 0302 	orr.w	r3, r3, #2
 8001b52:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001b54:	6a3b      	ldr	r3, [r7, #32]
 8001b56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d008      	beq.n	8001b70 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d003      	beq.n	8001b70 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b6a:	f043 0304 	orr.w	r3, r3, #4
 8001b6e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001b70:	6a3b      	ldr	r3, [r7, #32]
 8001b72:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d043      	beq.n	8001c02 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d03e      	beq.n	8001c02 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001b8a:	2b60      	cmp	r3, #96	@ 0x60
 8001b8c:	d02b      	beq.n	8001be6 <HAL_CAN_IRQHandler+0x32a>
 8001b8e:	2b60      	cmp	r3, #96	@ 0x60
 8001b90:	d82e      	bhi.n	8001bf0 <HAL_CAN_IRQHandler+0x334>
 8001b92:	2b50      	cmp	r3, #80	@ 0x50
 8001b94:	d022      	beq.n	8001bdc <HAL_CAN_IRQHandler+0x320>
 8001b96:	2b50      	cmp	r3, #80	@ 0x50
 8001b98:	d82a      	bhi.n	8001bf0 <HAL_CAN_IRQHandler+0x334>
 8001b9a:	2b40      	cmp	r3, #64	@ 0x40
 8001b9c:	d019      	beq.n	8001bd2 <HAL_CAN_IRQHandler+0x316>
 8001b9e:	2b40      	cmp	r3, #64	@ 0x40
 8001ba0:	d826      	bhi.n	8001bf0 <HAL_CAN_IRQHandler+0x334>
 8001ba2:	2b30      	cmp	r3, #48	@ 0x30
 8001ba4:	d010      	beq.n	8001bc8 <HAL_CAN_IRQHandler+0x30c>
 8001ba6:	2b30      	cmp	r3, #48	@ 0x30
 8001ba8:	d822      	bhi.n	8001bf0 <HAL_CAN_IRQHandler+0x334>
 8001baa:	2b10      	cmp	r3, #16
 8001bac:	d002      	beq.n	8001bb4 <HAL_CAN_IRQHandler+0x2f8>
 8001bae:	2b20      	cmp	r3, #32
 8001bb0:	d005      	beq.n	8001bbe <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001bb2:	e01d      	b.n	8001bf0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb6:	f043 0308 	orr.w	r3, r3, #8
 8001bba:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001bbc:	e019      	b.n	8001bf2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc0:	f043 0310 	orr.w	r3, r3, #16
 8001bc4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001bc6:	e014      	b.n	8001bf2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bca:	f043 0320 	orr.w	r3, r3, #32
 8001bce:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001bd0:	e00f      	b.n	8001bf2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001bd8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001bda:	e00a      	b.n	8001bf2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001be2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001be4:	e005      	b.n	8001bf2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bec:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001bee:	e000      	b.n	8001bf2 <HAL_CAN_IRQHandler+0x336>
            break;
 8001bf0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	699a      	ldr	r2, [r3, #24]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001c00:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2204      	movs	r2, #4
 8001c08:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d008      	beq.n	8001c22 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c16:	431a      	orrs	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f7fe ff87 	bl	8000b30 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001c22:	bf00      	nop
 8001c24:	3728      	adds	r7, #40	@ 0x28
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b083      	sub	sp, #12
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001c32:	bf00      	nop
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr

08001c3e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	b083      	sub	sp, #12
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c52:	b480      	push	{r7}
 8001c54:	b083      	sub	sp, #12
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr

08001c66 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001c66:	b480      	push	{r7}
 8001c68:	b083      	sub	sp, #12
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001c6e:	bf00      	nop
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr

08001c7a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	b083      	sub	sp, #12
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001c82:	bf00      	nop
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b083      	sub	sp, #12
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b083      	sub	sp, #12
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b083      	sub	sp, #12
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001cbe:	bf00      	nop
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
	...

08001ccc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f003 0307 	and.w	r3, r3, #7
 8001cda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8001d10 <__NVIC_SetPriorityGrouping+0x44>)
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ce2:	68ba      	ldr	r2, [r7, #8]
 8001ce4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ce8:	4013      	ands	r3, r2
 8001cea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cf4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cf8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cfe:	4a04      	ldr	r2, [pc, #16]	@ (8001d10 <__NVIC_SetPriorityGrouping+0x44>)
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	60d3      	str	r3, [r2, #12]
}
 8001d04:	bf00      	nop
 8001d06:	3714      	adds	r7, #20
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	e000ed00 	.word	0xe000ed00

08001d14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d18:	4b04      	ldr	r3, [pc, #16]	@ (8001d2c <__NVIC_GetPriorityGrouping+0x18>)
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	0a1b      	lsrs	r3, r3, #8
 8001d1e:	f003 0307 	and.w	r3, r3, #7
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr
 8001d2c:	e000ed00 	.word	0xe000ed00

08001d30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	db0b      	blt.n	8001d5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d42:	79fb      	ldrb	r3, [r7, #7]
 8001d44:	f003 021f 	and.w	r2, r3, #31
 8001d48:	4907      	ldr	r1, [pc, #28]	@ (8001d68 <__NVIC_EnableIRQ+0x38>)
 8001d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4e:	095b      	lsrs	r3, r3, #5
 8001d50:	2001      	movs	r0, #1
 8001d52:	fa00 f202 	lsl.w	r2, r0, r2
 8001d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d5a:	bf00      	nop
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	e000e100 	.word	0xe000e100

08001d6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4603      	mov	r3, r0
 8001d74:	6039      	str	r1, [r7, #0]
 8001d76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	db0a      	blt.n	8001d96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	b2da      	uxtb	r2, r3
 8001d84:	490c      	ldr	r1, [pc, #48]	@ (8001db8 <__NVIC_SetPriority+0x4c>)
 8001d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8a:	0112      	lsls	r2, r2, #4
 8001d8c:	b2d2      	uxtb	r2, r2
 8001d8e:	440b      	add	r3, r1
 8001d90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d94:	e00a      	b.n	8001dac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	b2da      	uxtb	r2, r3
 8001d9a:	4908      	ldr	r1, [pc, #32]	@ (8001dbc <__NVIC_SetPriority+0x50>)
 8001d9c:	79fb      	ldrb	r3, [r7, #7]
 8001d9e:	f003 030f 	and.w	r3, r3, #15
 8001da2:	3b04      	subs	r3, #4
 8001da4:	0112      	lsls	r2, r2, #4
 8001da6:	b2d2      	uxtb	r2, r2
 8001da8:	440b      	add	r3, r1
 8001daa:	761a      	strb	r2, [r3, #24]
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr
 8001db8:	e000e100 	.word	0xe000e100
 8001dbc:	e000ed00 	.word	0xe000ed00

08001dc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b089      	sub	sp, #36	@ 0x24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f003 0307 	and.w	r3, r3, #7
 8001dd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	f1c3 0307 	rsb	r3, r3, #7
 8001dda:	2b04      	cmp	r3, #4
 8001ddc:	bf28      	it	cs
 8001dde:	2304      	movcs	r3, #4
 8001de0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	3304      	adds	r3, #4
 8001de6:	2b06      	cmp	r3, #6
 8001de8:	d902      	bls.n	8001df0 <NVIC_EncodePriority+0x30>
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	3b03      	subs	r3, #3
 8001dee:	e000      	b.n	8001df2 <NVIC_EncodePriority+0x32>
 8001df0:	2300      	movs	r3, #0
 8001df2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	43da      	mvns	r2, r3
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	401a      	ands	r2, r3
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e08:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e12:	43d9      	mvns	r1, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e18:	4313      	orrs	r3, r2
         );
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3724      	adds	r7, #36	@ 0x24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
	...

08001e28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	3b01      	subs	r3, #1
 8001e34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e38:	d301      	bcc.n	8001e3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e00f      	b.n	8001e5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e3e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e68 <SysTick_Config+0x40>)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	3b01      	subs	r3, #1
 8001e44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e46:	210f      	movs	r1, #15
 8001e48:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e4c:	f7ff ff8e 	bl	8001d6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e50:	4b05      	ldr	r3, [pc, #20]	@ (8001e68 <SysTick_Config+0x40>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e56:	4b04      	ldr	r3, [pc, #16]	@ (8001e68 <SysTick_Config+0x40>)
 8001e58:	2207      	movs	r2, #7
 8001e5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	e000e010 	.word	0xe000e010

08001e6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f7ff ff29 	bl	8001ccc <__NVIC_SetPriorityGrouping>
}
 8001e7a:	bf00      	nop
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b086      	sub	sp, #24
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	4603      	mov	r3, r0
 8001e8a:	60b9      	str	r1, [r7, #8]
 8001e8c:	607a      	str	r2, [r7, #4]
 8001e8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e90:	2300      	movs	r3, #0
 8001e92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e94:	f7ff ff3e 	bl	8001d14 <__NVIC_GetPriorityGrouping>
 8001e98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	68b9      	ldr	r1, [r7, #8]
 8001e9e:	6978      	ldr	r0, [r7, #20]
 8001ea0:	f7ff ff8e 	bl	8001dc0 <NVIC_EncodePriority>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eaa:	4611      	mov	r1, r2
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff ff5d 	bl	8001d6c <__NVIC_SetPriority>
}
 8001eb2:	bf00      	nop
 8001eb4:	3718      	adds	r7, #24
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b082      	sub	sp, #8
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff ff31 	bl	8001d30 <__NVIC_EnableIRQ>
}
 8001ece:	bf00      	nop
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b082      	sub	sp, #8
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f7ff ffa2 	bl	8001e28 <SysTick_Config>
 8001ee4:	4603      	mov	r3, r0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001ef2:	f000 f802 	bl	8001efa <HAL_SYSTICK_Callback>
}
 8001ef6:	bf00      	nop
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001efa:	b480      	push	{r7}
 8001efc:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001efe:	bf00      	nop
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f14:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f16:	f7ff f88f 	bl	8001038 <HAL_GetTick>
 8001f1a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d008      	beq.n	8001f3a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2280      	movs	r2, #128	@ 0x80
 8001f2c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e052      	b.n	8001fe0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f022 0216 	bic.w	r2, r2, #22
 8001f48:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	695a      	ldr	r2, [r3, #20]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f58:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d103      	bne.n	8001f6a <HAL_DMA_Abort+0x62>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d007      	beq.n	8001f7a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f022 0208 	bic.w	r2, r2, #8
 8001f78:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f022 0201 	bic.w	r2, r2, #1
 8001f88:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f8a:	e013      	b.n	8001fb4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f8c:	f7ff f854 	bl	8001038 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b05      	cmp	r3, #5
 8001f98:	d90c      	bls.n	8001fb4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2220      	movs	r2, #32
 8001f9e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2203      	movs	r2, #3
 8001fa4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e015      	b.n	8001fe0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1e4      	bne.n	8001f8c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fc6:	223f      	movs	r2, #63	@ 0x3f
 8001fc8:	409a      	lsls	r2, r3
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001fde:	2300      	movs	r3, #0
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3710      	adds	r7, #16
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d004      	beq.n	8002006 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2280      	movs	r2, #128	@ 0x80
 8002000:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e00c      	b.n	8002020 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2205      	movs	r2, #5
 800200a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f022 0201 	bic.w	r2, r2, #1
 800201c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800201e:	2300      	movs	r3, #0
}
 8002020:	4618      	mov	r0, r3
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800202c:	b480      	push	{r7}
 800202e:	b089      	sub	sp, #36	@ 0x24
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002036:	2300      	movs	r3, #0
 8002038:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800203a:	2300      	movs	r3, #0
 800203c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800203e:	2300      	movs	r3, #0
 8002040:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002042:	2300      	movs	r3, #0
 8002044:	61fb      	str	r3, [r7, #28]
 8002046:	e16b      	b.n	8002320 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002048:	2201      	movs	r2, #1
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	697a      	ldr	r2, [r7, #20]
 8002058:	4013      	ands	r3, r2
 800205a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	429a      	cmp	r2, r3
 8002062:	f040 815a 	bne.w	800231a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f003 0303 	and.w	r3, r3, #3
 800206e:	2b01      	cmp	r3, #1
 8002070:	d005      	beq.n	800207e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800207a:	2b02      	cmp	r3, #2
 800207c:	d130      	bne.n	80020e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	2203      	movs	r2, #3
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	43db      	mvns	r3, r3
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	4013      	ands	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	68da      	ldr	r2, [r3, #12]
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020b4:	2201      	movs	r2, #1
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	43db      	mvns	r3, r3
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	4013      	ands	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	091b      	lsrs	r3, r3, #4
 80020ca:	f003 0201 	and.w	r2, r3, #1
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f003 0303 	and.w	r3, r3, #3
 80020e8:	2b03      	cmp	r3, #3
 80020ea:	d017      	beq.n	800211c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	2203      	movs	r2, #3
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	43db      	mvns	r3, r3
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	4013      	ands	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	689a      	ldr	r2, [r3, #8]
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	4313      	orrs	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f003 0303 	and.w	r3, r3, #3
 8002124:	2b02      	cmp	r3, #2
 8002126:	d123      	bne.n	8002170 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	08da      	lsrs	r2, r3, #3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3208      	adds	r2, #8
 8002130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002134:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	f003 0307 	and.w	r3, r3, #7
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	220f      	movs	r2, #15
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	43db      	mvns	r3, r3
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	4013      	ands	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	691a      	ldr	r2, [r3, #16]
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	f003 0307 	and.w	r3, r3, #7
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	4313      	orrs	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	08da      	lsrs	r2, r3, #3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	3208      	adds	r2, #8
 800216a:	69b9      	ldr	r1, [r7, #24]
 800216c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	2203      	movs	r2, #3
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	43db      	mvns	r3, r3
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	4013      	ands	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f003 0203 	and.w	r2, r3, #3
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	4313      	orrs	r3, r2
 800219c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	f000 80b4 	beq.w	800231a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	60fb      	str	r3, [r7, #12]
 80021b6:	4b60      	ldr	r3, [pc, #384]	@ (8002338 <HAL_GPIO_Init+0x30c>)
 80021b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ba:	4a5f      	ldr	r2, [pc, #380]	@ (8002338 <HAL_GPIO_Init+0x30c>)
 80021bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80021c2:	4b5d      	ldr	r3, [pc, #372]	@ (8002338 <HAL_GPIO_Init+0x30c>)
 80021c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021ca:	60fb      	str	r3, [r7, #12]
 80021cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021ce:	4a5b      	ldr	r2, [pc, #364]	@ (800233c <HAL_GPIO_Init+0x310>)
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	089b      	lsrs	r3, r3, #2
 80021d4:	3302      	adds	r3, #2
 80021d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	f003 0303 	and.w	r3, r3, #3
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	220f      	movs	r2, #15
 80021e6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ea:	43db      	mvns	r3, r3
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	4013      	ands	r3, r2
 80021f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a52      	ldr	r2, [pc, #328]	@ (8002340 <HAL_GPIO_Init+0x314>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d02b      	beq.n	8002252 <HAL_GPIO_Init+0x226>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a51      	ldr	r2, [pc, #324]	@ (8002344 <HAL_GPIO_Init+0x318>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d025      	beq.n	800224e <HAL_GPIO_Init+0x222>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a50      	ldr	r2, [pc, #320]	@ (8002348 <HAL_GPIO_Init+0x31c>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d01f      	beq.n	800224a <HAL_GPIO_Init+0x21e>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a4f      	ldr	r2, [pc, #316]	@ (800234c <HAL_GPIO_Init+0x320>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d019      	beq.n	8002246 <HAL_GPIO_Init+0x21a>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a4e      	ldr	r2, [pc, #312]	@ (8002350 <HAL_GPIO_Init+0x324>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d013      	beq.n	8002242 <HAL_GPIO_Init+0x216>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a4d      	ldr	r2, [pc, #308]	@ (8002354 <HAL_GPIO_Init+0x328>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d00d      	beq.n	800223e <HAL_GPIO_Init+0x212>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a4c      	ldr	r2, [pc, #304]	@ (8002358 <HAL_GPIO_Init+0x32c>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d007      	beq.n	800223a <HAL_GPIO_Init+0x20e>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a4b      	ldr	r2, [pc, #300]	@ (800235c <HAL_GPIO_Init+0x330>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d101      	bne.n	8002236 <HAL_GPIO_Init+0x20a>
 8002232:	2307      	movs	r3, #7
 8002234:	e00e      	b.n	8002254 <HAL_GPIO_Init+0x228>
 8002236:	2308      	movs	r3, #8
 8002238:	e00c      	b.n	8002254 <HAL_GPIO_Init+0x228>
 800223a:	2306      	movs	r3, #6
 800223c:	e00a      	b.n	8002254 <HAL_GPIO_Init+0x228>
 800223e:	2305      	movs	r3, #5
 8002240:	e008      	b.n	8002254 <HAL_GPIO_Init+0x228>
 8002242:	2304      	movs	r3, #4
 8002244:	e006      	b.n	8002254 <HAL_GPIO_Init+0x228>
 8002246:	2303      	movs	r3, #3
 8002248:	e004      	b.n	8002254 <HAL_GPIO_Init+0x228>
 800224a:	2302      	movs	r3, #2
 800224c:	e002      	b.n	8002254 <HAL_GPIO_Init+0x228>
 800224e:	2301      	movs	r3, #1
 8002250:	e000      	b.n	8002254 <HAL_GPIO_Init+0x228>
 8002252:	2300      	movs	r3, #0
 8002254:	69fa      	ldr	r2, [r7, #28]
 8002256:	f002 0203 	and.w	r2, r2, #3
 800225a:	0092      	lsls	r2, r2, #2
 800225c:	4093      	lsls	r3, r2
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	4313      	orrs	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002264:	4935      	ldr	r1, [pc, #212]	@ (800233c <HAL_GPIO_Init+0x310>)
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	089b      	lsrs	r3, r3, #2
 800226a:	3302      	adds	r3, #2
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002272:	4b3b      	ldr	r3, [pc, #236]	@ (8002360 <HAL_GPIO_Init+0x334>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	43db      	mvns	r3, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4013      	ands	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d003      	beq.n	8002296 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	4313      	orrs	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002296:	4a32      	ldr	r2, [pc, #200]	@ (8002360 <HAL_GPIO_Init+0x334>)
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800229c:	4b30      	ldr	r3, [pc, #192]	@ (8002360 <HAL_GPIO_Init+0x334>)
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	43db      	mvns	r3, r3
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4013      	ands	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d003      	beq.n	80022c0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	4313      	orrs	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022c0:	4a27      	ldr	r2, [pc, #156]	@ (8002360 <HAL_GPIO_Init+0x334>)
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022c6:	4b26      	ldr	r3, [pc, #152]	@ (8002360 <HAL_GPIO_Init+0x334>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	43db      	mvns	r3, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4013      	ands	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d003      	beq.n	80022ea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022ea:	4a1d      	ldr	r2, [pc, #116]	@ (8002360 <HAL_GPIO_Init+0x334>)
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002360 <HAL_GPIO_Init+0x334>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	43db      	mvns	r3, r3
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	4013      	ands	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d003      	beq.n	8002314 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	4313      	orrs	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002314:	4a12      	ldr	r2, [pc, #72]	@ (8002360 <HAL_GPIO_Init+0x334>)
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	3301      	adds	r3, #1
 800231e:	61fb      	str	r3, [r7, #28]
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	2b0f      	cmp	r3, #15
 8002324:	f67f ae90 	bls.w	8002048 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002328:	bf00      	nop
 800232a:	bf00      	nop
 800232c:	3724      	adds	r7, #36	@ 0x24
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	40023800 	.word	0x40023800
 800233c:	40013800 	.word	0x40013800
 8002340:	40020000 	.word	0x40020000
 8002344:	40020400 	.word	0x40020400
 8002348:	40020800 	.word	0x40020800
 800234c:	40020c00 	.word	0x40020c00
 8002350:	40021000 	.word	0x40021000
 8002354:	40021400 	.word	0x40021400
 8002358:	40021800 	.word	0x40021800
 800235c:	40021c00 	.word	0x40021c00
 8002360:	40013c00 	.word	0x40013c00

08002364 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	460b      	mov	r3, r1
 800236e:	807b      	strh	r3, [r7, #2]
 8002370:	4613      	mov	r3, r2
 8002372:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002374:	787b      	ldrb	r3, [r7, #1]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d003      	beq.n	8002382 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800237a:	887a      	ldrh	r2, [r7, #2]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002380:	e003      	b.n	800238a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002382:	887b      	ldrh	r3, [r7, #2]
 8002384:	041a      	lsls	r2, r3, #16
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	619a      	str	r2, [r3, #24]
}
 800238a:	bf00      	nop
 800238c:	370c      	adds	r7, #12
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr

08002396 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002396:	b480      	push	{r7}
 8002398:	b085      	sub	sp, #20
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
 800239e:	460b      	mov	r3, r1
 80023a0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023a8:	887a      	ldrh	r2, [r7, #2]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	4013      	ands	r3, r2
 80023ae:	041a      	lsls	r2, r3, #16
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	43d9      	mvns	r1, r3
 80023b4:	887b      	ldrh	r3, [r7, #2]
 80023b6:	400b      	ands	r3, r1
 80023b8:	431a      	orrs	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	619a      	str	r2, [r3, #24]
}
 80023be:	bf00      	nop
 80023c0:	3714      	adds	r7, #20
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
	...

080023cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	4603      	mov	r3, r0
 80023d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80023d6:	4b08      	ldr	r3, [pc, #32]	@ (80023f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023d8:	695a      	ldr	r2, [r3, #20]
 80023da:	88fb      	ldrh	r3, [r7, #6]
 80023dc:	4013      	ands	r3, r2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d006      	beq.n	80023f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023e2:	4a05      	ldr	r2, [pc, #20]	@ (80023f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023e4:	88fb      	ldrh	r3, [r7, #6]
 80023e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80023e8:	88fb      	ldrh	r3, [r7, #6]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f000 f806 	bl	80023fc <HAL_GPIO_EXTI_Callback>
  }
}
 80023f0:	bf00      	nop
 80023f2:	3708      	adds	r7, #8
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40013c00 	.word	0x40013c00

080023fc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	4603      	mov	r3, r0
 8002404:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002406:	bf00      	nop
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
	...

08002414 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b086      	sub	sp, #24
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e267      	b.n	80028f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	2b00      	cmp	r3, #0
 8002430:	d075      	beq.n	800251e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002432:	4b88      	ldr	r3, [pc, #544]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f003 030c 	and.w	r3, r3, #12
 800243a:	2b04      	cmp	r3, #4
 800243c:	d00c      	beq.n	8002458 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800243e:	4b85      	ldr	r3, [pc, #532]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002446:	2b08      	cmp	r3, #8
 8002448:	d112      	bne.n	8002470 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800244a:	4b82      	ldr	r3, [pc, #520]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002452:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002456:	d10b      	bne.n	8002470 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002458:	4b7e      	ldr	r3, [pc, #504]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d05b      	beq.n	800251c <HAL_RCC_OscConfig+0x108>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d157      	bne.n	800251c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e242      	b.n	80028f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002478:	d106      	bne.n	8002488 <HAL_RCC_OscConfig+0x74>
 800247a:	4b76      	ldr	r3, [pc, #472]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a75      	ldr	r2, [pc, #468]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 8002480:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002484:	6013      	str	r3, [r2, #0]
 8002486:	e01d      	b.n	80024c4 <HAL_RCC_OscConfig+0xb0>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002490:	d10c      	bne.n	80024ac <HAL_RCC_OscConfig+0x98>
 8002492:	4b70      	ldr	r3, [pc, #448]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a6f      	ldr	r2, [pc, #444]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 8002498:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800249c:	6013      	str	r3, [r2, #0]
 800249e:	4b6d      	ldr	r3, [pc, #436]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a6c      	ldr	r2, [pc, #432]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 80024a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024a8:	6013      	str	r3, [r2, #0]
 80024aa:	e00b      	b.n	80024c4 <HAL_RCC_OscConfig+0xb0>
 80024ac:	4b69      	ldr	r3, [pc, #420]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a68      	ldr	r2, [pc, #416]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 80024b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024b6:	6013      	str	r3, [r2, #0]
 80024b8:	4b66      	ldr	r3, [pc, #408]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a65      	ldr	r2, [pc, #404]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 80024be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d013      	beq.n	80024f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024cc:	f7fe fdb4 	bl	8001038 <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024d4:	f7fe fdb0 	bl	8001038 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b64      	cmp	r3, #100	@ 0x64
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e207      	b.n	80028f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024e6:	4b5b      	ldr	r3, [pc, #364]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d0f0      	beq.n	80024d4 <HAL_RCC_OscConfig+0xc0>
 80024f2:	e014      	b.n	800251e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f4:	f7fe fda0 	bl	8001038 <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024fc:	f7fe fd9c 	bl	8001038 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b64      	cmp	r3, #100	@ 0x64
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e1f3      	b.n	80028f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800250e:	4b51      	ldr	r3, [pc, #324]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1f0      	bne.n	80024fc <HAL_RCC_OscConfig+0xe8>
 800251a:	e000      	b.n	800251e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800251c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d063      	beq.n	80025f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800252a:	4b4a      	ldr	r3, [pc, #296]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f003 030c 	and.w	r3, r3, #12
 8002532:	2b00      	cmp	r3, #0
 8002534:	d00b      	beq.n	800254e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002536:	4b47      	ldr	r3, [pc, #284]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800253e:	2b08      	cmp	r3, #8
 8002540:	d11c      	bne.n	800257c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002542:	4b44      	ldr	r3, [pc, #272]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d116      	bne.n	800257c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800254e:	4b41      	ldr	r3, [pc, #260]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d005      	beq.n	8002566 <HAL_RCC_OscConfig+0x152>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d001      	beq.n	8002566 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e1c7      	b.n	80028f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002566:	4b3b      	ldr	r3, [pc, #236]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	4937      	ldr	r1, [pc, #220]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 8002576:	4313      	orrs	r3, r2
 8002578:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800257a:	e03a      	b.n	80025f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d020      	beq.n	80025c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002584:	4b34      	ldr	r3, [pc, #208]	@ (8002658 <HAL_RCC_OscConfig+0x244>)
 8002586:	2201      	movs	r2, #1
 8002588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258a:	f7fe fd55 	bl	8001038 <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002590:	e008      	b.n	80025a4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002592:	f7fe fd51 	bl	8001038 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e1a8      	b.n	80028f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025a4:	4b2b      	ldr	r3, [pc, #172]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d0f0      	beq.n	8002592 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b0:	4b28      	ldr	r3, [pc, #160]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	00db      	lsls	r3, r3, #3
 80025be:	4925      	ldr	r1, [pc, #148]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	600b      	str	r3, [r1, #0]
 80025c4:	e015      	b.n	80025f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025c6:	4b24      	ldr	r3, [pc, #144]	@ (8002658 <HAL_RCC_OscConfig+0x244>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025cc:	f7fe fd34 	bl	8001038 <HAL_GetTick>
 80025d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025d2:	e008      	b.n	80025e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025d4:	f7fe fd30 	bl	8001038 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e187      	b.n	80028f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025e6:	4b1b      	ldr	r3, [pc, #108]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1f0      	bne.n	80025d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0308 	and.w	r3, r3, #8
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d036      	beq.n	800266c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d016      	beq.n	8002634 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002606:	4b15      	ldr	r3, [pc, #84]	@ (800265c <HAL_RCC_OscConfig+0x248>)
 8002608:	2201      	movs	r2, #1
 800260a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800260c:	f7fe fd14 	bl	8001038 <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002614:	f7fe fd10 	bl	8001038 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e167      	b.n	80028f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002626:	4b0b      	ldr	r3, [pc, #44]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 8002628:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d0f0      	beq.n	8002614 <HAL_RCC_OscConfig+0x200>
 8002632:	e01b      	b.n	800266c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002634:	4b09      	ldr	r3, [pc, #36]	@ (800265c <HAL_RCC_OscConfig+0x248>)
 8002636:	2200      	movs	r2, #0
 8002638:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800263a:	f7fe fcfd 	bl	8001038 <HAL_GetTick>
 800263e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002640:	e00e      	b.n	8002660 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002642:	f7fe fcf9 	bl	8001038 <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d907      	bls.n	8002660 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e150      	b.n	80028f6 <HAL_RCC_OscConfig+0x4e2>
 8002654:	40023800 	.word	0x40023800
 8002658:	42470000 	.word	0x42470000
 800265c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002660:	4b88      	ldr	r3, [pc, #544]	@ (8002884 <HAL_RCC_OscConfig+0x470>)
 8002662:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002664:	f003 0302 	and.w	r3, r3, #2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d1ea      	bne.n	8002642 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0304 	and.w	r3, r3, #4
 8002674:	2b00      	cmp	r3, #0
 8002676:	f000 8097 	beq.w	80027a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800267a:	2300      	movs	r3, #0
 800267c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800267e:	4b81      	ldr	r3, [pc, #516]	@ (8002884 <HAL_RCC_OscConfig+0x470>)
 8002680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002682:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d10f      	bne.n	80026aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800268a:	2300      	movs	r3, #0
 800268c:	60bb      	str	r3, [r7, #8]
 800268e:	4b7d      	ldr	r3, [pc, #500]	@ (8002884 <HAL_RCC_OscConfig+0x470>)
 8002690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002692:	4a7c      	ldr	r2, [pc, #496]	@ (8002884 <HAL_RCC_OscConfig+0x470>)
 8002694:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002698:	6413      	str	r3, [r2, #64]	@ 0x40
 800269a:	4b7a      	ldr	r3, [pc, #488]	@ (8002884 <HAL_RCC_OscConfig+0x470>)
 800269c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026a2:	60bb      	str	r3, [r7, #8]
 80026a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026a6:	2301      	movs	r3, #1
 80026a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026aa:	4b77      	ldr	r3, [pc, #476]	@ (8002888 <HAL_RCC_OscConfig+0x474>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d118      	bne.n	80026e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026b6:	4b74      	ldr	r3, [pc, #464]	@ (8002888 <HAL_RCC_OscConfig+0x474>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a73      	ldr	r2, [pc, #460]	@ (8002888 <HAL_RCC_OscConfig+0x474>)
 80026bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026c2:	f7fe fcb9 	bl	8001038 <HAL_GetTick>
 80026c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c8:	e008      	b.n	80026dc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ca:	f7fe fcb5 	bl	8001038 <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d901      	bls.n	80026dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e10c      	b.n	80028f6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026dc:	4b6a      	ldr	r3, [pc, #424]	@ (8002888 <HAL_RCC_OscConfig+0x474>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d0f0      	beq.n	80026ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d106      	bne.n	80026fe <HAL_RCC_OscConfig+0x2ea>
 80026f0:	4b64      	ldr	r3, [pc, #400]	@ (8002884 <HAL_RCC_OscConfig+0x470>)
 80026f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026f4:	4a63      	ldr	r2, [pc, #396]	@ (8002884 <HAL_RCC_OscConfig+0x470>)
 80026f6:	f043 0301 	orr.w	r3, r3, #1
 80026fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80026fc:	e01c      	b.n	8002738 <HAL_RCC_OscConfig+0x324>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	2b05      	cmp	r3, #5
 8002704:	d10c      	bne.n	8002720 <HAL_RCC_OscConfig+0x30c>
 8002706:	4b5f      	ldr	r3, [pc, #380]	@ (8002884 <HAL_RCC_OscConfig+0x470>)
 8002708:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800270a:	4a5e      	ldr	r2, [pc, #376]	@ (8002884 <HAL_RCC_OscConfig+0x470>)
 800270c:	f043 0304 	orr.w	r3, r3, #4
 8002710:	6713      	str	r3, [r2, #112]	@ 0x70
 8002712:	4b5c      	ldr	r3, [pc, #368]	@ (8002884 <HAL_RCC_OscConfig+0x470>)
 8002714:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002716:	4a5b      	ldr	r2, [pc, #364]	@ (8002884 <HAL_RCC_OscConfig+0x470>)
 8002718:	f043 0301 	orr.w	r3, r3, #1
 800271c:	6713      	str	r3, [r2, #112]	@ 0x70
 800271e:	e00b      	b.n	8002738 <HAL_RCC_OscConfig+0x324>
 8002720:	4b58      	ldr	r3, [pc, #352]	@ (8002884 <HAL_RCC_OscConfig+0x470>)
 8002722:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002724:	4a57      	ldr	r2, [pc, #348]	@ (8002884 <HAL_RCC_OscConfig+0x470>)
 8002726:	f023 0301 	bic.w	r3, r3, #1
 800272a:	6713      	str	r3, [r2, #112]	@ 0x70
 800272c:	4b55      	ldr	r3, [pc, #340]	@ (8002884 <HAL_RCC_OscConfig+0x470>)
 800272e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002730:	4a54      	ldr	r2, [pc, #336]	@ (8002884 <HAL_RCC_OscConfig+0x470>)
 8002732:	f023 0304 	bic.w	r3, r3, #4
 8002736:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d015      	beq.n	800276c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002740:	f7fe fc7a 	bl	8001038 <HAL_GetTick>
 8002744:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002746:	e00a      	b.n	800275e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002748:	f7fe fc76 	bl	8001038 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002756:	4293      	cmp	r3, r2
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e0cb      	b.n	80028f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800275e:	4b49      	ldr	r3, [pc, #292]	@ (8002884 <HAL_RCC_OscConfig+0x470>)
 8002760:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d0ee      	beq.n	8002748 <HAL_RCC_OscConfig+0x334>
 800276a:	e014      	b.n	8002796 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800276c:	f7fe fc64 	bl	8001038 <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002772:	e00a      	b.n	800278a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002774:	f7fe fc60 	bl	8001038 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002782:	4293      	cmp	r3, r2
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e0b5      	b.n	80028f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800278a:	4b3e      	ldr	r3, [pc, #248]	@ (8002884 <HAL_RCC_OscConfig+0x470>)
 800278c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1ee      	bne.n	8002774 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002796:	7dfb      	ldrb	r3, [r7, #23]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d105      	bne.n	80027a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800279c:	4b39      	ldr	r3, [pc, #228]	@ (8002884 <HAL_RCC_OscConfig+0x470>)
 800279e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a0:	4a38      	ldr	r2, [pc, #224]	@ (8002884 <HAL_RCC_OscConfig+0x470>)
 80027a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027a6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f000 80a1 	beq.w	80028f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027b2:	4b34      	ldr	r3, [pc, #208]	@ (8002884 <HAL_RCC_OscConfig+0x470>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f003 030c 	and.w	r3, r3, #12
 80027ba:	2b08      	cmp	r3, #8
 80027bc:	d05c      	beq.n	8002878 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	699b      	ldr	r3, [r3, #24]
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d141      	bne.n	800284a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027c6:	4b31      	ldr	r3, [pc, #196]	@ (800288c <HAL_RCC_OscConfig+0x478>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027cc:	f7fe fc34 	bl	8001038 <HAL_GetTick>
 80027d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027d4:	f7fe fc30 	bl	8001038 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e087      	b.n	80028f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027e6:	4b27      	ldr	r3, [pc, #156]	@ (8002884 <HAL_RCC_OscConfig+0x470>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1f0      	bne.n	80027d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	69da      	ldr	r2, [r3, #28]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a1b      	ldr	r3, [r3, #32]
 80027fa:	431a      	orrs	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002800:	019b      	lsls	r3, r3, #6
 8002802:	431a      	orrs	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002808:	085b      	lsrs	r3, r3, #1
 800280a:	3b01      	subs	r3, #1
 800280c:	041b      	lsls	r3, r3, #16
 800280e:	431a      	orrs	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002814:	061b      	lsls	r3, r3, #24
 8002816:	491b      	ldr	r1, [pc, #108]	@ (8002884 <HAL_RCC_OscConfig+0x470>)
 8002818:	4313      	orrs	r3, r2
 800281a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800281c:	4b1b      	ldr	r3, [pc, #108]	@ (800288c <HAL_RCC_OscConfig+0x478>)
 800281e:	2201      	movs	r2, #1
 8002820:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002822:	f7fe fc09 	bl	8001038 <HAL_GetTick>
 8002826:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002828:	e008      	b.n	800283c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800282a:	f7fe fc05 	bl	8001038 <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	2b02      	cmp	r3, #2
 8002836:	d901      	bls.n	800283c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e05c      	b.n	80028f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800283c:	4b11      	ldr	r3, [pc, #68]	@ (8002884 <HAL_RCC_OscConfig+0x470>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d0f0      	beq.n	800282a <HAL_RCC_OscConfig+0x416>
 8002848:	e054      	b.n	80028f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800284a:	4b10      	ldr	r3, [pc, #64]	@ (800288c <HAL_RCC_OscConfig+0x478>)
 800284c:	2200      	movs	r2, #0
 800284e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002850:	f7fe fbf2 	bl	8001038 <HAL_GetTick>
 8002854:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002856:	e008      	b.n	800286a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002858:	f7fe fbee 	bl	8001038 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b02      	cmp	r3, #2
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e045      	b.n	80028f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800286a:	4b06      	ldr	r3, [pc, #24]	@ (8002884 <HAL_RCC_OscConfig+0x470>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1f0      	bne.n	8002858 <HAL_RCC_OscConfig+0x444>
 8002876:	e03d      	b.n	80028f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	2b01      	cmp	r3, #1
 800287e:	d107      	bne.n	8002890 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e038      	b.n	80028f6 <HAL_RCC_OscConfig+0x4e2>
 8002884:	40023800 	.word	0x40023800
 8002888:	40007000 	.word	0x40007000
 800288c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002890:	4b1b      	ldr	r3, [pc, #108]	@ (8002900 <HAL_RCC_OscConfig+0x4ec>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	699b      	ldr	r3, [r3, #24]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d028      	beq.n	80028f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d121      	bne.n	80028f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d11a      	bne.n	80028f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80028c0:	4013      	ands	r3, r2
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80028c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d111      	bne.n	80028f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028d6:	085b      	lsrs	r3, r3, #1
 80028d8:	3b01      	subs	r3, #1
 80028da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028dc:	429a      	cmp	r2, r3
 80028de:	d107      	bne.n	80028f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d001      	beq.n	80028f4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e000      	b.n	80028f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3718      	adds	r7, #24
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	40023800 	.word	0x40023800

08002904 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d101      	bne.n	8002918 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e0cc      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002918:	4b68      	ldr	r3, [pc, #416]	@ (8002abc <HAL_RCC_ClockConfig+0x1b8>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0307 	and.w	r3, r3, #7
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	429a      	cmp	r2, r3
 8002924:	d90c      	bls.n	8002940 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002926:	4b65      	ldr	r3, [pc, #404]	@ (8002abc <HAL_RCC_ClockConfig+0x1b8>)
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	b2d2      	uxtb	r2, r2
 800292c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800292e:	4b63      	ldr	r3, [pc, #396]	@ (8002abc <HAL_RCC_ClockConfig+0x1b8>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0307 	and.w	r3, r3, #7
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	429a      	cmp	r2, r3
 800293a:	d001      	beq.n	8002940 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e0b8      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d020      	beq.n	800298e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0304 	and.w	r3, r3, #4
 8002954:	2b00      	cmp	r3, #0
 8002956:	d005      	beq.n	8002964 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002958:	4b59      	ldr	r3, [pc, #356]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	4a58      	ldr	r2, [pc, #352]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 800295e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002962:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0308 	and.w	r3, r3, #8
 800296c:	2b00      	cmp	r3, #0
 800296e:	d005      	beq.n	800297c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002970:	4b53      	ldr	r3, [pc, #332]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	4a52      	ldr	r2, [pc, #328]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8002976:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800297a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800297c:	4b50      	ldr	r3, [pc, #320]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	494d      	ldr	r1, [pc, #308]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 800298a:	4313      	orrs	r3, r2
 800298c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b00      	cmp	r3, #0
 8002998:	d044      	beq.n	8002a24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d107      	bne.n	80029b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029a2:	4b47      	ldr	r3, [pc, #284]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d119      	bne.n	80029e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e07f      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d003      	beq.n	80029c2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029be:	2b03      	cmp	r3, #3
 80029c0:	d107      	bne.n	80029d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029c2:	4b3f      	ldr	r3, [pc, #252]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d109      	bne.n	80029e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e06f      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029d2:	4b3b      	ldr	r3, [pc, #236]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d101      	bne.n	80029e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e067      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029e2:	4b37      	ldr	r3, [pc, #220]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f023 0203 	bic.w	r2, r3, #3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	4934      	ldr	r1, [pc, #208]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029f4:	f7fe fb20 	bl	8001038 <HAL_GetTick>
 80029f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029fa:	e00a      	b.n	8002a12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029fc:	f7fe fb1c 	bl	8001038 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e04f      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a12:	4b2b      	ldr	r3, [pc, #172]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f003 020c 	and.w	r2, r3, #12
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d1eb      	bne.n	80029fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a24:	4b25      	ldr	r3, [pc, #148]	@ (8002abc <HAL_RCC_ClockConfig+0x1b8>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0307 	and.w	r3, r3, #7
 8002a2c:	683a      	ldr	r2, [r7, #0]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d20c      	bcs.n	8002a4c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a32:	4b22      	ldr	r3, [pc, #136]	@ (8002abc <HAL_RCC_ClockConfig+0x1b8>)
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	b2d2      	uxtb	r2, r2
 8002a38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a3a:	4b20      	ldr	r3, [pc, #128]	@ (8002abc <HAL_RCC_ClockConfig+0x1b8>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0307 	and.w	r3, r3, #7
 8002a42:	683a      	ldr	r2, [r7, #0]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d001      	beq.n	8002a4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e032      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0304 	and.w	r3, r3, #4
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d008      	beq.n	8002a6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a58:	4b19      	ldr	r3, [pc, #100]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	4916      	ldr	r1, [pc, #88]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0308 	and.w	r3, r3, #8
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d009      	beq.n	8002a8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a76:	4b12      	ldr	r3, [pc, #72]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	490e      	ldr	r1, [pc, #56]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a8a:	f000 f821 	bl	8002ad0 <HAL_RCC_GetSysClockFreq>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	4b0b      	ldr	r3, [pc, #44]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	091b      	lsrs	r3, r3, #4
 8002a96:	f003 030f 	and.w	r3, r3, #15
 8002a9a:	490a      	ldr	r1, [pc, #40]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a9c:	5ccb      	ldrb	r3, [r1, r3]
 8002a9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002aa2:	4a09      	ldr	r2, [pc, #36]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002aa6:	4b09      	ldr	r3, [pc, #36]	@ (8002acc <HAL_RCC_ClockConfig+0x1c8>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7fe fa80 	bl	8000fb0 <HAL_InitTick>

  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	40023c00 	.word	0x40023c00
 8002ac0:	40023800 	.word	0x40023800
 8002ac4:	08004ca4 	.word	0x08004ca4
 8002ac8:	20000000 	.word	0x20000000
 8002acc:	20000004 	.word	0x20000004

08002ad0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ad0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ad4:	b094      	sub	sp, #80	@ 0x50
 8002ad6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002adc:	2300      	movs	r3, #0
 8002ade:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ae8:	4b79      	ldr	r3, [pc, #484]	@ (8002cd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f003 030c 	and.w	r3, r3, #12
 8002af0:	2b08      	cmp	r3, #8
 8002af2:	d00d      	beq.n	8002b10 <HAL_RCC_GetSysClockFreq+0x40>
 8002af4:	2b08      	cmp	r3, #8
 8002af6:	f200 80e1 	bhi.w	8002cbc <HAL_RCC_GetSysClockFreq+0x1ec>
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d002      	beq.n	8002b04 <HAL_RCC_GetSysClockFreq+0x34>
 8002afe:	2b04      	cmp	r3, #4
 8002b00:	d003      	beq.n	8002b0a <HAL_RCC_GetSysClockFreq+0x3a>
 8002b02:	e0db      	b.n	8002cbc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b04:	4b73      	ldr	r3, [pc, #460]	@ (8002cd4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b06:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b08:	e0db      	b.n	8002cc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b0a:	4b73      	ldr	r3, [pc, #460]	@ (8002cd8 <HAL_RCC_GetSysClockFreq+0x208>)
 8002b0c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b0e:	e0d8      	b.n	8002cc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b10:	4b6f      	ldr	r3, [pc, #444]	@ (8002cd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b18:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b1a:	4b6d      	ldr	r3, [pc, #436]	@ (8002cd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d063      	beq.n	8002bee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b26:	4b6a      	ldr	r3, [pc, #424]	@ (8002cd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	099b      	lsrs	r3, r3, #6
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b30:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b38:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b3e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002b42:	4622      	mov	r2, r4
 8002b44:	462b      	mov	r3, r5
 8002b46:	f04f 0000 	mov.w	r0, #0
 8002b4a:	f04f 0100 	mov.w	r1, #0
 8002b4e:	0159      	lsls	r1, r3, #5
 8002b50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b54:	0150      	lsls	r0, r2, #5
 8002b56:	4602      	mov	r2, r0
 8002b58:	460b      	mov	r3, r1
 8002b5a:	4621      	mov	r1, r4
 8002b5c:	1a51      	subs	r1, r2, r1
 8002b5e:	6139      	str	r1, [r7, #16]
 8002b60:	4629      	mov	r1, r5
 8002b62:	eb63 0301 	sbc.w	r3, r3, r1
 8002b66:	617b      	str	r3, [r7, #20]
 8002b68:	f04f 0200 	mov.w	r2, #0
 8002b6c:	f04f 0300 	mov.w	r3, #0
 8002b70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b74:	4659      	mov	r1, fp
 8002b76:	018b      	lsls	r3, r1, #6
 8002b78:	4651      	mov	r1, sl
 8002b7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b7e:	4651      	mov	r1, sl
 8002b80:	018a      	lsls	r2, r1, #6
 8002b82:	4651      	mov	r1, sl
 8002b84:	ebb2 0801 	subs.w	r8, r2, r1
 8002b88:	4659      	mov	r1, fp
 8002b8a:	eb63 0901 	sbc.w	r9, r3, r1
 8002b8e:	f04f 0200 	mov.w	r2, #0
 8002b92:	f04f 0300 	mov.w	r3, #0
 8002b96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ba2:	4690      	mov	r8, r2
 8002ba4:	4699      	mov	r9, r3
 8002ba6:	4623      	mov	r3, r4
 8002ba8:	eb18 0303 	adds.w	r3, r8, r3
 8002bac:	60bb      	str	r3, [r7, #8]
 8002bae:	462b      	mov	r3, r5
 8002bb0:	eb49 0303 	adc.w	r3, r9, r3
 8002bb4:	60fb      	str	r3, [r7, #12]
 8002bb6:	f04f 0200 	mov.w	r2, #0
 8002bba:	f04f 0300 	mov.w	r3, #0
 8002bbe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002bc2:	4629      	mov	r1, r5
 8002bc4:	024b      	lsls	r3, r1, #9
 8002bc6:	4621      	mov	r1, r4
 8002bc8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002bcc:	4621      	mov	r1, r4
 8002bce:	024a      	lsls	r2, r1, #9
 8002bd0:	4610      	mov	r0, r2
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002bda:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002bdc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002be0:	f7fd fb4e 	bl	8000280 <__aeabi_uldivmod>
 8002be4:	4602      	mov	r2, r0
 8002be6:	460b      	mov	r3, r1
 8002be8:	4613      	mov	r3, r2
 8002bea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002bec:	e058      	b.n	8002ca0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bee:	4b38      	ldr	r3, [pc, #224]	@ (8002cd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	099b      	lsrs	r3, r3, #6
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	4611      	mov	r1, r2
 8002bfa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002bfe:	623b      	str	r3, [r7, #32]
 8002c00:	2300      	movs	r3, #0
 8002c02:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c04:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c08:	4642      	mov	r2, r8
 8002c0a:	464b      	mov	r3, r9
 8002c0c:	f04f 0000 	mov.w	r0, #0
 8002c10:	f04f 0100 	mov.w	r1, #0
 8002c14:	0159      	lsls	r1, r3, #5
 8002c16:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c1a:	0150      	lsls	r0, r2, #5
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	460b      	mov	r3, r1
 8002c20:	4641      	mov	r1, r8
 8002c22:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c26:	4649      	mov	r1, r9
 8002c28:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c2c:	f04f 0200 	mov.w	r2, #0
 8002c30:	f04f 0300 	mov.w	r3, #0
 8002c34:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c38:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c3c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c40:	ebb2 040a 	subs.w	r4, r2, sl
 8002c44:	eb63 050b 	sbc.w	r5, r3, fp
 8002c48:	f04f 0200 	mov.w	r2, #0
 8002c4c:	f04f 0300 	mov.w	r3, #0
 8002c50:	00eb      	lsls	r3, r5, #3
 8002c52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c56:	00e2      	lsls	r2, r4, #3
 8002c58:	4614      	mov	r4, r2
 8002c5a:	461d      	mov	r5, r3
 8002c5c:	4643      	mov	r3, r8
 8002c5e:	18e3      	adds	r3, r4, r3
 8002c60:	603b      	str	r3, [r7, #0]
 8002c62:	464b      	mov	r3, r9
 8002c64:	eb45 0303 	adc.w	r3, r5, r3
 8002c68:	607b      	str	r3, [r7, #4]
 8002c6a:	f04f 0200 	mov.w	r2, #0
 8002c6e:	f04f 0300 	mov.w	r3, #0
 8002c72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c76:	4629      	mov	r1, r5
 8002c78:	028b      	lsls	r3, r1, #10
 8002c7a:	4621      	mov	r1, r4
 8002c7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c80:	4621      	mov	r1, r4
 8002c82:	028a      	lsls	r2, r1, #10
 8002c84:	4610      	mov	r0, r2
 8002c86:	4619      	mov	r1, r3
 8002c88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	61bb      	str	r3, [r7, #24]
 8002c8e:	61fa      	str	r2, [r7, #28]
 8002c90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c94:	f7fd faf4 	bl	8000280 <__aeabi_uldivmod>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8002cd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	0c1b      	lsrs	r3, r3, #16
 8002ca6:	f003 0303 	and.w	r3, r3, #3
 8002caa:	3301      	adds	r3, #1
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002cb0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002cb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002cba:	e002      	b.n	8002cc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cbc:	4b05      	ldr	r3, [pc, #20]	@ (8002cd4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002cbe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002cc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3750      	adds	r7, #80	@ 0x50
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cce:	bf00      	nop
 8002cd0:	40023800 	.word	0x40023800
 8002cd4:	00f42400 	.word	0x00f42400
 8002cd8:	007a1200 	.word	0x007a1200

08002cdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ce0:	4b03      	ldr	r3, [pc, #12]	@ (8002cf0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	20000000 	.word	0x20000000

08002cf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002cf8:	f7ff fff0 	bl	8002cdc <HAL_RCC_GetHCLKFreq>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	4b05      	ldr	r3, [pc, #20]	@ (8002d14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	0a9b      	lsrs	r3, r3, #10
 8002d04:	f003 0307 	and.w	r3, r3, #7
 8002d08:	4903      	ldr	r1, [pc, #12]	@ (8002d18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d0a:	5ccb      	ldrb	r3, [r1, r3]
 8002d0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	40023800 	.word	0x40023800
 8002d18:	08004cb4 	.word	0x08004cb4

08002d1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d20:	f7ff ffdc 	bl	8002cdc <HAL_RCC_GetHCLKFreq>
 8002d24:	4602      	mov	r2, r0
 8002d26:	4b05      	ldr	r3, [pc, #20]	@ (8002d3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	0b5b      	lsrs	r3, r3, #13
 8002d2c:	f003 0307 	and.w	r3, r3, #7
 8002d30:	4903      	ldr	r1, [pc, #12]	@ (8002d40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d32:	5ccb      	ldrb	r3, [r1, r3]
 8002d34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	40023800 	.word	0x40023800
 8002d40:	08004cb4 	.word	0x08004cb4

08002d44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d101      	bne.n	8002d56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e041      	b.n	8002dda <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d106      	bne.n	8002d70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f7fe f86c 	bl	8000e48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2202      	movs	r2, #2
 8002d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	3304      	adds	r3, #4
 8002d80:	4619      	mov	r1, r3
 8002d82:	4610      	mov	r0, r2
 8002d84:	f000 f9b6 	bl	80030f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3708      	adds	r7, #8
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
	...

08002de4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d001      	beq.n	8002dfc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e04e      	b.n	8002e9a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2202      	movs	r2, #2
 8002e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68da      	ldr	r2, [r3, #12]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f042 0201 	orr.w	r2, r2, #1
 8002e12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a23      	ldr	r2, [pc, #140]	@ (8002ea8 <HAL_TIM_Base_Start_IT+0xc4>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d022      	beq.n	8002e64 <HAL_TIM_Base_Start_IT+0x80>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e26:	d01d      	beq.n	8002e64 <HAL_TIM_Base_Start_IT+0x80>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a1f      	ldr	r2, [pc, #124]	@ (8002eac <HAL_TIM_Base_Start_IT+0xc8>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d018      	beq.n	8002e64 <HAL_TIM_Base_Start_IT+0x80>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a1e      	ldr	r2, [pc, #120]	@ (8002eb0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d013      	beq.n	8002e64 <HAL_TIM_Base_Start_IT+0x80>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a1c      	ldr	r2, [pc, #112]	@ (8002eb4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d00e      	beq.n	8002e64 <HAL_TIM_Base_Start_IT+0x80>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a1b      	ldr	r2, [pc, #108]	@ (8002eb8 <HAL_TIM_Base_Start_IT+0xd4>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d009      	beq.n	8002e64 <HAL_TIM_Base_Start_IT+0x80>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a19      	ldr	r2, [pc, #100]	@ (8002ebc <HAL_TIM_Base_Start_IT+0xd8>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d004      	beq.n	8002e64 <HAL_TIM_Base_Start_IT+0x80>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a18      	ldr	r2, [pc, #96]	@ (8002ec0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d111      	bne.n	8002e88 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f003 0307 	and.w	r3, r3, #7
 8002e6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2b06      	cmp	r3, #6
 8002e74:	d010      	beq.n	8002e98 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f042 0201 	orr.w	r2, r2, #1
 8002e84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e86:	e007      	b.n	8002e98 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f042 0201 	orr.w	r2, r2, #1
 8002e96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3714      	adds	r7, #20
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	40010000 	.word	0x40010000
 8002eac:	40000400 	.word	0x40000400
 8002eb0:	40000800 	.word	0x40000800
 8002eb4:	40000c00 	.word	0x40000c00
 8002eb8:	40010400 	.word	0x40010400
 8002ebc:	40014000 	.word	0x40014000
 8002ec0:	40001800 	.word	0x40001800

08002ec4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d020      	beq.n	8002f28 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f003 0302 	and.w	r3, r3, #2
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d01b      	beq.n	8002f28 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f06f 0202 	mvn.w	r2, #2
 8002ef8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2201      	movs	r2, #1
 8002efe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	f003 0303 	and.w	r3, r3, #3
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d003      	beq.n	8002f16 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f000 f8d2 	bl	80030b8 <HAL_TIM_IC_CaptureCallback>
 8002f14:	e005      	b.n	8002f22 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 f8c4 	bl	80030a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f000 f8d5 	bl	80030cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	f003 0304 	and.w	r3, r3, #4
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d020      	beq.n	8002f74 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f003 0304 	and.w	r3, r3, #4
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d01b      	beq.n	8002f74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f06f 0204 	mvn.w	r2, #4
 8002f44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2202      	movs	r2, #2
 8002f4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d003      	beq.n	8002f62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 f8ac 	bl	80030b8 <HAL_TIM_IC_CaptureCallback>
 8002f60:	e005      	b.n	8002f6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 f89e 	bl	80030a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f000 f8af 	bl	80030cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	f003 0308 	and.w	r3, r3, #8
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d020      	beq.n	8002fc0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f003 0308 	and.w	r3, r3, #8
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d01b      	beq.n	8002fc0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f06f 0208 	mvn.w	r2, #8
 8002f90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2204      	movs	r2, #4
 8002f96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	69db      	ldr	r3, [r3, #28]
 8002f9e:	f003 0303 	and.w	r3, r3, #3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d003      	beq.n	8002fae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 f886 	bl	80030b8 <HAL_TIM_IC_CaptureCallback>
 8002fac:	e005      	b.n	8002fba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 f878 	bl	80030a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f000 f889 	bl	80030cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	f003 0310 	and.w	r3, r3, #16
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d020      	beq.n	800300c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f003 0310 	and.w	r3, r3, #16
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d01b      	beq.n	800300c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f06f 0210 	mvn.w	r2, #16
 8002fdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2208      	movs	r2, #8
 8002fe2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	69db      	ldr	r3, [r3, #28]
 8002fea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d003      	beq.n	8002ffa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 f860 	bl	80030b8 <HAL_TIM_IC_CaptureCallback>
 8002ff8:	e005      	b.n	8003006 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 f852 	bl	80030a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f000 f863 	bl	80030cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00c      	beq.n	8003030 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f003 0301 	and.w	r3, r3, #1
 800301c:	2b00      	cmp	r3, #0
 800301e:	d007      	beq.n	8003030 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f06f 0201 	mvn.w	r2, #1
 8003028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f7fd fda0 	bl	8000b70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00c      	beq.n	8003054 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003040:	2b00      	cmp	r3, #0
 8003042:	d007      	beq.n	8003054 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800304c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 f900 	bl	8003254 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00c      	beq.n	8003078 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003064:	2b00      	cmp	r3, #0
 8003066:	d007      	beq.n	8003078 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 f834 	bl	80030e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	f003 0320 	and.w	r3, r3, #32
 800307e:	2b00      	cmp	r3, #0
 8003080:	d00c      	beq.n	800309c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f003 0320 	and.w	r3, r3, #32
 8003088:	2b00      	cmp	r3, #0
 800308a:	d007      	beq.n	800309c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f06f 0220 	mvn.w	r2, #32
 8003094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 f8d2 	bl	8003240 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800309c:	bf00      	nop
 800309e:	3710      	adds	r7, #16
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030ac:	bf00      	nop
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030e8:	bf00      	nop
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a43      	ldr	r2, [pc, #268]	@ (8003214 <TIM_Base_SetConfig+0x120>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d013      	beq.n	8003134 <TIM_Base_SetConfig+0x40>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003112:	d00f      	beq.n	8003134 <TIM_Base_SetConfig+0x40>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a40      	ldr	r2, [pc, #256]	@ (8003218 <TIM_Base_SetConfig+0x124>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d00b      	beq.n	8003134 <TIM_Base_SetConfig+0x40>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4a3f      	ldr	r2, [pc, #252]	@ (800321c <TIM_Base_SetConfig+0x128>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d007      	beq.n	8003134 <TIM_Base_SetConfig+0x40>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a3e      	ldr	r2, [pc, #248]	@ (8003220 <TIM_Base_SetConfig+0x12c>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d003      	beq.n	8003134 <TIM_Base_SetConfig+0x40>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4a3d      	ldr	r2, [pc, #244]	@ (8003224 <TIM_Base_SetConfig+0x130>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d108      	bne.n	8003146 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800313a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	68fa      	ldr	r2, [r7, #12]
 8003142:	4313      	orrs	r3, r2
 8003144:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a32      	ldr	r2, [pc, #200]	@ (8003214 <TIM_Base_SetConfig+0x120>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d02b      	beq.n	80031a6 <TIM_Base_SetConfig+0xb2>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003154:	d027      	beq.n	80031a6 <TIM_Base_SetConfig+0xb2>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a2f      	ldr	r2, [pc, #188]	@ (8003218 <TIM_Base_SetConfig+0x124>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d023      	beq.n	80031a6 <TIM_Base_SetConfig+0xb2>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a2e      	ldr	r2, [pc, #184]	@ (800321c <TIM_Base_SetConfig+0x128>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d01f      	beq.n	80031a6 <TIM_Base_SetConfig+0xb2>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a2d      	ldr	r2, [pc, #180]	@ (8003220 <TIM_Base_SetConfig+0x12c>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d01b      	beq.n	80031a6 <TIM_Base_SetConfig+0xb2>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a2c      	ldr	r2, [pc, #176]	@ (8003224 <TIM_Base_SetConfig+0x130>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d017      	beq.n	80031a6 <TIM_Base_SetConfig+0xb2>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a2b      	ldr	r2, [pc, #172]	@ (8003228 <TIM_Base_SetConfig+0x134>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d013      	beq.n	80031a6 <TIM_Base_SetConfig+0xb2>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a2a      	ldr	r2, [pc, #168]	@ (800322c <TIM_Base_SetConfig+0x138>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d00f      	beq.n	80031a6 <TIM_Base_SetConfig+0xb2>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a29      	ldr	r2, [pc, #164]	@ (8003230 <TIM_Base_SetConfig+0x13c>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d00b      	beq.n	80031a6 <TIM_Base_SetConfig+0xb2>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a28      	ldr	r2, [pc, #160]	@ (8003234 <TIM_Base_SetConfig+0x140>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d007      	beq.n	80031a6 <TIM_Base_SetConfig+0xb2>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a27      	ldr	r2, [pc, #156]	@ (8003238 <TIM_Base_SetConfig+0x144>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d003      	beq.n	80031a6 <TIM_Base_SetConfig+0xb2>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a26      	ldr	r2, [pc, #152]	@ (800323c <TIM_Base_SetConfig+0x148>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d108      	bne.n	80031b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	68fa      	ldr	r2, [r7, #12]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	689a      	ldr	r2, [r3, #8]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a0e      	ldr	r2, [pc, #56]	@ (8003214 <TIM_Base_SetConfig+0x120>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d003      	beq.n	80031e6 <TIM_Base_SetConfig+0xf2>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a10      	ldr	r2, [pc, #64]	@ (8003224 <TIM_Base_SetConfig+0x130>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d103      	bne.n	80031ee <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	691a      	ldr	r2, [r3, #16]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f043 0204 	orr.w	r2, r3, #4
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2201      	movs	r2, #1
 80031fe:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	601a      	str	r2, [r3, #0]
}
 8003206:	bf00      	nop
 8003208:	3714      	adds	r7, #20
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	40010000 	.word	0x40010000
 8003218:	40000400 	.word	0x40000400
 800321c:	40000800 	.word	0x40000800
 8003220:	40000c00 	.word	0x40000c00
 8003224:	40010400 	.word	0x40010400
 8003228:	40014000 	.word	0x40014000
 800322c:	40014400 	.word	0x40014400
 8003230:	40014800 	.word	0x40014800
 8003234:	40001800 	.word	0x40001800
 8003238:	40001c00 	.word	0x40001c00
 800323c:	40002000 	.word	0x40002000

08003240 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003248:	bf00      	nop
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800325c:	bf00      	nop
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e042      	b.n	8003300 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	d106      	bne.n	8003294 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f7fd fd40 	bl	8000d14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2224      	movs	r2, #36	@ 0x24
 8003298:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68da      	ldr	r2, [r3, #12]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80032aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f000 fd7f 	bl	8003db0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	691a      	ldr	r2, [r3, #16]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80032c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	695a      	ldr	r2, [r3, #20]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80032d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68da      	ldr	r2, [r3, #12]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80032e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2220      	movs	r2, #32
 80032ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2220      	movs	r2, #32
 80032f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	3708      	adds	r7, #8
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b08a      	sub	sp, #40	@ 0x28
 800330c:	af02      	add	r7, sp, #8
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	603b      	str	r3, [r7, #0]
 8003314:	4613      	mov	r3, r2
 8003316:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003318:	2300      	movs	r3, #0
 800331a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003322:	b2db      	uxtb	r3, r3
 8003324:	2b20      	cmp	r3, #32
 8003326:	d175      	bne.n	8003414 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d002      	beq.n	8003334 <HAL_UART_Transmit+0x2c>
 800332e:	88fb      	ldrh	r3, [r7, #6]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d101      	bne.n	8003338 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e06e      	b.n	8003416 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2200      	movs	r2, #0
 800333c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2221      	movs	r2, #33	@ 0x21
 8003342:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003346:	f7fd fe77 	bl	8001038 <HAL_GetTick>
 800334a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	88fa      	ldrh	r2, [r7, #6]
 8003350:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	88fa      	ldrh	r2, [r7, #6]
 8003356:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003360:	d108      	bne.n	8003374 <HAL_UART_Transmit+0x6c>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d104      	bne.n	8003374 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800336a:	2300      	movs	r3, #0
 800336c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	61bb      	str	r3, [r7, #24]
 8003372:	e003      	b.n	800337c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003378:	2300      	movs	r3, #0
 800337a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800337c:	e02e      	b.n	80033dc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	9300      	str	r3, [sp, #0]
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	2200      	movs	r2, #0
 8003386:	2180      	movs	r1, #128	@ 0x80
 8003388:	68f8      	ldr	r0, [r7, #12]
 800338a:	f000 fb1d 	bl	80039c8 <UART_WaitOnFlagUntilTimeout>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d005      	beq.n	80033a0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2220      	movs	r2, #32
 8003398:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e03a      	b.n	8003416 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d10b      	bne.n	80033be <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	881b      	ldrh	r3, [r3, #0]
 80033aa:	461a      	mov	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	3302      	adds	r3, #2
 80033ba:	61bb      	str	r3, [r7, #24]
 80033bc:	e007      	b.n	80033ce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	781a      	ldrb	r2, [r3, #0]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	3301      	adds	r3, #1
 80033cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	3b01      	subs	r3, #1
 80033d6:	b29a      	uxth	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1cb      	bne.n	800337e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	9300      	str	r3, [sp, #0]
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	2200      	movs	r2, #0
 80033ee:	2140      	movs	r1, #64	@ 0x40
 80033f0:	68f8      	ldr	r0, [r7, #12]
 80033f2:	f000 fae9 	bl	80039c8 <UART_WaitOnFlagUntilTimeout>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d005      	beq.n	8003408 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2220      	movs	r2, #32
 8003400:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e006      	b.n	8003416 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2220      	movs	r2, #32
 800340c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003410:	2300      	movs	r3, #0
 8003412:	e000      	b.n	8003416 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003414:	2302      	movs	r3, #2
  }
}
 8003416:	4618      	mov	r0, r3
 8003418:	3720      	adds	r7, #32
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
	...

08003420 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b0ba      	sub	sp, #232	@ 0xe8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003446:	2300      	movs	r3, #0
 8003448:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800344c:	2300      	movs	r3, #0
 800344e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003456:	f003 030f 	and.w	r3, r3, #15
 800345a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800345e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003462:	2b00      	cmp	r3, #0
 8003464:	d10f      	bne.n	8003486 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800346a:	f003 0320 	and.w	r3, r3, #32
 800346e:	2b00      	cmp	r3, #0
 8003470:	d009      	beq.n	8003486 <HAL_UART_IRQHandler+0x66>
 8003472:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003476:	f003 0320 	and.w	r3, r3, #32
 800347a:	2b00      	cmp	r3, #0
 800347c:	d003      	beq.n	8003486 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 fbd7 	bl	8003c32 <UART_Receive_IT>
      return;
 8003484:	e273      	b.n	800396e <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003486:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800348a:	2b00      	cmp	r3, #0
 800348c:	f000 80de 	beq.w	800364c <HAL_UART_IRQHandler+0x22c>
 8003490:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003494:	f003 0301 	and.w	r3, r3, #1
 8003498:	2b00      	cmp	r3, #0
 800349a:	d106      	bne.n	80034aa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800349c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034a0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f000 80d1 	beq.w	800364c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80034aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d00b      	beq.n	80034ce <HAL_UART_IRQHandler+0xae>
 80034b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d005      	beq.n	80034ce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034c6:	f043 0201 	orr.w	r2, r3, #1
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034d2:	f003 0304 	and.w	r3, r3, #4
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00b      	beq.n	80034f2 <HAL_UART_IRQHandler+0xd2>
 80034da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d005      	beq.n	80034f2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ea:	f043 0202 	orr.w	r2, r3, #2
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00b      	beq.n	8003516 <HAL_UART_IRQHandler+0xf6>
 80034fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b00      	cmp	r3, #0
 8003508:	d005      	beq.n	8003516 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800350e:	f043 0204 	orr.w	r2, r3, #4
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800351a:	f003 0308 	and.w	r3, r3, #8
 800351e:	2b00      	cmp	r3, #0
 8003520:	d011      	beq.n	8003546 <HAL_UART_IRQHandler+0x126>
 8003522:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003526:	f003 0320 	and.w	r3, r3, #32
 800352a:	2b00      	cmp	r3, #0
 800352c:	d105      	bne.n	800353a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800352e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	2b00      	cmp	r3, #0
 8003538:	d005      	beq.n	8003546 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800353e:	f043 0208 	orr.w	r2, r3, #8
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800354a:	2b00      	cmp	r3, #0
 800354c:	f000 820a 	beq.w	8003964 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003550:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003554:	f003 0320 	and.w	r3, r3, #32
 8003558:	2b00      	cmp	r3, #0
 800355a:	d008      	beq.n	800356e <HAL_UART_IRQHandler+0x14e>
 800355c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003560:	f003 0320 	and.w	r3, r3, #32
 8003564:	2b00      	cmp	r3, #0
 8003566:	d002      	beq.n	800356e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f000 fb62 	bl	8003c32 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	695b      	ldr	r3, [r3, #20]
 8003574:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003578:	2b40      	cmp	r3, #64	@ 0x40
 800357a:	bf0c      	ite	eq
 800357c:	2301      	moveq	r3, #1
 800357e:	2300      	movne	r3, #0
 8003580:	b2db      	uxtb	r3, r3
 8003582:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800358a:	f003 0308 	and.w	r3, r3, #8
 800358e:	2b00      	cmp	r3, #0
 8003590:	d103      	bne.n	800359a <HAL_UART_IRQHandler+0x17a>
 8003592:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003596:	2b00      	cmp	r3, #0
 8003598:	d04f      	beq.n	800363a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 fa6d 	bl	8003a7a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035aa:	2b40      	cmp	r3, #64	@ 0x40
 80035ac:	d141      	bne.n	8003632 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	3314      	adds	r3, #20
 80035b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80035bc:	e853 3f00 	ldrex	r3, [r3]
 80035c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80035c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80035c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80035cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	3314      	adds	r3, #20
 80035d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80035da:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80035de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80035e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80035ea:	e841 2300 	strex	r3, r2, [r1]
 80035ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80035f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1d9      	bne.n	80035ae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d013      	beq.n	800362a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003606:	4a8a      	ldr	r2, [pc, #552]	@ (8003830 <HAL_UART_IRQHandler+0x410>)
 8003608:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800360e:	4618      	mov	r0, r3
 8003610:	f7fe fcea 	bl	8001fe8 <HAL_DMA_Abort_IT>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d016      	beq.n	8003648 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800361e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003624:	4610      	mov	r0, r2
 8003626:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003628:	e00e      	b.n	8003648 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 f9b6 	bl	800399c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003630:	e00a      	b.n	8003648 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 f9b2 	bl	800399c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003638:	e006      	b.n	8003648 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 f9ae 	bl	800399c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003646:	e18d      	b.n	8003964 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003648:	bf00      	nop
    return;
 800364a:	e18b      	b.n	8003964 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003650:	2b01      	cmp	r3, #1
 8003652:	f040 8167 	bne.w	8003924 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800365a:	f003 0310 	and.w	r3, r3, #16
 800365e:	2b00      	cmp	r3, #0
 8003660:	f000 8160 	beq.w	8003924 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8003664:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003668:	f003 0310 	and.w	r3, r3, #16
 800366c:	2b00      	cmp	r3, #0
 800366e:	f000 8159 	beq.w	8003924 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003672:	2300      	movs	r3, #0
 8003674:	60bb      	str	r3, [r7, #8]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	60bb      	str	r3, [r7, #8]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	60bb      	str	r3, [r7, #8]
 8003686:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003692:	2b40      	cmp	r3, #64	@ 0x40
 8003694:	f040 80ce 	bne.w	8003834 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80036a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	f000 80a9 	beq.w	8003800 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80036b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80036b6:	429a      	cmp	r2, r3
 80036b8:	f080 80a2 	bcs.w	8003800 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80036c2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036c8:	69db      	ldr	r3, [r3, #28]
 80036ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036ce:	f000 8088 	beq.w	80037e2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	330c      	adds	r3, #12
 80036d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80036e0:	e853 3f00 	ldrex	r3, [r3]
 80036e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80036e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80036ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	330c      	adds	r3, #12
 80036fa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80036fe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003702:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003706:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800370a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800370e:	e841 2300 	strex	r3, r2, [r1]
 8003712:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003716:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800371a:	2b00      	cmp	r3, #0
 800371c:	d1d9      	bne.n	80036d2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	3314      	adds	r3, #20
 8003724:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003726:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003728:	e853 3f00 	ldrex	r3, [r3]
 800372c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800372e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003730:	f023 0301 	bic.w	r3, r3, #1
 8003734:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	3314      	adds	r3, #20
 800373e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003742:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003746:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003748:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800374a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800374e:	e841 2300 	strex	r3, r2, [r1]
 8003752:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003754:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1e1      	bne.n	800371e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	3314      	adds	r3, #20
 8003760:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003762:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003764:	e853 3f00 	ldrex	r3, [r3]
 8003768:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800376a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800376c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003770:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	3314      	adds	r3, #20
 800377a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800377e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003780:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003782:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003784:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003786:	e841 2300 	strex	r3, r2, [r1]
 800378a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800378c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800378e:	2b00      	cmp	r3, #0
 8003790:	d1e3      	bne.n	800375a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2220      	movs	r2, #32
 8003796:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	330c      	adds	r3, #12
 80037a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037aa:	e853 3f00 	ldrex	r3, [r3]
 80037ae:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80037b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037b2:	f023 0310 	bic.w	r3, r3, #16
 80037b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	330c      	adds	r3, #12
 80037c0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80037c4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80037c6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80037ca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80037cc:	e841 2300 	strex	r3, r2, [r1]
 80037d0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80037d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1e3      	bne.n	80037a0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037dc:	4618      	mov	r0, r3
 80037de:	f7fe fb93 	bl	8001f08 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2202      	movs	r2, #2
 80037e6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	4619      	mov	r1, r3
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f000 f8d9 	bl	80039b0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80037fe:	e0b3      	b.n	8003968 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003804:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003808:	429a      	cmp	r2, r3
 800380a:	f040 80ad 	bne.w	8003968 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003812:	69db      	ldr	r3, [r3, #28]
 8003814:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003818:	f040 80a6 	bne.w	8003968 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2202      	movs	r2, #2
 8003820:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003826:	4619      	mov	r1, r3
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f000 f8c1 	bl	80039b0 <HAL_UARTEx_RxEventCallback>
      return;
 800382e:	e09b      	b.n	8003968 <HAL_UART_IRQHandler+0x548>
 8003830:	08003b41 	.word	0x08003b41
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800383c:	b29b      	uxth	r3, r3
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003848:	b29b      	uxth	r3, r3
 800384a:	2b00      	cmp	r3, #0
 800384c:	f000 808e 	beq.w	800396c <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8003850:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003854:	2b00      	cmp	r3, #0
 8003856:	f000 8089 	beq.w	800396c <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	330c      	adds	r3, #12
 8003860:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003864:	e853 3f00 	ldrex	r3, [r3]
 8003868:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800386a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800386c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003870:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	330c      	adds	r3, #12
 800387a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800387e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003880:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003882:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003884:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003886:	e841 2300 	strex	r3, r2, [r1]
 800388a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800388c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1e3      	bne.n	800385a <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	3314      	adds	r3, #20
 8003898:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800389a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800389c:	e853 3f00 	ldrex	r3, [r3]
 80038a0:	623b      	str	r3, [r7, #32]
   return(result);
 80038a2:	6a3b      	ldr	r3, [r7, #32]
 80038a4:	f023 0301 	bic.w	r3, r3, #1
 80038a8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	3314      	adds	r3, #20
 80038b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80038b6:	633a      	str	r2, [r7, #48]	@ 0x30
 80038b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80038bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038be:	e841 2300 	strex	r3, r2, [r1]
 80038c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80038c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1e3      	bne.n	8003892 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2220      	movs	r2, #32
 80038ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	330c      	adds	r3, #12
 80038de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	e853 3f00 	ldrex	r3, [r3]
 80038e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f023 0310 	bic.w	r3, r3, #16
 80038ee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	330c      	adds	r3, #12
 80038f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80038fc:	61fa      	str	r2, [r7, #28]
 80038fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003900:	69b9      	ldr	r1, [r7, #24]
 8003902:	69fa      	ldr	r2, [r7, #28]
 8003904:	e841 2300 	strex	r3, r2, [r1]
 8003908:	617b      	str	r3, [r7, #20]
   return(result);
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d1e3      	bne.n	80038d8 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2202      	movs	r2, #2
 8003914:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003916:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800391a:	4619      	mov	r1, r3
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 f847 	bl	80039b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003922:	e023      	b.n	800396c <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003924:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003928:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800392c:	2b00      	cmp	r3, #0
 800392e:	d009      	beq.n	8003944 <HAL_UART_IRQHandler+0x524>
 8003930:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003934:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003938:	2b00      	cmp	r3, #0
 800393a:	d003      	beq.n	8003944 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f000 f910 	bl	8003b62 <UART_Transmit_IT>
    return;
 8003942:	e014      	b.n	800396e <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003944:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003948:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800394c:	2b00      	cmp	r3, #0
 800394e:	d00e      	beq.n	800396e <HAL_UART_IRQHandler+0x54e>
 8003950:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003954:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003958:	2b00      	cmp	r3, #0
 800395a:	d008      	beq.n	800396e <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f000 f950 	bl	8003c02 <UART_EndTransmit_IT>
    return;
 8003962:	e004      	b.n	800396e <HAL_UART_IRQHandler+0x54e>
    return;
 8003964:	bf00      	nop
 8003966:	e002      	b.n	800396e <HAL_UART_IRQHandler+0x54e>
      return;
 8003968:	bf00      	nop
 800396a:	e000      	b.n	800396e <HAL_UART_IRQHandler+0x54e>
      return;
 800396c:	bf00      	nop
  }
}
 800396e:	37e8      	adds	r7, #232	@ 0xe8
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800397c:	bf00      	nop
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003990:	bf00      	nop
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80039a4:	bf00      	nop
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	460b      	mov	r3, r1
 80039ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80039bc:	bf00      	nop
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b086      	sub	sp, #24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	603b      	str	r3, [r7, #0]
 80039d4:	4613      	mov	r3, r2
 80039d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039d8:	e03b      	b.n	8003a52 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039da:	6a3b      	ldr	r3, [r7, #32]
 80039dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80039e0:	d037      	beq.n	8003a52 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039e2:	f7fd fb29 	bl	8001038 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	6a3a      	ldr	r2, [r7, #32]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d302      	bcc.n	80039f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80039f2:	6a3b      	ldr	r3, [r7, #32]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d101      	bne.n	80039fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e03a      	b.n	8003a72 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	f003 0304 	and.w	r3, r3, #4
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d023      	beq.n	8003a52 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	2b80      	cmp	r3, #128	@ 0x80
 8003a0e:	d020      	beq.n	8003a52 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	2b40      	cmp	r3, #64	@ 0x40
 8003a14:	d01d      	beq.n	8003a52 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0308 	and.w	r3, r3, #8
 8003a20:	2b08      	cmp	r3, #8
 8003a22:	d116      	bne.n	8003a52 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003a24:	2300      	movs	r3, #0
 8003a26:	617b      	str	r3, [r7, #20]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	617b      	str	r3, [r7, #20]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	617b      	str	r3, [r7, #20]
 8003a38:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a3a:	68f8      	ldr	r0, [r7, #12]
 8003a3c:	f000 f81d 	bl	8003a7a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2208      	movs	r2, #8
 8003a44:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e00f      	b.n	8003a72 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	68ba      	ldr	r2, [r7, #8]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	bf0c      	ite	eq
 8003a62:	2301      	moveq	r3, #1
 8003a64:	2300      	movne	r3, #0
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	461a      	mov	r2, r3
 8003a6a:	79fb      	ldrb	r3, [r7, #7]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d0b4      	beq.n	80039da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3718      	adds	r7, #24
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}

08003a7a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	b095      	sub	sp, #84	@ 0x54
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	330c      	adds	r3, #12
 8003a88:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a8c:	e853 3f00 	ldrex	r3, [r3]
 8003a90:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a94:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a98:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	330c      	adds	r3, #12
 8003aa0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003aa2:	643a      	str	r2, [r7, #64]	@ 0x40
 8003aa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003aa8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003aaa:	e841 2300 	strex	r3, r2, [r1]
 8003aae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003ab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1e5      	bne.n	8003a82 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	3314      	adds	r3, #20
 8003abc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003abe:	6a3b      	ldr	r3, [r7, #32]
 8003ac0:	e853 3f00 	ldrex	r3, [r3]
 8003ac4:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	f023 0301 	bic.w	r3, r3, #1
 8003acc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	3314      	adds	r3, #20
 8003ad4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ad6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ad8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ada:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003adc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ade:	e841 2300 	strex	r3, r2, [r1]
 8003ae2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1e5      	bne.n	8003ab6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d119      	bne.n	8003b26 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	330c      	adds	r3, #12
 8003af8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	e853 3f00 	ldrex	r3, [r3]
 8003b00:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	f023 0310 	bic.w	r3, r3, #16
 8003b08:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	330c      	adds	r3, #12
 8003b10:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b12:	61ba      	str	r2, [r7, #24]
 8003b14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b16:	6979      	ldr	r1, [r7, #20]
 8003b18:	69ba      	ldr	r2, [r7, #24]
 8003b1a:	e841 2300 	strex	r3, r2, [r1]
 8003b1e:	613b      	str	r3, [r7, #16]
   return(result);
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1e5      	bne.n	8003af2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2220      	movs	r2, #32
 8003b2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003b34:	bf00      	nop
 8003b36:	3754      	adds	r7, #84	@ 0x54
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b4c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2200      	movs	r2, #0
 8003b52:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b54:	68f8      	ldr	r0, [r7, #12]
 8003b56:	f7ff ff21 	bl	800399c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b5a:	bf00      	nop
 8003b5c:	3710      	adds	r7, #16
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003b62:	b480      	push	{r7}
 8003b64:	b085      	sub	sp, #20
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2b21      	cmp	r3, #33	@ 0x21
 8003b74:	d13e      	bne.n	8003bf4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b7e:	d114      	bne.n	8003baa <UART_Transmit_IT+0x48>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	691b      	ldr	r3, [r3, #16]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d110      	bne.n	8003baa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a1b      	ldr	r3, [r3, #32]
 8003b8c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	881b      	ldrh	r3, [r3, #0]
 8003b92:	461a      	mov	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b9c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a1b      	ldr	r3, [r3, #32]
 8003ba2:	1c9a      	adds	r2, r3, #2
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	621a      	str	r2, [r3, #32]
 8003ba8:	e008      	b.n	8003bbc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	1c59      	adds	r1, r3, #1
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	6211      	str	r1, [r2, #32]
 8003bb4:	781a      	ldrb	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	4619      	mov	r1, r3
 8003bca:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d10f      	bne.n	8003bf0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68da      	ldr	r2, [r3, #12]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003bde:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	68da      	ldr	r2, [r3, #12]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003bee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	e000      	b.n	8003bf6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003bf4:	2302      	movs	r3, #2
  }
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3714      	adds	r7, #20
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr

08003c02 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b082      	sub	sp, #8
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68da      	ldr	r2, [r3, #12]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c18:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2220      	movs	r2, #32
 8003c1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f7ff fea6 	bl	8003974 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3708      	adds	r7, #8
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b08c      	sub	sp, #48	@ 0x30
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b22      	cmp	r3, #34	@ 0x22
 8003c4c:	f040 80aa 	bne.w	8003da4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c58:	d115      	bne.n	8003c86 <UART_Receive_IT+0x54>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d111      	bne.n	8003c86 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c66:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c74:	b29a      	uxth	r2, r3
 8003c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c78:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c7e:	1c9a      	adds	r2, r3, #2
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	629a      	str	r2, [r3, #40]	@ 0x28
 8003c84:	e024      	b.n	8003cd0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c94:	d007      	beq.n	8003ca6 <UART_Receive_IT+0x74>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d10a      	bne.n	8003cb4 <UART_Receive_IT+0x82>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d106      	bne.n	8003cb4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	b2da      	uxtb	r2, r3
 8003cae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cb0:	701a      	strb	r2, [r3, #0]
 8003cb2:	e008      	b.n	8003cc6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003cc0:	b2da      	uxtb	r2, r3
 8003cc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cc4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cca:	1c5a      	adds	r2, r3, #1
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	4619      	mov	r1, r3
 8003cde:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d15d      	bne.n	8003da0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68da      	ldr	r2, [r3, #12]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f022 0220 	bic.w	r2, r2, #32
 8003cf2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68da      	ldr	r2, [r3, #12]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	695a      	ldr	r2, [r3, #20]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f022 0201 	bic.w	r2, r2, #1
 8003d12:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2220      	movs	r2, #32
 8003d18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d135      	bne.n	8003d96 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	330c      	adds	r3, #12
 8003d36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	e853 3f00 	ldrex	r3, [r3]
 8003d3e:	613b      	str	r3, [r7, #16]
   return(result);
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	f023 0310 	bic.w	r3, r3, #16
 8003d46:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	330c      	adds	r3, #12
 8003d4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d50:	623a      	str	r2, [r7, #32]
 8003d52:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d54:	69f9      	ldr	r1, [r7, #28]
 8003d56:	6a3a      	ldr	r2, [r7, #32]
 8003d58:	e841 2300 	strex	r3, r2, [r1]
 8003d5c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d1e5      	bne.n	8003d30 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0310 	and.w	r3, r3, #16
 8003d6e:	2b10      	cmp	r3, #16
 8003d70:	d10a      	bne.n	8003d88 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d72:	2300      	movs	r3, #0
 8003d74:	60fb      	str	r3, [r7, #12]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	60fb      	str	r3, [r7, #12]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	60fb      	str	r3, [r7, #12]
 8003d86:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f7ff fe0e 	bl	80039b0 <HAL_UARTEx_RxEventCallback>
 8003d94:	e002      	b.n	8003d9c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f7ff fdf6 	bl	8003988 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	e002      	b.n	8003da6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003da0:	2300      	movs	r3, #0
 8003da2:	e000      	b.n	8003da6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003da4:	2302      	movs	r3, #2
  }
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3730      	adds	r7, #48	@ 0x30
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
	...

08003db0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003db0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003db4:	b0c0      	sub	sp, #256	@ 0x100
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	691b      	ldr	r3, [r3, #16]
 8003dc4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dcc:	68d9      	ldr	r1, [r3, #12]
 8003dce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	ea40 0301 	orr.w	r3, r0, r1
 8003dd8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dde:	689a      	ldr	r2, [r3, #8]
 8003de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	431a      	orrs	r2, r3
 8003de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	431a      	orrs	r2, r3
 8003df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003df4:	69db      	ldr	r3, [r3, #28]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003e08:	f021 010c 	bic.w	r1, r1, #12
 8003e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003e16:	430b      	orrs	r3, r1
 8003e18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	695b      	ldr	r3, [r3, #20]
 8003e22:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003e26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e2a:	6999      	ldr	r1, [r3, #24]
 8003e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	ea40 0301 	orr.w	r3, r0, r1
 8003e36:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	4b8f      	ldr	r3, [pc, #572]	@ (800407c <UART_SetConfig+0x2cc>)
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d005      	beq.n	8003e50 <UART_SetConfig+0xa0>
 8003e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	4b8d      	ldr	r3, [pc, #564]	@ (8004080 <UART_SetConfig+0x2d0>)
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d104      	bne.n	8003e5a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e50:	f7fe ff64 	bl	8002d1c <HAL_RCC_GetPCLK2Freq>
 8003e54:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003e58:	e003      	b.n	8003e62 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e5a:	f7fe ff4b 	bl	8002cf4 <HAL_RCC_GetPCLK1Freq>
 8003e5e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e66:	69db      	ldr	r3, [r3, #28]
 8003e68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e6c:	f040 810c 	bne.w	8004088 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e74:	2200      	movs	r2, #0
 8003e76:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003e7a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003e7e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003e82:	4622      	mov	r2, r4
 8003e84:	462b      	mov	r3, r5
 8003e86:	1891      	adds	r1, r2, r2
 8003e88:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003e8a:	415b      	adcs	r3, r3
 8003e8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003e92:	4621      	mov	r1, r4
 8003e94:	eb12 0801 	adds.w	r8, r2, r1
 8003e98:	4629      	mov	r1, r5
 8003e9a:	eb43 0901 	adc.w	r9, r3, r1
 8003e9e:	f04f 0200 	mov.w	r2, #0
 8003ea2:	f04f 0300 	mov.w	r3, #0
 8003ea6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003eaa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003eae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003eb2:	4690      	mov	r8, r2
 8003eb4:	4699      	mov	r9, r3
 8003eb6:	4623      	mov	r3, r4
 8003eb8:	eb18 0303 	adds.w	r3, r8, r3
 8003ebc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003ec0:	462b      	mov	r3, r5
 8003ec2:	eb49 0303 	adc.w	r3, r9, r3
 8003ec6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003ed6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003eda:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003ede:	460b      	mov	r3, r1
 8003ee0:	18db      	adds	r3, r3, r3
 8003ee2:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	eb42 0303 	adc.w	r3, r2, r3
 8003eea:	657b      	str	r3, [r7, #84]	@ 0x54
 8003eec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003ef0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003ef4:	f7fc f9c4 	bl	8000280 <__aeabi_uldivmod>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	460b      	mov	r3, r1
 8003efc:	4b61      	ldr	r3, [pc, #388]	@ (8004084 <UART_SetConfig+0x2d4>)
 8003efe:	fba3 2302 	umull	r2, r3, r3, r2
 8003f02:	095b      	lsrs	r3, r3, #5
 8003f04:	011c      	lsls	r4, r3, #4
 8003f06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f10:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003f14:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003f18:	4642      	mov	r2, r8
 8003f1a:	464b      	mov	r3, r9
 8003f1c:	1891      	adds	r1, r2, r2
 8003f1e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003f20:	415b      	adcs	r3, r3
 8003f22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f24:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003f28:	4641      	mov	r1, r8
 8003f2a:	eb12 0a01 	adds.w	sl, r2, r1
 8003f2e:	4649      	mov	r1, r9
 8003f30:	eb43 0b01 	adc.w	fp, r3, r1
 8003f34:	f04f 0200 	mov.w	r2, #0
 8003f38:	f04f 0300 	mov.w	r3, #0
 8003f3c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f40:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f48:	4692      	mov	sl, r2
 8003f4a:	469b      	mov	fp, r3
 8003f4c:	4643      	mov	r3, r8
 8003f4e:	eb1a 0303 	adds.w	r3, sl, r3
 8003f52:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f56:	464b      	mov	r3, r9
 8003f58:	eb4b 0303 	adc.w	r3, fp, r3
 8003f5c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f6c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003f70:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003f74:	460b      	mov	r3, r1
 8003f76:	18db      	adds	r3, r3, r3
 8003f78:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	eb42 0303 	adc.w	r3, r2, r3
 8003f80:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f82:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003f86:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003f8a:	f7fc f979 	bl	8000280 <__aeabi_uldivmod>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	460b      	mov	r3, r1
 8003f92:	4611      	mov	r1, r2
 8003f94:	4b3b      	ldr	r3, [pc, #236]	@ (8004084 <UART_SetConfig+0x2d4>)
 8003f96:	fba3 2301 	umull	r2, r3, r3, r1
 8003f9a:	095b      	lsrs	r3, r3, #5
 8003f9c:	2264      	movs	r2, #100	@ 0x64
 8003f9e:	fb02 f303 	mul.w	r3, r2, r3
 8003fa2:	1acb      	subs	r3, r1, r3
 8003fa4:	00db      	lsls	r3, r3, #3
 8003fa6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003faa:	4b36      	ldr	r3, [pc, #216]	@ (8004084 <UART_SetConfig+0x2d4>)
 8003fac:	fba3 2302 	umull	r2, r3, r3, r2
 8003fb0:	095b      	lsrs	r3, r3, #5
 8003fb2:	005b      	lsls	r3, r3, #1
 8003fb4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003fb8:	441c      	add	r4, r3
 8003fba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003fc4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003fc8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003fcc:	4642      	mov	r2, r8
 8003fce:	464b      	mov	r3, r9
 8003fd0:	1891      	adds	r1, r2, r2
 8003fd2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003fd4:	415b      	adcs	r3, r3
 8003fd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003fd8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003fdc:	4641      	mov	r1, r8
 8003fde:	1851      	adds	r1, r2, r1
 8003fe0:	6339      	str	r1, [r7, #48]	@ 0x30
 8003fe2:	4649      	mov	r1, r9
 8003fe4:	414b      	adcs	r3, r1
 8003fe6:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fe8:	f04f 0200 	mov.w	r2, #0
 8003fec:	f04f 0300 	mov.w	r3, #0
 8003ff0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003ff4:	4659      	mov	r1, fp
 8003ff6:	00cb      	lsls	r3, r1, #3
 8003ff8:	4651      	mov	r1, sl
 8003ffa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ffe:	4651      	mov	r1, sl
 8004000:	00ca      	lsls	r2, r1, #3
 8004002:	4610      	mov	r0, r2
 8004004:	4619      	mov	r1, r3
 8004006:	4603      	mov	r3, r0
 8004008:	4642      	mov	r2, r8
 800400a:	189b      	adds	r3, r3, r2
 800400c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004010:	464b      	mov	r3, r9
 8004012:	460a      	mov	r2, r1
 8004014:	eb42 0303 	adc.w	r3, r2, r3
 8004018:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800401c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004028:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800402c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004030:	460b      	mov	r3, r1
 8004032:	18db      	adds	r3, r3, r3
 8004034:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004036:	4613      	mov	r3, r2
 8004038:	eb42 0303 	adc.w	r3, r2, r3
 800403c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800403e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004042:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004046:	f7fc f91b 	bl	8000280 <__aeabi_uldivmod>
 800404a:	4602      	mov	r2, r0
 800404c:	460b      	mov	r3, r1
 800404e:	4b0d      	ldr	r3, [pc, #52]	@ (8004084 <UART_SetConfig+0x2d4>)
 8004050:	fba3 1302 	umull	r1, r3, r3, r2
 8004054:	095b      	lsrs	r3, r3, #5
 8004056:	2164      	movs	r1, #100	@ 0x64
 8004058:	fb01 f303 	mul.w	r3, r1, r3
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	00db      	lsls	r3, r3, #3
 8004060:	3332      	adds	r3, #50	@ 0x32
 8004062:	4a08      	ldr	r2, [pc, #32]	@ (8004084 <UART_SetConfig+0x2d4>)
 8004064:	fba2 2303 	umull	r2, r3, r2, r3
 8004068:	095b      	lsrs	r3, r3, #5
 800406a:	f003 0207 	and.w	r2, r3, #7
 800406e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4422      	add	r2, r4
 8004076:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004078:	e106      	b.n	8004288 <UART_SetConfig+0x4d8>
 800407a:	bf00      	nop
 800407c:	40011000 	.word	0x40011000
 8004080:	40011400 	.word	0x40011400
 8004084:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004088:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800408c:	2200      	movs	r2, #0
 800408e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004092:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004096:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800409a:	4642      	mov	r2, r8
 800409c:	464b      	mov	r3, r9
 800409e:	1891      	adds	r1, r2, r2
 80040a0:	6239      	str	r1, [r7, #32]
 80040a2:	415b      	adcs	r3, r3
 80040a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80040a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80040aa:	4641      	mov	r1, r8
 80040ac:	1854      	adds	r4, r2, r1
 80040ae:	4649      	mov	r1, r9
 80040b0:	eb43 0501 	adc.w	r5, r3, r1
 80040b4:	f04f 0200 	mov.w	r2, #0
 80040b8:	f04f 0300 	mov.w	r3, #0
 80040bc:	00eb      	lsls	r3, r5, #3
 80040be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040c2:	00e2      	lsls	r2, r4, #3
 80040c4:	4614      	mov	r4, r2
 80040c6:	461d      	mov	r5, r3
 80040c8:	4643      	mov	r3, r8
 80040ca:	18e3      	adds	r3, r4, r3
 80040cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80040d0:	464b      	mov	r3, r9
 80040d2:	eb45 0303 	adc.w	r3, r5, r3
 80040d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80040da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80040e6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80040ea:	f04f 0200 	mov.w	r2, #0
 80040ee:	f04f 0300 	mov.w	r3, #0
 80040f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80040f6:	4629      	mov	r1, r5
 80040f8:	008b      	lsls	r3, r1, #2
 80040fa:	4621      	mov	r1, r4
 80040fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004100:	4621      	mov	r1, r4
 8004102:	008a      	lsls	r2, r1, #2
 8004104:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004108:	f7fc f8ba 	bl	8000280 <__aeabi_uldivmod>
 800410c:	4602      	mov	r2, r0
 800410e:	460b      	mov	r3, r1
 8004110:	4b60      	ldr	r3, [pc, #384]	@ (8004294 <UART_SetConfig+0x4e4>)
 8004112:	fba3 2302 	umull	r2, r3, r3, r2
 8004116:	095b      	lsrs	r3, r3, #5
 8004118:	011c      	lsls	r4, r3, #4
 800411a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800411e:	2200      	movs	r2, #0
 8004120:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004124:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004128:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800412c:	4642      	mov	r2, r8
 800412e:	464b      	mov	r3, r9
 8004130:	1891      	adds	r1, r2, r2
 8004132:	61b9      	str	r1, [r7, #24]
 8004134:	415b      	adcs	r3, r3
 8004136:	61fb      	str	r3, [r7, #28]
 8004138:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800413c:	4641      	mov	r1, r8
 800413e:	1851      	adds	r1, r2, r1
 8004140:	6139      	str	r1, [r7, #16]
 8004142:	4649      	mov	r1, r9
 8004144:	414b      	adcs	r3, r1
 8004146:	617b      	str	r3, [r7, #20]
 8004148:	f04f 0200 	mov.w	r2, #0
 800414c:	f04f 0300 	mov.w	r3, #0
 8004150:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004154:	4659      	mov	r1, fp
 8004156:	00cb      	lsls	r3, r1, #3
 8004158:	4651      	mov	r1, sl
 800415a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800415e:	4651      	mov	r1, sl
 8004160:	00ca      	lsls	r2, r1, #3
 8004162:	4610      	mov	r0, r2
 8004164:	4619      	mov	r1, r3
 8004166:	4603      	mov	r3, r0
 8004168:	4642      	mov	r2, r8
 800416a:	189b      	adds	r3, r3, r2
 800416c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004170:	464b      	mov	r3, r9
 8004172:	460a      	mov	r2, r1
 8004174:	eb42 0303 	adc.w	r3, r2, r3
 8004178:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800417c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004186:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004188:	f04f 0200 	mov.w	r2, #0
 800418c:	f04f 0300 	mov.w	r3, #0
 8004190:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004194:	4649      	mov	r1, r9
 8004196:	008b      	lsls	r3, r1, #2
 8004198:	4641      	mov	r1, r8
 800419a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800419e:	4641      	mov	r1, r8
 80041a0:	008a      	lsls	r2, r1, #2
 80041a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80041a6:	f7fc f86b 	bl	8000280 <__aeabi_uldivmod>
 80041aa:	4602      	mov	r2, r0
 80041ac:	460b      	mov	r3, r1
 80041ae:	4611      	mov	r1, r2
 80041b0:	4b38      	ldr	r3, [pc, #224]	@ (8004294 <UART_SetConfig+0x4e4>)
 80041b2:	fba3 2301 	umull	r2, r3, r3, r1
 80041b6:	095b      	lsrs	r3, r3, #5
 80041b8:	2264      	movs	r2, #100	@ 0x64
 80041ba:	fb02 f303 	mul.w	r3, r2, r3
 80041be:	1acb      	subs	r3, r1, r3
 80041c0:	011b      	lsls	r3, r3, #4
 80041c2:	3332      	adds	r3, #50	@ 0x32
 80041c4:	4a33      	ldr	r2, [pc, #204]	@ (8004294 <UART_SetConfig+0x4e4>)
 80041c6:	fba2 2303 	umull	r2, r3, r2, r3
 80041ca:	095b      	lsrs	r3, r3, #5
 80041cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80041d0:	441c      	add	r4, r3
 80041d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041d6:	2200      	movs	r2, #0
 80041d8:	673b      	str	r3, [r7, #112]	@ 0x70
 80041da:	677a      	str	r2, [r7, #116]	@ 0x74
 80041dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80041e0:	4642      	mov	r2, r8
 80041e2:	464b      	mov	r3, r9
 80041e4:	1891      	adds	r1, r2, r2
 80041e6:	60b9      	str	r1, [r7, #8]
 80041e8:	415b      	adcs	r3, r3
 80041ea:	60fb      	str	r3, [r7, #12]
 80041ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041f0:	4641      	mov	r1, r8
 80041f2:	1851      	adds	r1, r2, r1
 80041f4:	6039      	str	r1, [r7, #0]
 80041f6:	4649      	mov	r1, r9
 80041f8:	414b      	adcs	r3, r1
 80041fa:	607b      	str	r3, [r7, #4]
 80041fc:	f04f 0200 	mov.w	r2, #0
 8004200:	f04f 0300 	mov.w	r3, #0
 8004204:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004208:	4659      	mov	r1, fp
 800420a:	00cb      	lsls	r3, r1, #3
 800420c:	4651      	mov	r1, sl
 800420e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004212:	4651      	mov	r1, sl
 8004214:	00ca      	lsls	r2, r1, #3
 8004216:	4610      	mov	r0, r2
 8004218:	4619      	mov	r1, r3
 800421a:	4603      	mov	r3, r0
 800421c:	4642      	mov	r2, r8
 800421e:	189b      	adds	r3, r3, r2
 8004220:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004222:	464b      	mov	r3, r9
 8004224:	460a      	mov	r2, r1
 8004226:	eb42 0303 	adc.w	r3, r2, r3
 800422a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800422c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	663b      	str	r3, [r7, #96]	@ 0x60
 8004236:	667a      	str	r2, [r7, #100]	@ 0x64
 8004238:	f04f 0200 	mov.w	r2, #0
 800423c:	f04f 0300 	mov.w	r3, #0
 8004240:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004244:	4649      	mov	r1, r9
 8004246:	008b      	lsls	r3, r1, #2
 8004248:	4641      	mov	r1, r8
 800424a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800424e:	4641      	mov	r1, r8
 8004250:	008a      	lsls	r2, r1, #2
 8004252:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004256:	f7fc f813 	bl	8000280 <__aeabi_uldivmod>
 800425a:	4602      	mov	r2, r0
 800425c:	460b      	mov	r3, r1
 800425e:	4b0d      	ldr	r3, [pc, #52]	@ (8004294 <UART_SetConfig+0x4e4>)
 8004260:	fba3 1302 	umull	r1, r3, r3, r2
 8004264:	095b      	lsrs	r3, r3, #5
 8004266:	2164      	movs	r1, #100	@ 0x64
 8004268:	fb01 f303 	mul.w	r3, r1, r3
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	011b      	lsls	r3, r3, #4
 8004270:	3332      	adds	r3, #50	@ 0x32
 8004272:	4a08      	ldr	r2, [pc, #32]	@ (8004294 <UART_SetConfig+0x4e4>)
 8004274:	fba2 2303 	umull	r2, r3, r2, r3
 8004278:	095b      	lsrs	r3, r3, #5
 800427a:	f003 020f 	and.w	r2, r3, #15
 800427e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4422      	add	r2, r4
 8004286:	609a      	str	r2, [r3, #8]
}
 8004288:	bf00      	nop
 800428a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800428e:	46bd      	mov	sp, r7
 8004290:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004294:	51eb851f 	.word	0x51eb851f

08004298 <siprintf>:
 8004298:	b40e      	push	{r1, r2, r3}
 800429a:	b500      	push	{lr}
 800429c:	b09c      	sub	sp, #112	@ 0x70
 800429e:	ab1d      	add	r3, sp, #116	@ 0x74
 80042a0:	9002      	str	r0, [sp, #8]
 80042a2:	9006      	str	r0, [sp, #24]
 80042a4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80042a8:	4809      	ldr	r0, [pc, #36]	@ (80042d0 <siprintf+0x38>)
 80042aa:	9107      	str	r1, [sp, #28]
 80042ac:	9104      	str	r1, [sp, #16]
 80042ae:	4909      	ldr	r1, [pc, #36]	@ (80042d4 <siprintf+0x3c>)
 80042b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80042b4:	9105      	str	r1, [sp, #20]
 80042b6:	6800      	ldr	r0, [r0, #0]
 80042b8:	9301      	str	r3, [sp, #4]
 80042ba:	a902      	add	r1, sp, #8
 80042bc:	f000 f994 	bl	80045e8 <_svfiprintf_r>
 80042c0:	9b02      	ldr	r3, [sp, #8]
 80042c2:	2200      	movs	r2, #0
 80042c4:	701a      	strb	r2, [r3, #0]
 80042c6:	b01c      	add	sp, #112	@ 0x70
 80042c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80042cc:	b003      	add	sp, #12
 80042ce:	4770      	bx	lr
 80042d0:	2000000c 	.word	0x2000000c
 80042d4:	ffff0208 	.word	0xffff0208

080042d8 <memset>:
 80042d8:	4402      	add	r2, r0
 80042da:	4603      	mov	r3, r0
 80042dc:	4293      	cmp	r3, r2
 80042de:	d100      	bne.n	80042e2 <memset+0xa>
 80042e0:	4770      	bx	lr
 80042e2:	f803 1b01 	strb.w	r1, [r3], #1
 80042e6:	e7f9      	b.n	80042dc <memset+0x4>

080042e8 <__errno>:
 80042e8:	4b01      	ldr	r3, [pc, #4]	@ (80042f0 <__errno+0x8>)
 80042ea:	6818      	ldr	r0, [r3, #0]
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	2000000c 	.word	0x2000000c

080042f4 <__libc_init_array>:
 80042f4:	b570      	push	{r4, r5, r6, lr}
 80042f6:	4d0d      	ldr	r5, [pc, #52]	@ (800432c <__libc_init_array+0x38>)
 80042f8:	4c0d      	ldr	r4, [pc, #52]	@ (8004330 <__libc_init_array+0x3c>)
 80042fa:	1b64      	subs	r4, r4, r5
 80042fc:	10a4      	asrs	r4, r4, #2
 80042fe:	2600      	movs	r6, #0
 8004300:	42a6      	cmp	r6, r4
 8004302:	d109      	bne.n	8004318 <__libc_init_array+0x24>
 8004304:	4d0b      	ldr	r5, [pc, #44]	@ (8004334 <__libc_init_array+0x40>)
 8004306:	4c0c      	ldr	r4, [pc, #48]	@ (8004338 <__libc_init_array+0x44>)
 8004308:	f000 fc66 	bl	8004bd8 <_init>
 800430c:	1b64      	subs	r4, r4, r5
 800430e:	10a4      	asrs	r4, r4, #2
 8004310:	2600      	movs	r6, #0
 8004312:	42a6      	cmp	r6, r4
 8004314:	d105      	bne.n	8004322 <__libc_init_array+0x2e>
 8004316:	bd70      	pop	{r4, r5, r6, pc}
 8004318:	f855 3b04 	ldr.w	r3, [r5], #4
 800431c:	4798      	blx	r3
 800431e:	3601      	adds	r6, #1
 8004320:	e7ee      	b.n	8004300 <__libc_init_array+0xc>
 8004322:	f855 3b04 	ldr.w	r3, [r5], #4
 8004326:	4798      	blx	r3
 8004328:	3601      	adds	r6, #1
 800432a:	e7f2      	b.n	8004312 <__libc_init_array+0x1e>
 800432c:	08004cf8 	.word	0x08004cf8
 8004330:	08004cf8 	.word	0x08004cf8
 8004334:	08004cf8 	.word	0x08004cf8
 8004338:	08004cfc 	.word	0x08004cfc

0800433c <__retarget_lock_acquire_recursive>:
 800433c:	4770      	bx	lr

0800433e <__retarget_lock_release_recursive>:
 800433e:	4770      	bx	lr

08004340 <_free_r>:
 8004340:	b538      	push	{r3, r4, r5, lr}
 8004342:	4605      	mov	r5, r0
 8004344:	2900      	cmp	r1, #0
 8004346:	d041      	beq.n	80043cc <_free_r+0x8c>
 8004348:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800434c:	1f0c      	subs	r4, r1, #4
 800434e:	2b00      	cmp	r3, #0
 8004350:	bfb8      	it	lt
 8004352:	18e4      	addlt	r4, r4, r3
 8004354:	f000 f8e0 	bl	8004518 <__malloc_lock>
 8004358:	4a1d      	ldr	r2, [pc, #116]	@ (80043d0 <_free_r+0x90>)
 800435a:	6813      	ldr	r3, [r2, #0]
 800435c:	b933      	cbnz	r3, 800436c <_free_r+0x2c>
 800435e:	6063      	str	r3, [r4, #4]
 8004360:	6014      	str	r4, [r2, #0]
 8004362:	4628      	mov	r0, r5
 8004364:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004368:	f000 b8dc 	b.w	8004524 <__malloc_unlock>
 800436c:	42a3      	cmp	r3, r4
 800436e:	d908      	bls.n	8004382 <_free_r+0x42>
 8004370:	6820      	ldr	r0, [r4, #0]
 8004372:	1821      	adds	r1, r4, r0
 8004374:	428b      	cmp	r3, r1
 8004376:	bf01      	itttt	eq
 8004378:	6819      	ldreq	r1, [r3, #0]
 800437a:	685b      	ldreq	r3, [r3, #4]
 800437c:	1809      	addeq	r1, r1, r0
 800437e:	6021      	streq	r1, [r4, #0]
 8004380:	e7ed      	b.n	800435e <_free_r+0x1e>
 8004382:	461a      	mov	r2, r3
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	b10b      	cbz	r3, 800438c <_free_r+0x4c>
 8004388:	42a3      	cmp	r3, r4
 800438a:	d9fa      	bls.n	8004382 <_free_r+0x42>
 800438c:	6811      	ldr	r1, [r2, #0]
 800438e:	1850      	adds	r0, r2, r1
 8004390:	42a0      	cmp	r0, r4
 8004392:	d10b      	bne.n	80043ac <_free_r+0x6c>
 8004394:	6820      	ldr	r0, [r4, #0]
 8004396:	4401      	add	r1, r0
 8004398:	1850      	adds	r0, r2, r1
 800439a:	4283      	cmp	r3, r0
 800439c:	6011      	str	r1, [r2, #0]
 800439e:	d1e0      	bne.n	8004362 <_free_r+0x22>
 80043a0:	6818      	ldr	r0, [r3, #0]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	6053      	str	r3, [r2, #4]
 80043a6:	4408      	add	r0, r1
 80043a8:	6010      	str	r0, [r2, #0]
 80043aa:	e7da      	b.n	8004362 <_free_r+0x22>
 80043ac:	d902      	bls.n	80043b4 <_free_r+0x74>
 80043ae:	230c      	movs	r3, #12
 80043b0:	602b      	str	r3, [r5, #0]
 80043b2:	e7d6      	b.n	8004362 <_free_r+0x22>
 80043b4:	6820      	ldr	r0, [r4, #0]
 80043b6:	1821      	adds	r1, r4, r0
 80043b8:	428b      	cmp	r3, r1
 80043ba:	bf04      	itt	eq
 80043bc:	6819      	ldreq	r1, [r3, #0]
 80043be:	685b      	ldreq	r3, [r3, #4]
 80043c0:	6063      	str	r3, [r4, #4]
 80043c2:	bf04      	itt	eq
 80043c4:	1809      	addeq	r1, r1, r0
 80043c6:	6021      	streq	r1, [r4, #0]
 80043c8:	6054      	str	r4, [r2, #4]
 80043ca:	e7ca      	b.n	8004362 <_free_r+0x22>
 80043cc:	bd38      	pop	{r3, r4, r5, pc}
 80043ce:	bf00      	nop
 80043d0:	20000280 	.word	0x20000280

080043d4 <sbrk_aligned>:
 80043d4:	b570      	push	{r4, r5, r6, lr}
 80043d6:	4e0f      	ldr	r6, [pc, #60]	@ (8004414 <sbrk_aligned+0x40>)
 80043d8:	460c      	mov	r4, r1
 80043da:	6831      	ldr	r1, [r6, #0]
 80043dc:	4605      	mov	r5, r0
 80043de:	b911      	cbnz	r1, 80043e6 <sbrk_aligned+0x12>
 80043e0:	f000 fba6 	bl	8004b30 <_sbrk_r>
 80043e4:	6030      	str	r0, [r6, #0]
 80043e6:	4621      	mov	r1, r4
 80043e8:	4628      	mov	r0, r5
 80043ea:	f000 fba1 	bl	8004b30 <_sbrk_r>
 80043ee:	1c43      	adds	r3, r0, #1
 80043f0:	d103      	bne.n	80043fa <sbrk_aligned+0x26>
 80043f2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80043f6:	4620      	mov	r0, r4
 80043f8:	bd70      	pop	{r4, r5, r6, pc}
 80043fa:	1cc4      	adds	r4, r0, #3
 80043fc:	f024 0403 	bic.w	r4, r4, #3
 8004400:	42a0      	cmp	r0, r4
 8004402:	d0f8      	beq.n	80043f6 <sbrk_aligned+0x22>
 8004404:	1a21      	subs	r1, r4, r0
 8004406:	4628      	mov	r0, r5
 8004408:	f000 fb92 	bl	8004b30 <_sbrk_r>
 800440c:	3001      	adds	r0, #1
 800440e:	d1f2      	bne.n	80043f6 <sbrk_aligned+0x22>
 8004410:	e7ef      	b.n	80043f2 <sbrk_aligned+0x1e>
 8004412:	bf00      	nop
 8004414:	2000027c 	.word	0x2000027c

08004418 <_malloc_r>:
 8004418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800441c:	1ccd      	adds	r5, r1, #3
 800441e:	f025 0503 	bic.w	r5, r5, #3
 8004422:	3508      	adds	r5, #8
 8004424:	2d0c      	cmp	r5, #12
 8004426:	bf38      	it	cc
 8004428:	250c      	movcc	r5, #12
 800442a:	2d00      	cmp	r5, #0
 800442c:	4606      	mov	r6, r0
 800442e:	db01      	blt.n	8004434 <_malloc_r+0x1c>
 8004430:	42a9      	cmp	r1, r5
 8004432:	d904      	bls.n	800443e <_malloc_r+0x26>
 8004434:	230c      	movs	r3, #12
 8004436:	6033      	str	r3, [r6, #0]
 8004438:	2000      	movs	r0, #0
 800443a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800443e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004514 <_malloc_r+0xfc>
 8004442:	f000 f869 	bl	8004518 <__malloc_lock>
 8004446:	f8d8 3000 	ldr.w	r3, [r8]
 800444a:	461c      	mov	r4, r3
 800444c:	bb44      	cbnz	r4, 80044a0 <_malloc_r+0x88>
 800444e:	4629      	mov	r1, r5
 8004450:	4630      	mov	r0, r6
 8004452:	f7ff ffbf 	bl	80043d4 <sbrk_aligned>
 8004456:	1c43      	adds	r3, r0, #1
 8004458:	4604      	mov	r4, r0
 800445a:	d158      	bne.n	800450e <_malloc_r+0xf6>
 800445c:	f8d8 4000 	ldr.w	r4, [r8]
 8004460:	4627      	mov	r7, r4
 8004462:	2f00      	cmp	r7, #0
 8004464:	d143      	bne.n	80044ee <_malloc_r+0xd6>
 8004466:	2c00      	cmp	r4, #0
 8004468:	d04b      	beq.n	8004502 <_malloc_r+0xea>
 800446a:	6823      	ldr	r3, [r4, #0]
 800446c:	4639      	mov	r1, r7
 800446e:	4630      	mov	r0, r6
 8004470:	eb04 0903 	add.w	r9, r4, r3
 8004474:	f000 fb5c 	bl	8004b30 <_sbrk_r>
 8004478:	4581      	cmp	r9, r0
 800447a:	d142      	bne.n	8004502 <_malloc_r+0xea>
 800447c:	6821      	ldr	r1, [r4, #0]
 800447e:	1a6d      	subs	r5, r5, r1
 8004480:	4629      	mov	r1, r5
 8004482:	4630      	mov	r0, r6
 8004484:	f7ff ffa6 	bl	80043d4 <sbrk_aligned>
 8004488:	3001      	adds	r0, #1
 800448a:	d03a      	beq.n	8004502 <_malloc_r+0xea>
 800448c:	6823      	ldr	r3, [r4, #0]
 800448e:	442b      	add	r3, r5
 8004490:	6023      	str	r3, [r4, #0]
 8004492:	f8d8 3000 	ldr.w	r3, [r8]
 8004496:	685a      	ldr	r2, [r3, #4]
 8004498:	bb62      	cbnz	r2, 80044f4 <_malloc_r+0xdc>
 800449a:	f8c8 7000 	str.w	r7, [r8]
 800449e:	e00f      	b.n	80044c0 <_malloc_r+0xa8>
 80044a0:	6822      	ldr	r2, [r4, #0]
 80044a2:	1b52      	subs	r2, r2, r5
 80044a4:	d420      	bmi.n	80044e8 <_malloc_r+0xd0>
 80044a6:	2a0b      	cmp	r2, #11
 80044a8:	d917      	bls.n	80044da <_malloc_r+0xc2>
 80044aa:	1961      	adds	r1, r4, r5
 80044ac:	42a3      	cmp	r3, r4
 80044ae:	6025      	str	r5, [r4, #0]
 80044b0:	bf18      	it	ne
 80044b2:	6059      	strne	r1, [r3, #4]
 80044b4:	6863      	ldr	r3, [r4, #4]
 80044b6:	bf08      	it	eq
 80044b8:	f8c8 1000 	streq.w	r1, [r8]
 80044bc:	5162      	str	r2, [r4, r5]
 80044be:	604b      	str	r3, [r1, #4]
 80044c0:	4630      	mov	r0, r6
 80044c2:	f000 f82f 	bl	8004524 <__malloc_unlock>
 80044c6:	f104 000b 	add.w	r0, r4, #11
 80044ca:	1d23      	adds	r3, r4, #4
 80044cc:	f020 0007 	bic.w	r0, r0, #7
 80044d0:	1ac2      	subs	r2, r0, r3
 80044d2:	bf1c      	itt	ne
 80044d4:	1a1b      	subne	r3, r3, r0
 80044d6:	50a3      	strne	r3, [r4, r2]
 80044d8:	e7af      	b.n	800443a <_malloc_r+0x22>
 80044da:	6862      	ldr	r2, [r4, #4]
 80044dc:	42a3      	cmp	r3, r4
 80044de:	bf0c      	ite	eq
 80044e0:	f8c8 2000 	streq.w	r2, [r8]
 80044e4:	605a      	strne	r2, [r3, #4]
 80044e6:	e7eb      	b.n	80044c0 <_malloc_r+0xa8>
 80044e8:	4623      	mov	r3, r4
 80044ea:	6864      	ldr	r4, [r4, #4]
 80044ec:	e7ae      	b.n	800444c <_malloc_r+0x34>
 80044ee:	463c      	mov	r4, r7
 80044f0:	687f      	ldr	r7, [r7, #4]
 80044f2:	e7b6      	b.n	8004462 <_malloc_r+0x4a>
 80044f4:	461a      	mov	r2, r3
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	42a3      	cmp	r3, r4
 80044fa:	d1fb      	bne.n	80044f4 <_malloc_r+0xdc>
 80044fc:	2300      	movs	r3, #0
 80044fe:	6053      	str	r3, [r2, #4]
 8004500:	e7de      	b.n	80044c0 <_malloc_r+0xa8>
 8004502:	230c      	movs	r3, #12
 8004504:	6033      	str	r3, [r6, #0]
 8004506:	4630      	mov	r0, r6
 8004508:	f000 f80c 	bl	8004524 <__malloc_unlock>
 800450c:	e794      	b.n	8004438 <_malloc_r+0x20>
 800450e:	6005      	str	r5, [r0, #0]
 8004510:	e7d6      	b.n	80044c0 <_malloc_r+0xa8>
 8004512:	bf00      	nop
 8004514:	20000280 	.word	0x20000280

08004518 <__malloc_lock>:
 8004518:	4801      	ldr	r0, [pc, #4]	@ (8004520 <__malloc_lock+0x8>)
 800451a:	f7ff bf0f 	b.w	800433c <__retarget_lock_acquire_recursive>
 800451e:	bf00      	nop
 8004520:	20000278 	.word	0x20000278

08004524 <__malloc_unlock>:
 8004524:	4801      	ldr	r0, [pc, #4]	@ (800452c <__malloc_unlock+0x8>)
 8004526:	f7ff bf0a 	b.w	800433e <__retarget_lock_release_recursive>
 800452a:	bf00      	nop
 800452c:	20000278 	.word	0x20000278

08004530 <__ssputs_r>:
 8004530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004534:	688e      	ldr	r6, [r1, #8]
 8004536:	461f      	mov	r7, r3
 8004538:	42be      	cmp	r6, r7
 800453a:	680b      	ldr	r3, [r1, #0]
 800453c:	4682      	mov	sl, r0
 800453e:	460c      	mov	r4, r1
 8004540:	4690      	mov	r8, r2
 8004542:	d82d      	bhi.n	80045a0 <__ssputs_r+0x70>
 8004544:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004548:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800454c:	d026      	beq.n	800459c <__ssputs_r+0x6c>
 800454e:	6965      	ldr	r5, [r4, #20]
 8004550:	6909      	ldr	r1, [r1, #16]
 8004552:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004556:	eba3 0901 	sub.w	r9, r3, r1
 800455a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800455e:	1c7b      	adds	r3, r7, #1
 8004560:	444b      	add	r3, r9
 8004562:	106d      	asrs	r5, r5, #1
 8004564:	429d      	cmp	r5, r3
 8004566:	bf38      	it	cc
 8004568:	461d      	movcc	r5, r3
 800456a:	0553      	lsls	r3, r2, #21
 800456c:	d527      	bpl.n	80045be <__ssputs_r+0x8e>
 800456e:	4629      	mov	r1, r5
 8004570:	f7ff ff52 	bl	8004418 <_malloc_r>
 8004574:	4606      	mov	r6, r0
 8004576:	b360      	cbz	r0, 80045d2 <__ssputs_r+0xa2>
 8004578:	6921      	ldr	r1, [r4, #16]
 800457a:	464a      	mov	r2, r9
 800457c:	f000 fae8 	bl	8004b50 <memcpy>
 8004580:	89a3      	ldrh	r3, [r4, #12]
 8004582:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004586:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800458a:	81a3      	strh	r3, [r4, #12]
 800458c:	6126      	str	r6, [r4, #16]
 800458e:	6165      	str	r5, [r4, #20]
 8004590:	444e      	add	r6, r9
 8004592:	eba5 0509 	sub.w	r5, r5, r9
 8004596:	6026      	str	r6, [r4, #0]
 8004598:	60a5      	str	r5, [r4, #8]
 800459a:	463e      	mov	r6, r7
 800459c:	42be      	cmp	r6, r7
 800459e:	d900      	bls.n	80045a2 <__ssputs_r+0x72>
 80045a0:	463e      	mov	r6, r7
 80045a2:	6820      	ldr	r0, [r4, #0]
 80045a4:	4632      	mov	r2, r6
 80045a6:	4641      	mov	r1, r8
 80045a8:	f000 faa8 	bl	8004afc <memmove>
 80045ac:	68a3      	ldr	r3, [r4, #8]
 80045ae:	1b9b      	subs	r3, r3, r6
 80045b0:	60a3      	str	r3, [r4, #8]
 80045b2:	6823      	ldr	r3, [r4, #0]
 80045b4:	4433      	add	r3, r6
 80045b6:	6023      	str	r3, [r4, #0]
 80045b8:	2000      	movs	r0, #0
 80045ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045be:	462a      	mov	r2, r5
 80045c0:	f000 fad4 	bl	8004b6c <_realloc_r>
 80045c4:	4606      	mov	r6, r0
 80045c6:	2800      	cmp	r0, #0
 80045c8:	d1e0      	bne.n	800458c <__ssputs_r+0x5c>
 80045ca:	6921      	ldr	r1, [r4, #16]
 80045cc:	4650      	mov	r0, sl
 80045ce:	f7ff feb7 	bl	8004340 <_free_r>
 80045d2:	230c      	movs	r3, #12
 80045d4:	f8ca 3000 	str.w	r3, [sl]
 80045d8:	89a3      	ldrh	r3, [r4, #12]
 80045da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80045de:	81a3      	strh	r3, [r4, #12]
 80045e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80045e4:	e7e9      	b.n	80045ba <__ssputs_r+0x8a>
	...

080045e8 <_svfiprintf_r>:
 80045e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045ec:	4698      	mov	r8, r3
 80045ee:	898b      	ldrh	r3, [r1, #12]
 80045f0:	061b      	lsls	r3, r3, #24
 80045f2:	b09d      	sub	sp, #116	@ 0x74
 80045f4:	4607      	mov	r7, r0
 80045f6:	460d      	mov	r5, r1
 80045f8:	4614      	mov	r4, r2
 80045fa:	d510      	bpl.n	800461e <_svfiprintf_r+0x36>
 80045fc:	690b      	ldr	r3, [r1, #16]
 80045fe:	b973      	cbnz	r3, 800461e <_svfiprintf_r+0x36>
 8004600:	2140      	movs	r1, #64	@ 0x40
 8004602:	f7ff ff09 	bl	8004418 <_malloc_r>
 8004606:	6028      	str	r0, [r5, #0]
 8004608:	6128      	str	r0, [r5, #16]
 800460a:	b930      	cbnz	r0, 800461a <_svfiprintf_r+0x32>
 800460c:	230c      	movs	r3, #12
 800460e:	603b      	str	r3, [r7, #0]
 8004610:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004614:	b01d      	add	sp, #116	@ 0x74
 8004616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800461a:	2340      	movs	r3, #64	@ 0x40
 800461c:	616b      	str	r3, [r5, #20]
 800461e:	2300      	movs	r3, #0
 8004620:	9309      	str	r3, [sp, #36]	@ 0x24
 8004622:	2320      	movs	r3, #32
 8004624:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004628:	f8cd 800c 	str.w	r8, [sp, #12]
 800462c:	2330      	movs	r3, #48	@ 0x30
 800462e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80047cc <_svfiprintf_r+0x1e4>
 8004632:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004636:	f04f 0901 	mov.w	r9, #1
 800463a:	4623      	mov	r3, r4
 800463c:	469a      	mov	sl, r3
 800463e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004642:	b10a      	cbz	r2, 8004648 <_svfiprintf_r+0x60>
 8004644:	2a25      	cmp	r2, #37	@ 0x25
 8004646:	d1f9      	bne.n	800463c <_svfiprintf_r+0x54>
 8004648:	ebba 0b04 	subs.w	fp, sl, r4
 800464c:	d00b      	beq.n	8004666 <_svfiprintf_r+0x7e>
 800464e:	465b      	mov	r3, fp
 8004650:	4622      	mov	r2, r4
 8004652:	4629      	mov	r1, r5
 8004654:	4638      	mov	r0, r7
 8004656:	f7ff ff6b 	bl	8004530 <__ssputs_r>
 800465a:	3001      	adds	r0, #1
 800465c:	f000 80a7 	beq.w	80047ae <_svfiprintf_r+0x1c6>
 8004660:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004662:	445a      	add	r2, fp
 8004664:	9209      	str	r2, [sp, #36]	@ 0x24
 8004666:	f89a 3000 	ldrb.w	r3, [sl]
 800466a:	2b00      	cmp	r3, #0
 800466c:	f000 809f 	beq.w	80047ae <_svfiprintf_r+0x1c6>
 8004670:	2300      	movs	r3, #0
 8004672:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004676:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800467a:	f10a 0a01 	add.w	sl, sl, #1
 800467e:	9304      	str	r3, [sp, #16]
 8004680:	9307      	str	r3, [sp, #28]
 8004682:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004686:	931a      	str	r3, [sp, #104]	@ 0x68
 8004688:	4654      	mov	r4, sl
 800468a:	2205      	movs	r2, #5
 800468c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004690:	484e      	ldr	r0, [pc, #312]	@ (80047cc <_svfiprintf_r+0x1e4>)
 8004692:	f7fb fda5 	bl	80001e0 <memchr>
 8004696:	9a04      	ldr	r2, [sp, #16]
 8004698:	b9d8      	cbnz	r0, 80046d2 <_svfiprintf_r+0xea>
 800469a:	06d0      	lsls	r0, r2, #27
 800469c:	bf44      	itt	mi
 800469e:	2320      	movmi	r3, #32
 80046a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80046a4:	0711      	lsls	r1, r2, #28
 80046a6:	bf44      	itt	mi
 80046a8:	232b      	movmi	r3, #43	@ 0x2b
 80046aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80046ae:	f89a 3000 	ldrb.w	r3, [sl]
 80046b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80046b4:	d015      	beq.n	80046e2 <_svfiprintf_r+0xfa>
 80046b6:	9a07      	ldr	r2, [sp, #28]
 80046b8:	4654      	mov	r4, sl
 80046ba:	2000      	movs	r0, #0
 80046bc:	f04f 0c0a 	mov.w	ip, #10
 80046c0:	4621      	mov	r1, r4
 80046c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80046c6:	3b30      	subs	r3, #48	@ 0x30
 80046c8:	2b09      	cmp	r3, #9
 80046ca:	d94b      	bls.n	8004764 <_svfiprintf_r+0x17c>
 80046cc:	b1b0      	cbz	r0, 80046fc <_svfiprintf_r+0x114>
 80046ce:	9207      	str	r2, [sp, #28]
 80046d0:	e014      	b.n	80046fc <_svfiprintf_r+0x114>
 80046d2:	eba0 0308 	sub.w	r3, r0, r8
 80046d6:	fa09 f303 	lsl.w	r3, r9, r3
 80046da:	4313      	orrs	r3, r2
 80046dc:	9304      	str	r3, [sp, #16]
 80046de:	46a2      	mov	sl, r4
 80046e0:	e7d2      	b.n	8004688 <_svfiprintf_r+0xa0>
 80046e2:	9b03      	ldr	r3, [sp, #12]
 80046e4:	1d19      	adds	r1, r3, #4
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	9103      	str	r1, [sp, #12]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	bfbb      	ittet	lt
 80046ee:	425b      	neglt	r3, r3
 80046f0:	f042 0202 	orrlt.w	r2, r2, #2
 80046f4:	9307      	strge	r3, [sp, #28]
 80046f6:	9307      	strlt	r3, [sp, #28]
 80046f8:	bfb8      	it	lt
 80046fa:	9204      	strlt	r2, [sp, #16]
 80046fc:	7823      	ldrb	r3, [r4, #0]
 80046fe:	2b2e      	cmp	r3, #46	@ 0x2e
 8004700:	d10a      	bne.n	8004718 <_svfiprintf_r+0x130>
 8004702:	7863      	ldrb	r3, [r4, #1]
 8004704:	2b2a      	cmp	r3, #42	@ 0x2a
 8004706:	d132      	bne.n	800476e <_svfiprintf_r+0x186>
 8004708:	9b03      	ldr	r3, [sp, #12]
 800470a:	1d1a      	adds	r2, r3, #4
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	9203      	str	r2, [sp, #12]
 8004710:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004714:	3402      	adds	r4, #2
 8004716:	9305      	str	r3, [sp, #20]
 8004718:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80047dc <_svfiprintf_r+0x1f4>
 800471c:	7821      	ldrb	r1, [r4, #0]
 800471e:	2203      	movs	r2, #3
 8004720:	4650      	mov	r0, sl
 8004722:	f7fb fd5d 	bl	80001e0 <memchr>
 8004726:	b138      	cbz	r0, 8004738 <_svfiprintf_r+0x150>
 8004728:	9b04      	ldr	r3, [sp, #16]
 800472a:	eba0 000a 	sub.w	r0, r0, sl
 800472e:	2240      	movs	r2, #64	@ 0x40
 8004730:	4082      	lsls	r2, r0
 8004732:	4313      	orrs	r3, r2
 8004734:	3401      	adds	r4, #1
 8004736:	9304      	str	r3, [sp, #16]
 8004738:	f814 1b01 	ldrb.w	r1, [r4], #1
 800473c:	4824      	ldr	r0, [pc, #144]	@ (80047d0 <_svfiprintf_r+0x1e8>)
 800473e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004742:	2206      	movs	r2, #6
 8004744:	f7fb fd4c 	bl	80001e0 <memchr>
 8004748:	2800      	cmp	r0, #0
 800474a:	d036      	beq.n	80047ba <_svfiprintf_r+0x1d2>
 800474c:	4b21      	ldr	r3, [pc, #132]	@ (80047d4 <_svfiprintf_r+0x1ec>)
 800474e:	bb1b      	cbnz	r3, 8004798 <_svfiprintf_r+0x1b0>
 8004750:	9b03      	ldr	r3, [sp, #12]
 8004752:	3307      	adds	r3, #7
 8004754:	f023 0307 	bic.w	r3, r3, #7
 8004758:	3308      	adds	r3, #8
 800475a:	9303      	str	r3, [sp, #12]
 800475c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800475e:	4433      	add	r3, r6
 8004760:	9309      	str	r3, [sp, #36]	@ 0x24
 8004762:	e76a      	b.n	800463a <_svfiprintf_r+0x52>
 8004764:	fb0c 3202 	mla	r2, ip, r2, r3
 8004768:	460c      	mov	r4, r1
 800476a:	2001      	movs	r0, #1
 800476c:	e7a8      	b.n	80046c0 <_svfiprintf_r+0xd8>
 800476e:	2300      	movs	r3, #0
 8004770:	3401      	adds	r4, #1
 8004772:	9305      	str	r3, [sp, #20]
 8004774:	4619      	mov	r1, r3
 8004776:	f04f 0c0a 	mov.w	ip, #10
 800477a:	4620      	mov	r0, r4
 800477c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004780:	3a30      	subs	r2, #48	@ 0x30
 8004782:	2a09      	cmp	r2, #9
 8004784:	d903      	bls.n	800478e <_svfiprintf_r+0x1a6>
 8004786:	2b00      	cmp	r3, #0
 8004788:	d0c6      	beq.n	8004718 <_svfiprintf_r+0x130>
 800478a:	9105      	str	r1, [sp, #20]
 800478c:	e7c4      	b.n	8004718 <_svfiprintf_r+0x130>
 800478e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004792:	4604      	mov	r4, r0
 8004794:	2301      	movs	r3, #1
 8004796:	e7f0      	b.n	800477a <_svfiprintf_r+0x192>
 8004798:	ab03      	add	r3, sp, #12
 800479a:	9300      	str	r3, [sp, #0]
 800479c:	462a      	mov	r2, r5
 800479e:	4b0e      	ldr	r3, [pc, #56]	@ (80047d8 <_svfiprintf_r+0x1f0>)
 80047a0:	a904      	add	r1, sp, #16
 80047a2:	4638      	mov	r0, r7
 80047a4:	f3af 8000 	nop.w
 80047a8:	1c42      	adds	r2, r0, #1
 80047aa:	4606      	mov	r6, r0
 80047ac:	d1d6      	bne.n	800475c <_svfiprintf_r+0x174>
 80047ae:	89ab      	ldrh	r3, [r5, #12]
 80047b0:	065b      	lsls	r3, r3, #25
 80047b2:	f53f af2d 	bmi.w	8004610 <_svfiprintf_r+0x28>
 80047b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80047b8:	e72c      	b.n	8004614 <_svfiprintf_r+0x2c>
 80047ba:	ab03      	add	r3, sp, #12
 80047bc:	9300      	str	r3, [sp, #0]
 80047be:	462a      	mov	r2, r5
 80047c0:	4b05      	ldr	r3, [pc, #20]	@ (80047d8 <_svfiprintf_r+0x1f0>)
 80047c2:	a904      	add	r1, sp, #16
 80047c4:	4638      	mov	r0, r7
 80047c6:	f000 f879 	bl	80048bc <_printf_i>
 80047ca:	e7ed      	b.n	80047a8 <_svfiprintf_r+0x1c0>
 80047cc:	08004cbc 	.word	0x08004cbc
 80047d0:	08004cc6 	.word	0x08004cc6
 80047d4:	00000000 	.word	0x00000000
 80047d8:	08004531 	.word	0x08004531
 80047dc:	08004cc2 	.word	0x08004cc2

080047e0 <_printf_common>:
 80047e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047e4:	4616      	mov	r6, r2
 80047e6:	4698      	mov	r8, r3
 80047e8:	688a      	ldr	r2, [r1, #8]
 80047ea:	690b      	ldr	r3, [r1, #16]
 80047ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80047f0:	4293      	cmp	r3, r2
 80047f2:	bfb8      	it	lt
 80047f4:	4613      	movlt	r3, r2
 80047f6:	6033      	str	r3, [r6, #0]
 80047f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80047fc:	4607      	mov	r7, r0
 80047fe:	460c      	mov	r4, r1
 8004800:	b10a      	cbz	r2, 8004806 <_printf_common+0x26>
 8004802:	3301      	adds	r3, #1
 8004804:	6033      	str	r3, [r6, #0]
 8004806:	6823      	ldr	r3, [r4, #0]
 8004808:	0699      	lsls	r1, r3, #26
 800480a:	bf42      	ittt	mi
 800480c:	6833      	ldrmi	r3, [r6, #0]
 800480e:	3302      	addmi	r3, #2
 8004810:	6033      	strmi	r3, [r6, #0]
 8004812:	6825      	ldr	r5, [r4, #0]
 8004814:	f015 0506 	ands.w	r5, r5, #6
 8004818:	d106      	bne.n	8004828 <_printf_common+0x48>
 800481a:	f104 0a19 	add.w	sl, r4, #25
 800481e:	68e3      	ldr	r3, [r4, #12]
 8004820:	6832      	ldr	r2, [r6, #0]
 8004822:	1a9b      	subs	r3, r3, r2
 8004824:	42ab      	cmp	r3, r5
 8004826:	dc26      	bgt.n	8004876 <_printf_common+0x96>
 8004828:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800482c:	6822      	ldr	r2, [r4, #0]
 800482e:	3b00      	subs	r3, #0
 8004830:	bf18      	it	ne
 8004832:	2301      	movne	r3, #1
 8004834:	0692      	lsls	r2, r2, #26
 8004836:	d42b      	bmi.n	8004890 <_printf_common+0xb0>
 8004838:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800483c:	4641      	mov	r1, r8
 800483e:	4638      	mov	r0, r7
 8004840:	47c8      	blx	r9
 8004842:	3001      	adds	r0, #1
 8004844:	d01e      	beq.n	8004884 <_printf_common+0xa4>
 8004846:	6823      	ldr	r3, [r4, #0]
 8004848:	6922      	ldr	r2, [r4, #16]
 800484a:	f003 0306 	and.w	r3, r3, #6
 800484e:	2b04      	cmp	r3, #4
 8004850:	bf02      	ittt	eq
 8004852:	68e5      	ldreq	r5, [r4, #12]
 8004854:	6833      	ldreq	r3, [r6, #0]
 8004856:	1aed      	subeq	r5, r5, r3
 8004858:	68a3      	ldr	r3, [r4, #8]
 800485a:	bf0c      	ite	eq
 800485c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004860:	2500      	movne	r5, #0
 8004862:	4293      	cmp	r3, r2
 8004864:	bfc4      	itt	gt
 8004866:	1a9b      	subgt	r3, r3, r2
 8004868:	18ed      	addgt	r5, r5, r3
 800486a:	2600      	movs	r6, #0
 800486c:	341a      	adds	r4, #26
 800486e:	42b5      	cmp	r5, r6
 8004870:	d11a      	bne.n	80048a8 <_printf_common+0xc8>
 8004872:	2000      	movs	r0, #0
 8004874:	e008      	b.n	8004888 <_printf_common+0xa8>
 8004876:	2301      	movs	r3, #1
 8004878:	4652      	mov	r2, sl
 800487a:	4641      	mov	r1, r8
 800487c:	4638      	mov	r0, r7
 800487e:	47c8      	blx	r9
 8004880:	3001      	adds	r0, #1
 8004882:	d103      	bne.n	800488c <_printf_common+0xac>
 8004884:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800488c:	3501      	adds	r5, #1
 800488e:	e7c6      	b.n	800481e <_printf_common+0x3e>
 8004890:	18e1      	adds	r1, r4, r3
 8004892:	1c5a      	adds	r2, r3, #1
 8004894:	2030      	movs	r0, #48	@ 0x30
 8004896:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800489a:	4422      	add	r2, r4
 800489c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80048a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80048a4:	3302      	adds	r3, #2
 80048a6:	e7c7      	b.n	8004838 <_printf_common+0x58>
 80048a8:	2301      	movs	r3, #1
 80048aa:	4622      	mov	r2, r4
 80048ac:	4641      	mov	r1, r8
 80048ae:	4638      	mov	r0, r7
 80048b0:	47c8      	blx	r9
 80048b2:	3001      	adds	r0, #1
 80048b4:	d0e6      	beq.n	8004884 <_printf_common+0xa4>
 80048b6:	3601      	adds	r6, #1
 80048b8:	e7d9      	b.n	800486e <_printf_common+0x8e>
	...

080048bc <_printf_i>:
 80048bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048c0:	7e0f      	ldrb	r7, [r1, #24]
 80048c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80048c4:	2f78      	cmp	r7, #120	@ 0x78
 80048c6:	4691      	mov	r9, r2
 80048c8:	4680      	mov	r8, r0
 80048ca:	460c      	mov	r4, r1
 80048cc:	469a      	mov	sl, r3
 80048ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80048d2:	d807      	bhi.n	80048e4 <_printf_i+0x28>
 80048d4:	2f62      	cmp	r7, #98	@ 0x62
 80048d6:	d80a      	bhi.n	80048ee <_printf_i+0x32>
 80048d8:	2f00      	cmp	r7, #0
 80048da:	f000 80d2 	beq.w	8004a82 <_printf_i+0x1c6>
 80048de:	2f58      	cmp	r7, #88	@ 0x58
 80048e0:	f000 80b9 	beq.w	8004a56 <_printf_i+0x19a>
 80048e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80048e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80048ec:	e03a      	b.n	8004964 <_printf_i+0xa8>
 80048ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80048f2:	2b15      	cmp	r3, #21
 80048f4:	d8f6      	bhi.n	80048e4 <_printf_i+0x28>
 80048f6:	a101      	add	r1, pc, #4	@ (adr r1, 80048fc <_printf_i+0x40>)
 80048f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80048fc:	08004955 	.word	0x08004955
 8004900:	08004969 	.word	0x08004969
 8004904:	080048e5 	.word	0x080048e5
 8004908:	080048e5 	.word	0x080048e5
 800490c:	080048e5 	.word	0x080048e5
 8004910:	080048e5 	.word	0x080048e5
 8004914:	08004969 	.word	0x08004969
 8004918:	080048e5 	.word	0x080048e5
 800491c:	080048e5 	.word	0x080048e5
 8004920:	080048e5 	.word	0x080048e5
 8004924:	080048e5 	.word	0x080048e5
 8004928:	08004a69 	.word	0x08004a69
 800492c:	08004993 	.word	0x08004993
 8004930:	08004a23 	.word	0x08004a23
 8004934:	080048e5 	.word	0x080048e5
 8004938:	080048e5 	.word	0x080048e5
 800493c:	08004a8b 	.word	0x08004a8b
 8004940:	080048e5 	.word	0x080048e5
 8004944:	08004993 	.word	0x08004993
 8004948:	080048e5 	.word	0x080048e5
 800494c:	080048e5 	.word	0x080048e5
 8004950:	08004a2b 	.word	0x08004a2b
 8004954:	6833      	ldr	r3, [r6, #0]
 8004956:	1d1a      	adds	r2, r3, #4
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	6032      	str	r2, [r6, #0]
 800495c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004960:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004964:	2301      	movs	r3, #1
 8004966:	e09d      	b.n	8004aa4 <_printf_i+0x1e8>
 8004968:	6833      	ldr	r3, [r6, #0]
 800496a:	6820      	ldr	r0, [r4, #0]
 800496c:	1d19      	adds	r1, r3, #4
 800496e:	6031      	str	r1, [r6, #0]
 8004970:	0606      	lsls	r6, r0, #24
 8004972:	d501      	bpl.n	8004978 <_printf_i+0xbc>
 8004974:	681d      	ldr	r5, [r3, #0]
 8004976:	e003      	b.n	8004980 <_printf_i+0xc4>
 8004978:	0645      	lsls	r5, r0, #25
 800497a:	d5fb      	bpl.n	8004974 <_printf_i+0xb8>
 800497c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004980:	2d00      	cmp	r5, #0
 8004982:	da03      	bge.n	800498c <_printf_i+0xd0>
 8004984:	232d      	movs	r3, #45	@ 0x2d
 8004986:	426d      	negs	r5, r5
 8004988:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800498c:	4859      	ldr	r0, [pc, #356]	@ (8004af4 <_printf_i+0x238>)
 800498e:	230a      	movs	r3, #10
 8004990:	e011      	b.n	80049b6 <_printf_i+0xfa>
 8004992:	6821      	ldr	r1, [r4, #0]
 8004994:	6833      	ldr	r3, [r6, #0]
 8004996:	0608      	lsls	r0, r1, #24
 8004998:	f853 5b04 	ldr.w	r5, [r3], #4
 800499c:	d402      	bmi.n	80049a4 <_printf_i+0xe8>
 800499e:	0649      	lsls	r1, r1, #25
 80049a0:	bf48      	it	mi
 80049a2:	b2ad      	uxthmi	r5, r5
 80049a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80049a6:	4853      	ldr	r0, [pc, #332]	@ (8004af4 <_printf_i+0x238>)
 80049a8:	6033      	str	r3, [r6, #0]
 80049aa:	bf14      	ite	ne
 80049ac:	230a      	movne	r3, #10
 80049ae:	2308      	moveq	r3, #8
 80049b0:	2100      	movs	r1, #0
 80049b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80049b6:	6866      	ldr	r6, [r4, #4]
 80049b8:	60a6      	str	r6, [r4, #8]
 80049ba:	2e00      	cmp	r6, #0
 80049bc:	bfa2      	ittt	ge
 80049be:	6821      	ldrge	r1, [r4, #0]
 80049c0:	f021 0104 	bicge.w	r1, r1, #4
 80049c4:	6021      	strge	r1, [r4, #0]
 80049c6:	b90d      	cbnz	r5, 80049cc <_printf_i+0x110>
 80049c8:	2e00      	cmp	r6, #0
 80049ca:	d04b      	beq.n	8004a64 <_printf_i+0x1a8>
 80049cc:	4616      	mov	r6, r2
 80049ce:	fbb5 f1f3 	udiv	r1, r5, r3
 80049d2:	fb03 5711 	mls	r7, r3, r1, r5
 80049d6:	5dc7      	ldrb	r7, [r0, r7]
 80049d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80049dc:	462f      	mov	r7, r5
 80049de:	42bb      	cmp	r3, r7
 80049e0:	460d      	mov	r5, r1
 80049e2:	d9f4      	bls.n	80049ce <_printf_i+0x112>
 80049e4:	2b08      	cmp	r3, #8
 80049e6:	d10b      	bne.n	8004a00 <_printf_i+0x144>
 80049e8:	6823      	ldr	r3, [r4, #0]
 80049ea:	07df      	lsls	r7, r3, #31
 80049ec:	d508      	bpl.n	8004a00 <_printf_i+0x144>
 80049ee:	6923      	ldr	r3, [r4, #16]
 80049f0:	6861      	ldr	r1, [r4, #4]
 80049f2:	4299      	cmp	r1, r3
 80049f4:	bfde      	ittt	le
 80049f6:	2330      	movle	r3, #48	@ 0x30
 80049f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80049fc:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004a00:	1b92      	subs	r2, r2, r6
 8004a02:	6122      	str	r2, [r4, #16]
 8004a04:	f8cd a000 	str.w	sl, [sp]
 8004a08:	464b      	mov	r3, r9
 8004a0a:	aa03      	add	r2, sp, #12
 8004a0c:	4621      	mov	r1, r4
 8004a0e:	4640      	mov	r0, r8
 8004a10:	f7ff fee6 	bl	80047e0 <_printf_common>
 8004a14:	3001      	adds	r0, #1
 8004a16:	d14a      	bne.n	8004aae <_printf_i+0x1f2>
 8004a18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004a1c:	b004      	add	sp, #16
 8004a1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a22:	6823      	ldr	r3, [r4, #0]
 8004a24:	f043 0320 	orr.w	r3, r3, #32
 8004a28:	6023      	str	r3, [r4, #0]
 8004a2a:	4833      	ldr	r0, [pc, #204]	@ (8004af8 <_printf_i+0x23c>)
 8004a2c:	2778      	movs	r7, #120	@ 0x78
 8004a2e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004a32:	6823      	ldr	r3, [r4, #0]
 8004a34:	6831      	ldr	r1, [r6, #0]
 8004a36:	061f      	lsls	r7, r3, #24
 8004a38:	f851 5b04 	ldr.w	r5, [r1], #4
 8004a3c:	d402      	bmi.n	8004a44 <_printf_i+0x188>
 8004a3e:	065f      	lsls	r7, r3, #25
 8004a40:	bf48      	it	mi
 8004a42:	b2ad      	uxthmi	r5, r5
 8004a44:	6031      	str	r1, [r6, #0]
 8004a46:	07d9      	lsls	r1, r3, #31
 8004a48:	bf44      	itt	mi
 8004a4a:	f043 0320 	orrmi.w	r3, r3, #32
 8004a4e:	6023      	strmi	r3, [r4, #0]
 8004a50:	b11d      	cbz	r5, 8004a5a <_printf_i+0x19e>
 8004a52:	2310      	movs	r3, #16
 8004a54:	e7ac      	b.n	80049b0 <_printf_i+0xf4>
 8004a56:	4827      	ldr	r0, [pc, #156]	@ (8004af4 <_printf_i+0x238>)
 8004a58:	e7e9      	b.n	8004a2e <_printf_i+0x172>
 8004a5a:	6823      	ldr	r3, [r4, #0]
 8004a5c:	f023 0320 	bic.w	r3, r3, #32
 8004a60:	6023      	str	r3, [r4, #0]
 8004a62:	e7f6      	b.n	8004a52 <_printf_i+0x196>
 8004a64:	4616      	mov	r6, r2
 8004a66:	e7bd      	b.n	80049e4 <_printf_i+0x128>
 8004a68:	6833      	ldr	r3, [r6, #0]
 8004a6a:	6825      	ldr	r5, [r4, #0]
 8004a6c:	6961      	ldr	r1, [r4, #20]
 8004a6e:	1d18      	adds	r0, r3, #4
 8004a70:	6030      	str	r0, [r6, #0]
 8004a72:	062e      	lsls	r6, r5, #24
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	d501      	bpl.n	8004a7c <_printf_i+0x1c0>
 8004a78:	6019      	str	r1, [r3, #0]
 8004a7a:	e002      	b.n	8004a82 <_printf_i+0x1c6>
 8004a7c:	0668      	lsls	r0, r5, #25
 8004a7e:	d5fb      	bpl.n	8004a78 <_printf_i+0x1bc>
 8004a80:	8019      	strh	r1, [r3, #0]
 8004a82:	2300      	movs	r3, #0
 8004a84:	6123      	str	r3, [r4, #16]
 8004a86:	4616      	mov	r6, r2
 8004a88:	e7bc      	b.n	8004a04 <_printf_i+0x148>
 8004a8a:	6833      	ldr	r3, [r6, #0]
 8004a8c:	1d1a      	adds	r2, r3, #4
 8004a8e:	6032      	str	r2, [r6, #0]
 8004a90:	681e      	ldr	r6, [r3, #0]
 8004a92:	6862      	ldr	r2, [r4, #4]
 8004a94:	2100      	movs	r1, #0
 8004a96:	4630      	mov	r0, r6
 8004a98:	f7fb fba2 	bl	80001e0 <memchr>
 8004a9c:	b108      	cbz	r0, 8004aa2 <_printf_i+0x1e6>
 8004a9e:	1b80      	subs	r0, r0, r6
 8004aa0:	6060      	str	r0, [r4, #4]
 8004aa2:	6863      	ldr	r3, [r4, #4]
 8004aa4:	6123      	str	r3, [r4, #16]
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004aac:	e7aa      	b.n	8004a04 <_printf_i+0x148>
 8004aae:	6923      	ldr	r3, [r4, #16]
 8004ab0:	4632      	mov	r2, r6
 8004ab2:	4649      	mov	r1, r9
 8004ab4:	4640      	mov	r0, r8
 8004ab6:	47d0      	blx	sl
 8004ab8:	3001      	adds	r0, #1
 8004aba:	d0ad      	beq.n	8004a18 <_printf_i+0x15c>
 8004abc:	6823      	ldr	r3, [r4, #0]
 8004abe:	079b      	lsls	r3, r3, #30
 8004ac0:	d413      	bmi.n	8004aea <_printf_i+0x22e>
 8004ac2:	68e0      	ldr	r0, [r4, #12]
 8004ac4:	9b03      	ldr	r3, [sp, #12]
 8004ac6:	4298      	cmp	r0, r3
 8004ac8:	bfb8      	it	lt
 8004aca:	4618      	movlt	r0, r3
 8004acc:	e7a6      	b.n	8004a1c <_printf_i+0x160>
 8004ace:	2301      	movs	r3, #1
 8004ad0:	4632      	mov	r2, r6
 8004ad2:	4649      	mov	r1, r9
 8004ad4:	4640      	mov	r0, r8
 8004ad6:	47d0      	blx	sl
 8004ad8:	3001      	adds	r0, #1
 8004ada:	d09d      	beq.n	8004a18 <_printf_i+0x15c>
 8004adc:	3501      	adds	r5, #1
 8004ade:	68e3      	ldr	r3, [r4, #12]
 8004ae0:	9903      	ldr	r1, [sp, #12]
 8004ae2:	1a5b      	subs	r3, r3, r1
 8004ae4:	42ab      	cmp	r3, r5
 8004ae6:	dcf2      	bgt.n	8004ace <_printf_i+0x212>
 8004ae8:	e7eb      	b.n	8004ac2 <_printf_i+0x206>
 8004aea:	2500      	movs	r5, #0
 8004aec:	f104 0619 	add.w	r6, r4, #25
 8004af0:	e7f5      	b.n	8004ade <_printf_i+0x222>
 8004af2:	bf00      	nop
 8004af4:	08004ccd 	.word	0x08004ccd
 8004af8:	08004cde 	.word	0x08004cde

08004afc <memmove>:
 8004afc:	4288      	cmp	r0, r1
 8004afe:	b510      	push	{r4, lr}
 8004b00:	eb01 0402 	add.w	r4, r1, r2
 8004b04:	d902      	bls.n	8004b0c <memmove+0x10>
 8004b06:	4284      	cmp	r4, r0
 8004b08:	4623      	mov	r3, r4
 8004b0a:	d807      	bhi.n	8004b1c <memmove+0x20>
 8004b0c:	1e43      	subs	r3, r0, #1
 8004b0e:	42a1      	cmp	r1, r4
 8004b10:	d008      	beq.n	8004b24 <memmove+0x28>
 8004b12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004b1a:	e7f8      	b.n	8004b0e <memmove+0x12>
 8004b1c:	4402      	add	r2, r0
 8004b1e:	4601      	mov	r1, r0
 8004b20:	428a      	cmp	r2, r1
 8004b22:	d100      	bne.n	8004b26 <memmove+0x2a>
 8004b24:	bd10      	pop	{r4, pc}
 8004b26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004b2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004b2e:	e7f7      	b.n	8004b20 <memmove+0x24>

08004b30 <_sbrk_r>:
 8004b30:	b538      	push	{r3, r4, r5, lr}
 8004b32:	4d06      	ldr	r5, [pc, #24]	@ (8004b4c <_sbrk_r+0x1c>)
 8004b34:	2300      	movs	r3, #0
 8004b36:	4604      	mov	r4, r0
 8004b38:	4608      	mov	r0, r1
 8004b3a:	602b      	str	r3, [r5, #0]
 8004b3c:	f7fc f9a4 	bl	8000e88 <_sbrk>
 8004b40:	1c43      	adds	r3, r0, #1
 8004b42:	d102      	bne.n	8004b4a <_sbrk_r+0x1a>
 8004b44:	682b      	ldr	r3, [r5, #0]
 8004b46:	b103      	cbz	r3, 8004b4a <_sbrk_r+0x1a>
 8004b48:	6023      	str	r3, [r4, #0]
 8004b4a:	bd38      	pop	{r3, r4, r5, pc}
 8004b4c:	20000274 	.word	0x20000274

08004b50 <memcpy>:
 8004b50:	440a      	add	r2, r1
 8004b52:	4291      	cmp	r1, r2
 8004b54:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004b58:	d100      	bne.n	8004b5c <memcpy+0xc>
 8004b5a:	4770      	bx	lr
 8004b5c:	b510      	push	{r4, lr}
 8004b5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b66:	4291      	cmp	r1, r2
 8004b68:	d1f9      	bne.n	8004b5e <memcpy+0xe>
 8004b6a:	bd10      	pop	{r4, pc}

08004b6c <_realloc_r>:
 8004b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b70:	4680      	mov	r8, r0
 8004b72:	4615      	mov	r5, r2
 8004b74:	460c      	mov	r4, r1
 8004b76:	b921      	cbnz	r1, 8004b82 <_realloc_r+0x16>
 8004b78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b7c:	4611      	mov	r1, r2
 8004b7e:	f7ff bc4b 	b.w	8004418 <_malloc_r>
 8004b82:	b92a      	cbnz	r2, 8004b90 <_realloc_r+0x24>
 8004b84:	f7ff fbdc 	bl	8004340 <_free_r>
 8004b88:	2400      	movs	r4, #0
 8004b8a:	4620      	mov	r0, r4
 8004b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b90:	f000 f81a 	bl	8004bc8 <_malloc_usable_size_r>
 8004b94:	4285      	cmp	r5, r0
 8004b96:	4606      	mov	r6, r0
 8004b98:	d802      	bhi.n	8004ba0 <_realloc_r+0x34>
 8004b9a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004b9e:	d8f4      	bhi.n	8004b8a <_realloc_r+0x1e>
 8004ba0:	4629      	mov	r1, r5
 8004ba2:	4640      	mov	r0, r8
 8004ba4:	f7ff fc38 	bl	8004418 <_malloc_r>
 8004ba8:	4607      	mov	r7, r0
 8004baa:	2800      	cmp	r0, #0
 8004bac:	d0ec      	beq.n	8004b88 <_realloc_r+0x1c>
 8004bae:	42b5      	cmp	r5, r6
 8004bb0:	462a      	mov	r2, r5
 8004bb2:	4621      	mov	r1, r4
 8004bb4:	bf28      	it	cs
 8004bb6:	4632      	movcs	r2, r6
 8004bb8:	f7ff ffca 	bl	8004b50 <memcpy>
 8004bbc:	4621      	mov	r1, r4
 8004bbe:	4640      	mov	r0, r8
 8004bc0:	f7ff fbbe 	bl	8004340 <_free_r>
 8004bc4:	463c      	mov	r4, r7
 8004bc6:	e7e0      	b.n	8004b8a <_realloc_r+0x1e>

08004bc8 <_malloc_usable_size_r>:
 8004bc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bcc:	1f18      	subs	r0, r3, #4
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	bfbc      	itt	lt
 8004bd2:	580b      	ldrlt	r3, [r1, r0]
 8004bd4:	18c0      	addlt	r0, r0, r3
 8004bd6:	4770      	bx	lr

08004bd8 <_init>:
 8004bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bda:	bf00      	nop
 8004bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bde:	bc08      	pop	{r3}
 8004be0:	469e      	mov	lr, r3
 8004be2:	4770      	bx	lr

08004be4 <_fini>:
 8004be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004be6:	bf00      	nop
 8004be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bea:	bc08      	pop	{r3}
 8004bec:	469e      	mov	lr, r3
 8004bee:	4770      	bx	lr
